{
  "address": "0x6adFF2BB4A465A885425e3bd4304A78BB659B12e",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "nftlAddress",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "storageAddress",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "approved",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "Approval",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "approved",
          "type": "bool"
        }
      ],
      "name": "ApprovalForAll",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "previousName",
          "type": "string"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "newName",
          "type": "string"
        }
      ],
      "name": "NameUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "Paused",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "Transfer",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "Unpaused",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "MAX_SUPPLY",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "NAME_CHANGE_PRICE",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "SPECIAL_CHARACTERS",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "approve",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        }
      ],
      "name": "balanceOf",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "internalType": "string",
          "name": "newName",
          "type": "string"
        }
      ],
      "name": "changeName",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "getApproved",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "getCharacterTraits",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint16",
              "name": "tribe",
              "type": "uint16"
            },
            {
              "internalType": "uint16",
              "name": "skinColor",
              "type": "uint16"
            },
            {
              "internalType": "uint16",
              "name": "furColor",
              "type": "uint16"
            },
            {
              "internalType": "uint16",
              "name": "eyeColor",
              "type": "uint16"
            },
            {
              "internalType": "uint16",
              "name": "pupilColor",
              "type": "uint16"
            },
            {
              "internalType": "uint16",
              "name": "hair",
              "type": "uint16"
            },
            {
              "internalType": "uint16",
              "name": "mouth",
              "type": "uint16"
            },
            {
              "internalType": "uint16",
              "name": "beard",
              "type": "uint16"
            },
            {
              "internalType": "uint16",
              "name": "top",
              "type": "uint16"
            },
            {
              "internalType": "uint16",
              "name": "outerwear",
              "type": "uint16"
            },
            {
              "internalType": "uint16",
              "name": "print",
              "type": "uint16"
            },
            {
              "internalType": "uint16",
              "name": "bottom",
              "type": "uint16"
            },
            {
              "internalType": "uint16",
              "name": "footwear",
              "type": "uint16"
            },
            {
              "internalType": "uint16",
              "name": "belt",
              "type": "uint16"
            },
            {
              "internalType": "uint16",
              "name": "hat",
              "type": "uint16"
            },
            {
              "internalType": "uint16",
              "name": "eyewear",
              "type": "uint16"
            },
            {
              "internalType": "uint16",
              "name": "piercing",
              "type": "uint16"
            },
            {
              "internalType": "uint16",
              "name": "wrist",
              "type": "uint16"
            },
            {
              "internalType": "uint16",
              "name": "hands",
              "type": "uint16"
            },
            {
              "internalType": "uint16",
              "name": "neckwear",
              "type": "uint16"
            },
            {
              "internalType": "uint16",
              "name": "leftItem",
              "type": "uint16"
            },
            {
              "internalType": "uint16",
              "name": "rightItem",
              "type": "uint16"
            }
          ],
          "internalType": "struct NiftyLeagueCharacter.CharacterTraits",
          "name": "_characterTraits",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getNFTPrice",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "getName",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getRemovedTraits",
      "outputs": [
        {
          "internalType": "uint16[]",
          "name": "",
          "type": "uint16[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "initPoolSizes",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "operator",
          "type": "address"
        }
      ],
      "name": "isApprovedForAll",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tribe",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "trait",
          "type": "uint256"
        }
      ],
      "name": "isAvailableAndAllowedTrait",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "trait",
          "type": "uint256"
        }
      ],
      "name": "isAvailableTrait",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "nameString",
          "type": "string"
        }
      ],
      "name": "isNameReserved",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "traitCombo",
          "type": "uint256"
        }
      ],
      "name": "isUnique",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "name",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "newPrice",
          "type": "uint256"
        }
      ],
      "name": "overrideMintPrice",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "ownerOf",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "pauseMinting",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "paused",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256[5]",
          "name": "character",
          "type": "uint256[5]"
        },
        {
          "internalType": "uint256[3]",
          "name": "head",
          "type": "uint256[3]"
        },
        {
          "internalType": "uint256[6]",
          "name": "clothing",
          "type": "uint256[6]"
        },
        {
          "internalType": "uint256[6]",
          "name": "accessories",
          "type": "uint256[6]"
        },
        {
          "internalType": "uint256[2]",
          "name": "items",
          "type": "uint256[2]"
        }
      ],
      "name": "purchase",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "safeTransferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        }
      ],
      "name": "safeTransferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "approved",
          "type": "bool"
        }
      ],
      "name": "setApprovalForAll",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "baseURI",
          "type": "string"
        }
      ],
      "name": "setBaseURI",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes4",
          "name": "interfaceId",
          "type": "bytes4"
        }
      ],
      "name": "supportsInterface",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "symbol",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "tokenURI",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalSupply",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "_value",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "transferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "unpauseMinting",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "newName",
          "type": "string"
        }
      ],
      "name": "validateName",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "withdraw",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x505044faf21f537972aa11dbe98b26bd41436b42e149b725c3515fe1b106be93",
  "receipt": {
    "to": null,
    "from": "0x6C287e19065661Ca590A11CF0b419d1434991B67",
    "contractAddress": "0x6adFF2BB4A465A885425e3bd4304A78BB659B12e",
    "transactionIndex": 66,
    "gasUsed": "3902700",
    "logsBloom": "0x
    "blockHash": "0x0c247ec07c8f5dae02cb4158ef31031f8db34f3c61387ccdae7e633184a3bfb9",
    "transactionHash": "0x505044faf21f537972aa11dbe98b26bd41436b42e149b725c3515fe1b106be93",
    "logs": [
      {
        "transactionIndex": 66,
        "blockNumber": 5541380,
        "transactionHash": "0x505044faf21f537972aa11dbe98b26bd41436b42e149b725c3515fe1b106be93",
        "address": "0x6adFF2BB4A465A885425e3bd4304A78BB659B12e",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x0000000000000000000000006c287e19065661ca590a11cf0b419d1434991b67"
        ],
        "data": "0x",
        "logIndex": 131,
        "blockHash": "0x0c247ec07c8f5dae02cb4158ef31031f8db34f3c61387ccdae7e633184a3bfb9"
      }
    ],
    "blockNumber": 5541380,
    "cumulativeGasUsed": "11270843",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x0d312E74ba71bff163A07DdD2b6847CefF49dD1e",
    "0x04301173892453559083C92B62a12A23aD55E646"
  ],
  "numDeployments": 1,
  "solcInputHash": "ea47cf34980cfea3667c7ff375b20ac9",
  "metadata": "{\"compiler\":{\"version\":\"0.8.11+commit.d7f03943\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"nftlAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"storageAddress\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"approved\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"ApprovalForAll\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"previousName\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"newName\",\"type\":\"string\"}],\"name\":\"NameUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Paused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Unpaused\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"MAX_SUPPLY\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"NAME_CHANGE_PRICE\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"SPECIAL_CHARACTERS\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"newName\",\"type\":\"string\"}],\"name\":\"changeName\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getApproved\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getCharacterTraits\",\"outputs\":[{\"components\":[{\"internalType\":\"uint16\",\"name\":\"tribe\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"skinColor\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"furColor\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"eyeColor\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"pupilColor\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"hair\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"mouth\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"beard\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"top\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"outerwear\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"print\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"bottom\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"footwear\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"belt\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"hat\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"eyewear\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"piercing\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"wrist\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"hands\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"neckwear\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"leftItem\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"rightItem\",\"type\":\"uint16\"}],\"internalType\":\"struct NiftyLeagueCharacter.CharacterTraits\",\"name\":\"_characterTraits\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getNFTPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getName\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getRemovedTraits\",\"outputs\":[{\"internalType\":\"uint16[]\",\"name\":\"\",\"type\":\"uint16[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"initPoolSizes\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"isApprovedForAll\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tribe\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"trait\",\"type\":\"uint256\"}],\"name\":\"isAvailableAndAllowedTrait\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"trait\",\"type\":\"uint256\"}],\"name\":\"isAvailableTrait\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"nameString\",\"type\":\"string\"}],\"name\":\"isNameReserved\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"traitCombo\",\"type\":\"uint256\"}],\"name\":\"isUnique\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newPrice\",\"type\":\"uint256\"}],\"name\":\"overrideMintPrice\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"ownerOf\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pauseMinting\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[5]\",\"name\":\"character\",\"type\":\"uint256[5]\"},{\"internalType\":\"uint256[3]\",\"name\":\"head\",\"type\":\"uint256[3]\"},{\"internalType\":\"uint256[6]\",\"name\":\"clothing\",\"type\":\"uint256[6]\"},{\"internalType\":\"uint256[6]\",\"name\":\"accessories\",\"type\":\"uint256[6]\"},{\"internalType\":\"uint256[2]\",\"name\":\"items\",\"type\":\"uint256[2]\"}],\"name\":\"purchase\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"setApprovalForAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"baseURI\",\"type\":\"string\"}],\"name\":\"setBaseURI\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"tokenURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"unpauseMinting\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"newName\",\"type\":\"string\"}],\"name\":\"validateName\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"Extends NameableCharacter and NiftyLeagueCharacter (ERC721)\",\"kind\":\"dev\",\"methods\":{\"approve(address,uint256)\":{\"details\":\"See {IERC721-approve}.\"},\"balanceOf(address)\":{\"details\":\"See {IERC721-balanceOf}.\"},\"changeName(uint256,string)\":{\"params\":{\"newName\":\"New name to validate and set on NFT\",\"tokenId\":\"ID of NFT\"},\"returns\":{\"_0\":\"New NFT name\"}},\"constructor\":{\"params\":{\"nftlAddress\":\"Address of verified Nifty League NFTL contract\",\"storageAddress\":\"Address of verified Allowed Colors Storage\"}},\"getApproved(uint256)\":{\"details\":\"See {IERC721-getApproved}.\"},\"getCharacterTraits(uint256)\":{\"details\":\"Permissioning not added because it is only callable once.\",\"params\":{\"tokenId\":\"ID of NFT\"},\"returns\":{\"_characterTraits\":\"- indexed list of character traits\"}},\"getNFTPrice()\":{\"returns\":{\"_0\":\"Current price to mint 1 NFT\"}},\"getName(uint256)\":{\"params\":{\"tokenId\":\"ID of NFT\"},\"returns\":{\"_0\":\"NFT name\"}},\"getRemovedTraits()\":{\"returns\":{\"_0\":\"removedTraits - list of unavailable character traits\"}},\"initPoolSizes()\":{\"details\":\"Unable to init mapping at declaration :/\"},\"isApprovedForAll(address,address)\":{\"details\":\"See {IERC721-isApprovedForAll}.\"},\"isAvailableAndAllowedTrait(uint256,uint256)\":{\"details\":\"Trait types are restricted per tribe before deploy in AllowedColorsStorage\",\"params\":{\"trait\":\"Trait ID\",\"tribe\":\"Tribe ID\"},\"returns\":{\"_0\":\"True if trait is available and allowed for tribe\"}},\"isAvailableTrait(uint256)\":{\"params\":{\"trait\":\"ID of trait\"},\"returns\":{\"_0\":\"True if trait has not been removed\"}},\"isNameReserved(string)\":{\"params\":{\"nameString\":\"Name to validate\"},\"returns\":{\"_0\":\"True if name is unique\"}},\"isUnique(uint256)\":{\"params\":{\"traitCombo\":\"Generated trait combo packed into uint256\"},\"returns\":{\"_0\":\"True if combo is unique and available\"}},\"name()\":{\"details\":\"See {IERC721Metadata-name}.\"},\"overrideMintPrice(uint256)\":{\"details\":\"Minimum value of 0.08 ETH for this to be considered in getNFTPrice\",\"params\":{\"newPrice\":\"New price to set for remaining character sale\"}},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"ownerOf(uint256)\":{\"details\":\"See {IERC721-ownerOf}.\"},\"pauseMinting()\":{\"details\":\"Requirements: The contract must not be paused\"},\"paused()\":{\"details\":\"Returns true if the contract is paused, and false otherwise.\"},\"purchase(uint256[5],uint256[3],uint256[6],uint256[6],uint256[2])\":{\"details\":\"Order is based on character selector indexes\",\"params\":{\"accessories\":\"Indexed list of accessories\",\"character\":\"Indexed list of character traits\",\"clothing\":\"Indexed list of clothing options\",\"head\":\"Indexed list of head traits\",\"items\":\"Indexed list of items\"}},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner.\"},\"safeTransferFrom(address,address,uint256)\":{\"details\":\"See {IERC721-safeTransferFrom}.\"},\"safeTransferFrom(address,address,uint256,bytes)\":{\"details\":\"See {IERC721-safeTransferFrom}.\"},\"setApprovalForAll(address,bool)\":{\"details\":\"See {IERC721-setApprovalForAll}.\"},\"setBaseURI(string)\":{\"params\":{\"baseURI\":\"New base URI for NFT metadata\"}},\"supportsInterface(bytes4)\":{\"details\":\"See {IERC165-supportsInterface}.\"},\"symbol()\":{\"details\":\"See {IERC721Metadata-symbol}.\"},\"tokenURI(uint256)\":{\"details\":\"See {IERC721Metadata-tokenURI}.\"},\"transferFrom(address,address,uint256)\":{\"details\":\"See {IERC721-transferFrom}.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"},\"unpauseMinting()\":{\"details\":\"Requirements: The contract must be paused\"},\"validateName(string)\":{\"params\":{\"newName\":\"Name to validate\"},\"returns\":{\"_0\":\"True if name input is valid\"}}},\"stateVariables\":{\"_baseTokenUri\":{\"details\":\"Base URI used for token metadata\"},\"_manualMintPrice\":{\"details\":\"Set if we want to override semi-fomo ramp pricing\"},\"_originalPoolSizes\":{\"details\":\"Mapping trait indexes to pool size of available traits\"},\"_storageAddress\":{\"details\":\"Available traits storage address\"}},\"title\":\"NiftyDegen NFT (The OG NFTs of the Nifty League on Ethereum)\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"MAX_SUPPLY()\":{\"notice\":\"Max number of mintable characters\"},\"NAME_CHANGE_PRICE()\":{\"notice\":\"Cost to change character name in NFTL\"},\"SPECIAL_CHARACTERS()\":{\"notice\":\"Special characters reserved for future giveaways\"},\"changeName(uint256,string)\":{\"notice\":\"Change name of NFT payable with {NAME_CHANGE_PRICE} NFTL\"},\"constructor\":{\"notice\":\"Construct the Nifty League NFTs\"},\"getCharacterTraits(uint256)\":{\"notice\":\"Retrieve a list of character traits for a token\"},\"getNFTPrice()\":{\"notice\":\"Gets current NFT Price based on current supply\"},\"getName(uint256)\":{\"notice\":\"Retrieve name of token\"},\"getRemovedTraits()\":{\"notice\":\"Retrieve a list of removed character traits\"},\"initPoolSizes()\":{\"notice\":\"Set pool size for each trait index called on deploy\"},\"isAvailableAndAllowedTrait(uint256,uint256)\":{\"notice\":\"Check if traits is allowed for tribe and hasn't been removed yet\"},\"isAvailableTrait(uint256)\":{\"notice\":\"Check whether trait is still available\"},\"isNameReserved(string)\":{\"notice\":\"Check if name is already reserved\"},\"isUnique(uint256)\":{\"notice\":\"Check whether trait combo is unique\"},\"overrideMintPrice(uint256)\":{\"notice\":\"Fallback to set NFT price to static ether value if necessary\"},\"pauseMinting()\":{\"notice\":\"Triggers stopped state\"},\"purchase(uint256[5],uint256[3],uint256[6],uint256[6],uint256[2])\":{\"notice\":\"Validate character traits and purchase a Nifty Degen NFT\"},\"setBaseURI(string)\":{\"notice\":\"Option to set _baseUri for transfering Heroku to IPFS\"},\"totalSupply()\":{\"notice\":\"Counter for number of minted characters\"},\"unpauseMinting()\":{\"notice\":\"Returns to normal state\"},\"validateName(string)\":{\"notice\":\"Check for valid name string (Alphanumeric and spaces without leading or trailing space)\"},\"withdraw()\":{\"notice\":\"Withdraw ether from this contract (Callable by owner)\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"src/contracts/NiftyDegen.sol\":\"NiftyDegen\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby disabling any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0xba43b97fba0d32eb4254f6a5a297b39a19a247082a02d6e69349e071e2946218\",\"license\":\"MIT\"},\"@openzeppelin/contracts/security/Pausable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (security/Pausable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which allows children to implement an emergency stop\\n * mechanism that can be triggered by an authorized account.\\n *\\n * This module is used through inheritance. It will make available the\\n * modifiers `whenNotPaused` and `whenPaused`, which can be applied to\\n * the functions of your contract. Note that they will not be pausable by\\n * simply including this module, only once the modifiers are put in place.\\n */\\nabstract contract Pausable is Context {\\n    /**\\n     * @dev Emitted when the pause is triggered by `account`.\\n     */\\n    event Paused(address account);\\n\\n    /**\\n     * @dev Emitted when the pause is lifted by `account`.\\n     */\\n    event Unpaused(address account);\\n\\n    bool private _paused;\\n\\n    /**\\n     * @dev Initializes the contract in unpaused state.\\n     */\\n    constructor() {\\n        _paused = false;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is not paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    modifier whenNotPaused() {\\n        _requireNotPaused();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    modifier whenPaused() {\\n        _requirePaused();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns true if the contract is paused, and false otherwise.\\n     */\\n    function paused() public view virtual returns (bool) {\\n        return _paused;\\n    }\\n\\n    /**\\n     * @dev Throws if the contract is paused.\\n     */\\n    function _requireNotPaused() internal view virtual {\\n        require(!paused(), \\\"Pausable: paused\\\");\\n    }\\n\\n    /**\\n     * @dev Throws if the contract is not paused.\\n     */\\n    function _requirePaused() internal view virtual {\\n        require(paused(), \\\"Pausable: not paused\\\");\\n    }\\n\\n    /**\\n     * @dev Triggers stopped state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    function _pause() internal virtual whenNotPaused {\\n        _paused = true;\\n        emit Paused(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns to normal state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    function _unpause() internal virtual whenPaused {\\n        _paused = false;\\n        emit Unpaused(_msgSender());\\n    }\\n}\\n\",\"keccak256\":\"0x0849d93b16c9940beb286a7864ed02724b248b93e0d80ef6355af5ef15c64773\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 amount) external returns (bool);\\n}\\n\",\"keccak256\":\"0x287b55befed2961a7eabd7d7b1b2839cbca8a5b80ef8dcbb25ed3d4c2002c305\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/ERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC721/ERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC721.sol\\\";\\nimport \\\"./IERC721Receiver.sol\\\";\\nimport \\\"./extensions/IERC721Metadata.sol\\\";\\nimport \\\"../../utils/Address.sol\\\";\\nimport \\\"../../utils/Context.sol\\\";\\nimport \\\"../../utils/Strings.sol\\\";\\nimport \\\"../../utils/introspection/ERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of https://eips.ethereum.org/EIPS/eip-721[ERC721] Non-Fungible Token Standard, including\\n * the Metadata extension, but not including the Enumerable extension, which is available separately as\\n * {ERC721Enumerable}.\\n */\\ncontract ERC721 is Context, ERC165, IERC721, IERC721Metadata {\\n    using Address for address;\\n    using Strings for uint256;\\n\\n    // Token name\\n    string private _name;\\n\\n    // Token symbol\\n    string private _symbol;\\n\\n    // Mapping from token ID to owner address\\n    mapping(uint256 => address) private _owners;\\n\\n    // Mapping owner address to token count\\n    mapping(address => uint256) private _balances;\\n\\n    // Mapping from token ID to approved address\\n    mapping(uint256 => address) private _tokenApprovals;\\n\\n    // Mapping from owner to operator approvals\\n    mapping(address => mapping(address => bool)) private _operatorApprovals;\\n\\n    /**\\n     * @dev Initializes the contract by setting a `name` and a `symbol` to the token collection.\\n     */\\n    constructor(string memory name_, string memory symbol_) {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165, IERC165) returns (bool) {\\n        return\\n            interfaceId == type(IERC721).interfaceId ||\\n            interfaceId == type(IERC721Metadata).interfaceId ||\\n            super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-balanceOf}.\\n     */\\n    function balanceOf(address owner) public view virtual override returns (uint256) {\\n        require(owner != address(0), \\\"ERC721: address zero is not a valid owner\\\");\\n        return _balances[owner];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-ownerOf}.\\n     */\\n    function ownerOf(uint256 tokenId) public view virtual override returns (address) {\\n        address owner = _ownerOf(tokenId);\\n        require(owner != address(0), \\\"ERC721: invalid token ID\\\");\\n        return owner;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-name}.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-symbol}.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-tokenURI}.\\n     */\\n    function tokenURI(uint256 tokenId) public view virtual override returns (string memory) {\\n        _requireMinted(tokenId);\\n\\n        string memory baseURI = _baseURI();\\n        return bytes(baseURI).length > 0 ? string(abi.encodePacked(baseURI, tokenId.toString())) : \\\"\\\";\\n    }\\n\\n    /**\\n     * @dev Base URI for computing {tokenURI}. If set, the resulting URI for each\\n     * token will be the concatenation of the `baseURI` and the `tokenId`. Empty\\n     * by default, can be overridden in child contracts.\\n     */\\n    function _baseURI() internal view virtual returns (string memory) {\\n        return \\\"\\\";\\n    }\\n\\n    /**\\n     * @dev See {IERC721-approve}.\\n     */\\n    function approve(address to, uint256 tokenId) public virtual override {\\n        address owner = ERC721.ownerOf(tokenId);\\n        require(to != owner, \\\"ERC721: approval to current owner\\\");\\n\\n        require(\\n            _msgSender() == owner || isApprovedForAll(owner, _msgSender()),\\n            \\\"ERC721: approve caller is not token owner or approved for all\\\"\\n        );\\n\\n        _approve(to, tokenId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-getApproved}.\\n     */\\n    function getApproved(uint256 tokenId) public view virtual override returns (address) {\\n        _requireMinted(tokenId);\\n\\n        return _tokenApprovals[tokenId];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-setApprovalForAll}.\\n     */\\n    function setApprovalForAll(address operator, bool approved) public virtual override {\\n        _setApprovalForAll(_msgSender(), operator, approved);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-isApprovedForAll}.\\n     */\\n    function isApprovedForAll(address owner, address operator) public view virtual override returns (bool) {\\n        return _operatorApprovals[owner][operator];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-transferFrom}.\\n     */\\n    function transferFrom(address from, address to, uint256 tokenId) public virtual override {\\n        //solhint-disable-next-line max-line-length\\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \\\"ERC721: caller is not token owner or approved\\\");\\n\\n        _transfer(from, to, tokenId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(address from, address to, uint256 tokenId) public virtual override {\\n        safeTransferFrom(from, to, tokenId, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev See {IERC721-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(address from, address to, uint256 tokenId, bytes memory data) public virtual override {\\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \\\"ERC721: caller is not token owner or approved\\\");\\n        _safeTransfer(from, to, tokenId, data);\\n    }\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * `data` is additional data, it has no specified format and it is sent in call to `to`.\\n     *\\n     * This internal function is equivalent to {safeTransferFrom}, and can be used to e.g.\\n     * implement alternative mechanisms to perform token transfer, such as signature-based.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _safeTransfer(address from, address to, uint256 tokenId, bytes memory data) internal virtual {\\n        _transfer(from, to, tokenId);\\n        require(_checkOnERC721Received(from, to, tokenId, data), \\\"ERC721: transfer to non ERC721Receiver implementer\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId`. Does NOT revert if token doesn't exist\\n     */\\n    function _ownerOf(uint256 tokenId) internal view virtual returns (address) {\\n        return _owners[tokenId];\\n    }\\n\\n    /**\\n     * @dev Returns whether `tokenId` exists.\\n     *\\n     * Tokens can be managed by their owner or approved accounts via {approve} or {setApprovalForAll}.\\n     *\\n     * Tokens start existing when they are minted (`_mint`),\\n     * and stop existing when they are burned (`_burn`).\\n     */\\n    function _exists(uint256 tokenId) internal view virtual returns (bool) {\\n        return _ownerOf(tokenId) != address(0);\\n    }\\n\\n    /**\\n     * @dev Returns whether `spender` is allowed to manage `tokenId`.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function _isApprovedOrOwner(address spender, uint256 tokenId) internal view virtual returns (bool) {\\n        address owner = ERC721.ownerOf(tokenId);\\n        return (spender == owner || isApprovedForAll(owner, spender) || getApproved(tokenId) == spender);\\n    }\\n\\n    /**\\n     * @dev Safely mints `tokenId` and transfers it to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must not exist.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _safeMint(address to, uint256 tokenId) internal virtual {\\n        _safeMint(to, tokenId, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-ERC721-_safeMint-address-uint256-}[`_safeMint`], with an additional `data` parameter which is\\n     * forwarded in {IERC721Receiver-onERC721Received} to contract recipients.\\n     */\\n    function _safeMint(address to, uint256 tokenId, bytes memory data) internal virtual {\\n        _mint(to, tokenId);\\n        require(\\n            _checkOnERC721Received(address(0), to, tokenId, data),\\n            \\\"ERC721: transfer to non ERC721Receiver implementer\\\"\\n        );\\n    }\\n\\n    /**\\n     * @dev Mints `tokenId` and transfers it to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {_safeMint} whenever possible\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must not exist.\\n     * - `to` cannot be the zero address.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _mint(address to, uint256 tokenId) internal virtual {\\n        require(to != address(0), \\\"ERC721: mint to the zero address\\\");\\n        require(!_exists(tokenId), \\\"ERC721: token already minted\\\");\\n\\n        _beforeTokenTransfer(address(0), to, tokenId, 1);\\n\\n        // Check that tokenId was not minted by `_beforeTokenTransfer` hook\\n        require(!_exists(tokenId), \\\"ERC721: token already minted\\\");\\n\\n        unchecked {\\n            // Will not overflow unless all 2**256 token ids are minted to the same owner.\\n            // Given that tokens are minted one by one, it is impossible in practice that\\n            // this ever happens. Might change if we allow batch minting.\\n            // The ERC fails to describe this case.\\n            _balances[to] += 1;\\n        }\\n\\n        _owners[tokenId] = to;\\n\\n        emit Transfer(address(0), to, tokenId);\\n\\n        _afterTokenTransfer(address(0), to, tokenId, 1);\\n    }\\n\\n    /**\\n     * @dev Destroys `tokenId`.\\n     * The approval is cleared when the token is burned.\\n     * This is an internal function that does not check if the sender is authorized to operate on the token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _burn(uint256 tokenId) internal virtual {\\n        address owner = ERC721.ownerOf(tokenId);\\n\\n        _beforeTokenTransfer(owner, address(0), tokenId, 1);\\n\\n        // Update ownership in case tokenId was transferred by `_beforeTokenTransfer` hook\\n        owner = ERC721.ownerOf(tokenId);\\n\\n        // Clear approvals\\n        delete _tokenApprovals[tokenId];\\n\\n        unchecked {\\n            // Cannot overflow, as that would require more tokens to be burned/transferred\\n            // out than the owner initially received through minting and transferring in.\\n            _balances[owner] -= 1;\\n        }\\n        delete _owners[tokenId];\\n\\n        emit Transfer(owner, address(0), tokenId);\\n\\n        _afterTokenTransfer(owner, address(0), tokenId, 1);\\n    }\\n\\n    /**\\n     * @dev Transfers `tokenId` from `from` to `to`.\\n     *  As opposed to {transferFrom}, this imposes no restrictions on msg.sender.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _transfer(address from, address to, uint256 tokenId) internal virtual {\\n        require(ERC721.ownerOf(tokenId) == from, \\\"ERC721: transfer from incorrect owner\\\");\\n        require(to != address(0), \\\"ERC721: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(from, to, tokenId, 1);\\n\\n        // Check that tokenId was not transferred by `_beforeTokenTransfer` hook\\n        require(ERC721.ownerOf(tokenId) == from, \\\"ERC721: transfer from incorrect owner\\\");\\n\\n        // Clear approvals from the previous owner\\n        delete _tokenApprovals[tokenId];\\n\\n        unchecked {\\n            // `_balances[from]` cannot overflow for the same reason as described in `_burn`:\\n            // `from`'s balance is the number of token held, which is at least one before the current\\n            // transfer.\\n            // `_balances[to]` could overflow in the conditions described in `_mint`. That would require\\n            // all 2**256 token ids to be minted, which in practice is impossible.\\n            _balances[from] -= 1;\\n            _balances[to] += 1;\\n        }\\n        _owners[tokenId] = to;\\n\\n        emit Transfer(from, to, tokenId);\\n\\n        _afterTokenTransfer(from, to, tokenId, 1);\\n    }\\n\\n    /**\\n     * @dev Approve `to` to operate on `tokenId`\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function _approve(address to, uint256 tokenId) internal virtual {\\n        _tokenApprovals[tokenId] = to;\\n        emit Approval(ERC721.ownerOf(tokenId), to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Approve `operator` to operate on all of `owner` tokens\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function _setApprovalForAll(address owner, address operator, bool approved) internal virtual {\\n        require(owner != operator, \\\"ERC721: approve to caller\\\");\\n        _operatorApprovals[owner][operator] = approved;\\n        emit ApprovalForAll(owner, operator, approved);\\n    }\\n\\n    /**\\n     * @dev Reverts if the `tokenId` has not been minted yet.\\n     */\\n    function _requireMinted(uint256 tokenId) internal view virtual {\\n        require(_exists(tokenId), \\\"ERC721: invalid token ID\\\");\\n    }\\n\\n    /**\\n     * @dev Internal function to invoke {IERC721Receiver-onERC721Received} on a target address.\\n     * The call is not executed if the target address is not a contract.\\n     *\\n     * @param from address representing the previous owner of the given token ID\\n     * @param to target address that will receive the tokens\\n     * @param tokenId uint256 ID of the token to be transferred\\n     * @param data bytes optional data to send along with the call\\n     * @return bool whether the call correctly returned the expected magic value\\n     */\\n    function _checkOnERC721Received(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory data\\n    ) private returns (bool) {\\n        if (to.isContract()) {\\n            try IERC721Receiver(to).onERC721Received(_msgSender(), from, tokenId, data) returns (bytes4 retval) {\\n                return retval == IERC721Receiver.onERC721Received.selector;\\n            } catch (bytes memory reason) {\\n                if (reason.length == 0) {\\n                    revert(\\\"ERC721: transfer to non ERC721Receiver implementer\\\");\\n                } else {\\n                    /// @solidity memory-safe-assembly\\n                    assembly {\\n                        revert(add(32, reason), mload(reason))\\n                    }\\n                }\\n            }\\n        } else {\\n            return true;\\n        }\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any token transfer. This includes minting and burning. If {ERC721Consecutive} is\\n     * used, the hook may be called as part of a consecutive (batch) mint, as indicated by `batchSize` greater than 1.\\n     *\\n     * Calling conditions:\\n     *\\n     * - When `from` and `to` are both non-zero, ``from``'s tokens will be transferred to `to`.\\n     * - When `from` is zero, the tokens will be minted for `to`.\\n     * - When `to` is zero, ``from``'s tokens will be burned.\\n     * - `from` and `to` are never both zero.\\n     * - `batchSize` is non-zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(address from, address to, uint256 firstTokenId, uint256 batchSize) internal virtual {}\\n\\n    /**\\n     * @dev Hook that is called after any token transfer. This includes minting and burning. If {ERC721Consecutive} is\\n     * used, the hook may be called as part of a consecutive (batch) mint, as indicated by `batchSize` greater than 1.\\n     *\\n     * Calling conditions:\\n     *\\n     * - When `from` and `to` are both non-zero, ``from``'s tokens were transferred to `to`.\\n     * - When `from` is zero, the tokens were minted for `to`.\\n     * - When `to` is zero, ``from``'s tokens were burned.\\n     * - `from` and `to` are never both zero.\\n     * - `batchSize` is non-zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _afterTokenTransfer(address from, address to, uint256 firstTokenId, uint256 batchSize) internal virtual {}\\n\\n    /**\\n     * @dev Unsafe write access to the balances, used by extensions that \\\"mint\\\" tokens using an {ownerOf} override.\\n     *\\n     * WARNING: Anyone calling this MUST ensure that the balances remain consistent with the ownership. The invariant\\n     * being that for any address `a` the value returned by `balanceOf(a)` must be equal to the number of tokens such\\n     * that `ownerOf(tokenId)` is `a`.\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function __unsafe_increaseBalance(address account, uint256 amount) internal {\\n        _balances[account] += amount;\\n    }\\n}\\n\",\"keccak256\":\"0x2c309e7df9e05e6ce15bedfe74f3c61b467fc37e0fae9eab496acf5ea0bbd7ff\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/IERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC721/IERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721 is IERC165 {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(address from, address to, uint256 tokenId, bytes calldata data) external;\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must have been allowed to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(address from, address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Note that the caller is responsible to confirm that the recipient is capable of receiving ERC721\\n     * or else they may be permanently lost. Usage of {safeTransferFrom} prevents loss, though the caller must\\n     * understand this adds an external call which potentially creates a reentrancy vulnerability.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool approved) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x5bce51e11f7d194b79ea59fe00c9e8de9fa2c5530124960f29a24d4c740a3266\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC721/IERC721Receiver.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title ERC721 token receiver interface\\n * @dev Interface for any contract that wants to support safeTransfers\\n * from ERC721 asset contracts.\\n */\\ninterface IERC721Receiver {\\n    /**\\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\\n     * by `operator` from `from`, this function is called.\\n     *\\n     * It must return its Solidity selector to confirm the token transfer.\\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.\\n     *\\n     * The selector can be obtained in Solidity with `IERC721Receiver.onERC721Received.selector`.\\n     */\\n    function onERC721Received(\\n        address operator,\\n        address from,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n}\\n\",\"keccak256\":\"0xa82b58eca1ee256be466e536706850163d2ec7821945abd6b4778cfb3bee37da\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/extensions/IERC721Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC721.sol\\\";\\n\\n/**\\n * @title ERC-721 Non-Fungible Token Standard, optional metadata extension\\n * @dev See https://eips.ethereum.org/EIPS/eip-721\\n */\\ninterface IERC721Metadata is IERC721 {\\n    /**\\n     * @dev Returns the token collection name.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the token collection symbol.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the Uniform Resource Identifier (URI) for `tokenId` token.\\n     */\\n    function tokenURI(uint256 tokenId) external view returns (string memory);\\n}\\n\",\"keccak256\":\"0x75b829ff2f26c14355d1cba20e16fe7b29ca58eb5fef665ede48bc0f9c6c74b9\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     *\\n     * Furthermore, `isContract` will also return true if the target contract within\\n     * the same transaction is already scheduled for destruction by `SELFDESTRUCT`,\\n     * which only has an effect at the end of a transaction.\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.8.0/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x006dd67219697fe68d7fbfdea512e7c4cb64a43565ed86171d67e844982da6fa\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.4) (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    function _contextSuffixLength() internal view virtual returns (uint256) {\\n        return 0;\\n    }\\n}\\n\",\"keccak256\":\"0xa92e4fa126feb6907daa0513ddd816b2eb91f30a808de54f63c17d0e162c3439\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Counters.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Counters.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title Counters\\n * @author Matt Condon (@shrugs)\\n * @dev Provides counters that can only be incremented, decremented or reset. This can be used e.g. to track the number\\n * of elements in a mapping, issuing ERC721 ids, or counting request ids.\\n *\\n * Include with `using Counters for Counters.Counter;`\\n */\\nlibrary Counters {\\n    struct Counter {\\n        // This variable should never be directly accessed by users of the library: interactions must be restricted to\\n        // the library's function. As of Solidity v0.5.2, this cannot be enforced, though there is a proposal to add\\n        // this feature: see https://github.com/ethereum/solidity/issues/4637\\n        uint256 _value; // default: 0\\n    }\\n\\n    function current(Counter storage counter) internal view returns (uint256) {\\n        return counter._value;\\n    }\\n\\n    function increment(Counter storage counter) internal {\\n        unchecked {\\n            counter._value += 1;\\n        }\\n    }\\n\\n    function decrement(Counter storage counter) internal {\\n        uint256 value = counter._value;\\n        require(value > 0, \\\"Counter: decrement overflow\\\");\\n        unchecked {\\n            counter._value = value - 1;\\n        }\\n    }\\n\\n    function reset(Counter storage counter) internal {\\n        counter._value = 0;\\n    }\\n}\\n\",\"keccak256\":\"0xf0018c2440fbe238dd3a8732fa8e17a0f9dce84d31451dc8a32f6d62b349c9f1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Strings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./math/Math.sol\\\";\\nimport \\\"./math/SignedMath.sol\\\";\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _SYMBOLS = \\\"0123456789abcdef\\\";\\n    uint8 private constant _ADDRESS_LENGTH = 20;\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            uint256 length = Math.log10(value) + 1;\\n            string memory buffer = new string(length);\\n            uint256 ptr;\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                ptr := add(buffer, add(32, length))\\n            }\\n            while (true) {\\n                ptr--;\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    mstore8(ptr, byte(mod(value, 10), _SYMBOLS))\\n                }\\n                value /= 10;\\n                if (value == 0) break;\\n            }\\n            return buffer;\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `int256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(int256 value) internal pure returns (string memory) {\\n        return string(abi.encodePacked(value < 0 ? \\\"-\\\" : \\\"\\\", toString(SignedMath.abs(value))));\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            return toHexString(value, Math.log256(value) + 1);\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(address addr) internal pure returns (string memory) {\\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\\n    }\\n\\n    /**\\n     * @dev Returns true if the two strings are equal.\\n     */\\n    function equal(string memory a, string memory b) internal pure returns (bool) {\\n        return keccak256(bytes(a)) == keccak256(bytes(b));\\n    }\\n}\\n\",\"keccak256\":\"0x3088eb2868e8d13d89d16670b5f8612c4ab9ff8956272837d8e90106c59c14a0\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/ERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165 is IERC165 {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\",\"keccak256\":\"0xd10975de010d89fd1c78dc5e8a9a7e7f496198085c151648f20cba166b32582b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x447a5f3ddc18419d41ff92b3773fb86471b1db25773e07f877f548918a185bf1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/Math.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/math/Math.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary Math {\\n    enum Rounding {\\n        Down, // Toward negative infinity\\n        Up, // Toward infinity\\n        Zero // Toward zero\\n    }\\n\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow.\\n        return (a & b) + (a ^ b) / 2;\\n    }\\n\\n    /**\\n     * @dev Returns the ceiling of the division of two numbers.\\n     *\\n     * This differs from standard division with `/` in that it rounds up instead\\n     * of rounding down.\\n     */\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b - 1) / b can overflow on addition, so we distribute.\\n        return a == 0 ? 0 : (a - 1) / b + 1;\\n    }\\n\\n    /**\\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv)\\n     * with further edits by Uniswap Labs also under MIT license.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator) internal pure returns (uint256 result) {\\n        unchecked {\\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\\n            // variables such that product = prod1 * 2^256 + prod0.\\n            uint256 prod0; // Least significant 256 bits of the product\\n            uint256 prod1; // Most significant 256 bits of the product\\n            assembly {\\n                let mm := mulmod(x, y, not(0))\\n                prod0 := mul(x, y)\\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n            }\\n\\n            // Handle non-overflow cases, 256 by 256 division.\\n            if (prod1 == 0) {\\n                // Solidity will revert if denominator == 0, unlike the div opcode on its own.\\n                // The surrounding unchecked block does not change this fact.\\n                // See https://docs.soliditylang.org/en/latest/control-structures.html#checked-or-unchecked-arithmetic.\\n                return prod0 / denominator;\\n            }\\n\\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\\n            require(denominator > prod1, \\\"Math: mulDiv overflow\\\");\\n\\n            ///////////////////////////////////////////////\\n            // 512 by 256 division.\\n            ///////////////////////////////////////////////\\n\\n            // Make division exact by subtracting the remainder from [prod1 prod0].\\n            uint256 remainder;\\n            assembly {\\n                // Compute remainder using mulmod.\\n                remainder := mulmod(x, y, denominator)\\n\\n                // Subtract 256 bit number from 512 bit number.\\n                prod1 := sub(prod1, gt(remainder, prod0))\\n                prod0 := sub(prod0, remainder)\\n            }\\n\\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator. Always >= 1.\\n            // See https://cs.stackexchange.com/q/138556/92363.\\n\\n            // Does not overflow because the denominator cannot be zero at this stage in the function.\\n            uint256 twos = denominator & (~denominator + 1);\\n            assembly {\\n                // Divide denominator by twos.\\n                denominator := div(denominator, twos)\\n\\n                // Divide [prod1 prod0] by twos.\\n                prod0 := div(prod0, twos)\\n\\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\\n                twos := add(div(sub(0, twos), twos), 1)\\n            }\\n\\n            // Shift in bits from prod1 into prod0.\\n            prod0 |= prod1 * twos;\\n\\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\\n            // four bits. That is, denominator * inv = 1 mod 2^4.\\n            uint256 inverse = (3 * denominator) ^ 2;\\n\\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also works\\n            // in modular arithmetic, doubling the correct bits in each step.\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\\n\\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\\n            // is no longer required.\\n            result = prod0 * inverse;\\n            return result;\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator, Rounding rounding) internal pure returns (uint256) {\\n        uint256 result = mulDiv(x, y, denominator);\\n        if (rounding == Rounding.Up && mulmod(x, y, denominator) > 0) {\\n            result += 1;\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded down.\\n     *\\n     * Inspired by Henry S. Warren, Jr.'s \\\"Hacker's Delight\\\" (Chapter 11).\\n     */\\n    function sqrt(uint256 a) internal pure returns (uint256) {\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\\n        //\\n        // We know that the \\\"msb\\\" (most significant bit) of our target number `a` is a power of 2 such that we have\\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\\n        //\\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\\n        // \\u2192 `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\\n        // \\u2192 `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\\n        //\\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\\n        uint256 result = 1 << (log2(a) >> 1);\\n\\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\\n        // into the expected uint128 result.\\n        unchecked {\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            return min(result, a / result);\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates sqrt(a), following the selected rounding direction.\\n     */\\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = sqrt(a);\\n            return result + (rounding == Rounding.Up && result * result < a ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 128;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 64;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 32;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 16;\\n            }\\n            if (value >> 8 > 0) {\\n                value >>= 8;\\n                result += 8;\\n            }\\n            if (value >> 4 > 0) {\\n                value >>= 4;\\n                result += 4;\\n            }\\n            if (value >> 2 > 0) {\\n                value >>= 2;\\n                result += 2;\\n            }\\n            if (value >> 1 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log2(value);\\n            return result + (rounding == Rounding.Up && 1 << result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >= 10 ** 64) {\\n                value /= 10 ** 64;\\n                result += 64;\\n            }\\n            if (value >= 10 ** 32) {\\n                value /= 10 ** 32;\\n                result += 32;\\n            }\\n            if (value >= 10 ** 16) {\\n                value /= 10 ** 16;\\n                result += 16;\\n            }\\n            if (value >= 10 ** 8) {\\n                value /= 10 ** 8;\\n                result += 8;\\n            }\\n            if (value >= 10 ** 4) {\\n                value /= 10 ** 4;\\n                result += 4;\\n            }\\n            if (value >= 10 ** 2) {\\n                value /= 10 ** 2;\\n                result += 2;\\n            }\\n            if (value >= 10 ** 1) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log10(value);\\n            return result + (rounding == Rounding.Up && 10 ** result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     *\\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\\n     */\\n    function log256(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 16;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 8;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 4;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 2;\\n            }\\n            if (value >> 8 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log256(value);\\n            return result + (rounding == Rounding.Up && 1 << (result << 3) < value ? 1 : 0);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xe4455ac1eb7fc497bb7402579e7b4d64d928b846fce7d2b6fde06d366f21c2b3\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/SignedMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/math/SignedMath.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard signed math utilities missing in the Solidity language.\\n */\\nlibrary SignedMath {\\n    /**\\n     * @dev Returns the largest of two signed numbers.\\n     */\\n    function max(int256 a, int256 b) internal pure returns (int256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two signed numbers.\\n     */\\n    function min(int256 a, int256 b) internal pure returns (int256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two signed numbers without overflow.\\n     * The result is rounded towards zero.\\n     */\\n    function average(int256 a, int256 b) internal pure returns (int256) {\\n        // Formula from the book \\\"Hacker's Delight\\\"\\n        int256 x = (a & b) + ((a ^ b) >> 1);\\n        return x + (int256(uint256(x) >> 255) & (a ^ b));\\n    }\\n\\n    /**\\n     * @dev Returns the absolute unsigned value of a signed value.\\n     */\\n    function abs(int256 n) internal pure returns (uint256) {\\n        unchecked {\\n            // must be unchecked in order to support `n = type(int256).min`\\n            return uint256(n >= 0 ? n : -n);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xf92515413956f529d95977adc9b0567d583c6203fc31ab1c23824c35187e3ddc\",\"license\":\"MIT\"},\"src/contracts/AllowedColorsStorage.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.11;\\n\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\n\\n/**\\n * @title AllowedColorsStorage\\n * @dev Color indexes need to be restricted per tribe prior to NFT deploy\\n */\\ncontract AllowedColorsStorage is Ownable {\\n    /// @dev Mapping if color is allowed for selected tribe\\n    mapping(uint256 => mapping(uint256 => bool)) private _tribeColorAllowed;\\n\\n    constructor() {}\\n\\n    /**\\n     * @notice Set allowed on a given a list of colors\\n     * @param tribe Tribe ID 1-10\\n     * @param colors List of colors to set for tribe\\n     * @param allowed Bool if the color list should be made allowed or not\\n     */\\n    function setAllowedColorsOnTribe(uint256 tribe, uint256[] memory colors, bool allowed) external onlyOwner {\\n        require(tribe > 0 && tribe < 10, \\\"Invalid tribe provided\\\");\\n        for (uint256 i = 0; i < colors.length; i++) {\\n            _toggleColorAllowed(tribe, colors[i], allowed);\\n        }\\n    }\\n\\n    /**\\n     * @notice Toggle color allowed on and off for a tribe\\n     * @param tribe Tribe ID\\n     * @param color Trait ID\\n     * @param allowed Bool if the color should be made allowed or not\\n     * @dev Defaults to false if never set\\n     */\\n    function _toggleColorAllowed(uint256 tribe, uint256 color, bool allowed) private {\\n        _tribeColorAllowed[tribe][color] = allowed;\\n    }\\n\\n    /**\\n     * @notice Check if color is allowed for a tribe\\n     * @param tribe Tribe ID\\n     * @param color Trait ID\\n     * @return True if color is allowed for tribe\\n     */\\n    function isAllowedColor(uint256 tribe, uint256 color) public view returns (bool) {\\n        return _tribeColorAllowed[tribe][color];\\n    }\\n}\\n\",\"keccak256\":\"0xdf219b19e354b51e1bfef331917213b43e4d28d1aeb224f4353db68692ab6788\",\"license\":\"MIT\"},\"src/contracts/NameableCharacter.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.11;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"./NiftyLeagueCharacter.sol\\\";\\n\\ninterface INFTL is IERC20 {\\n    function burnFrom(address account, uint256 amount) external;\\n}\\n\\n/**\\n * @title NameableCharacter (Extendable to allow name changes on NFTs)\\n * @dev Extends NiftyLeagueCharacter (ERC721)\\n */\\nabstract contract NameableCharacter is NiftyLeagueCharacter {\\n    /// @notice Cost to change character name in NFTL\\n    uint256 public constant NAME_CHANGE_PRICE = 1000e18; // 1000 NFTL\\n\\n    /// @dev Mapping if name string is already used\\n    mapping(string => bool) private _nameReserved;\\n\\n    event NameUpdated(uint256 indexed tokenId, string previousName, string newName);\\n\\n    // External functions\\n\\n    /**\\n     * @notice Retrieve name of token\\n     * @param tokenId ID of NFT\\n     * @return NFT name\\n     */\\n    function getName(uint256 tokenId) external view returns (string memory) {\\n        require(_exists(tokenId), \\\"nonexistent token\\\");\\n        return _characters[tokenId].name;\\n    }\\n\\n    /**\\n     * @notice Change name of NFT payable with {NAME_CHANGE_PRICE} NFTL\\n     * @param tokenId ID of NFT\\n     * @param newName New name to validate and set on NFT\\n     * @return New NFT name\\n     */\\n    function changeName(uint256 tokenId, string memory newName) external returns (string memory) {\\n        require(_exists(tokenId), \\\"nonexistent token\\\");\\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \\\"Caller is not owner nor approved\\\");\\n        string memory prevName = _characters[tokenId].name;\\n        require(sha256(bytes(newName)) != sha256(bytes(prevName)), \\\"New name and old name are equal\\\");\\n        require(validateName(newName), \\\"Name is not allowed\\\");\\n        require(!isNameReserved(newName), \\\"Name already reserved\\\");\\n\\n        INFTL(_nftlAddress).burnFrom(_msgSender(), NAME_CHANGE_PRICE);\\n        if (bytes(_characters[tokenId].name).length > 0) {\\n            _toggleReserveName(_characters[tokenId].name, false);\\n        }\\n        _toggleReserveName(newName, true);\\n        _characters[tokenId].name = newName;\\n        emit NameUpdated(tokenId, prevName, newName);\\n        return newName;\\n    }\\n\\n    // Public functions\\n\\n    /**\\n     * @notice Check if name is already reserved\\n     * @param nameString Name to validate\\n     * @return True if name is unique\\n     */\\n    function isNameReserved(string memory nameString) public view returns (bool) {\\n        return _nameReserved[_toLower(nameString)];\\n    }\\n\\n    /**\\n     * @notice Check for valid name string (Alphanumeric and spaces without leading or trailing space)\\n     * @param newName Name to validate\\n     * @return True if name input is valid\\n     */\\n    function validateName(string memory newName) public pure returns (bool) {\\n        bytes memory byteName = bytes(newName);\\n        if (byteName.length < 1 || byteName.length > 32) return false; // name cannot be longer than 32 characters\\n        if (byteName[0] == 0x20 || byteName[byteName.length - 1] == 0x20) return false; // reject leading and trailing space\\n\\n        bytes1 lastChar = byteName[0];\\n        for (uint256 i; i < byteName.length; i++) {\\n            bytes1 currentChar = byteName[i];\\n            if (currentChar == 0x20 && lastChar == 0x20) return false; // reject double spaces\\n            if (\\n                !(currentChar >= 0x30 && currentChar <= 0x39) && //0-9\\n                !(currentChar >= 0x41 && currentChar <= 0x5A) && //A-Z\\n                !(currentChar >= 0x61 && currentChar <= 0x7A) && //a-z\\n                !(currentChar == 0x20) //space\\n            ) return false;\\n            lastChar = currentChar;\\n        }\\n        return true;\\n    }\\n\\n    // Private functions\\n\\n    /**\\n     * @notice Reserves the name if isReserve is set to true, de-reserves if set to false\\n     * @param str NFT name string\\n     * @param isReserved Bool if name should be reserved or not\\n     */\\n    function _toggleReserveName(string memory str, bool isReserved) private {\\n        _nameReserved[_toLower(str)] = isReserved;\\n    }\\n\\n    /**\\n     * @notice Converts strings to lowercase\\n     * @param str Any string\\n     * @return String to lower case\\n     */\\n    function _toLower(string memory str) private pure returns (string memory) {\\n        bytes memory bStr = bytes(str);\\n        bytes memory bLower = new bytes(bStr.length);\\n        for (uint256 i = 0; i < bStr.length; i++) {\\n            if ((uint8(bStr[i]) >= 65) && (uint8(bStr[i]) <= 90)) {\\n                bLower[i] = bytes1(uint8(bStr[i]) + 32);\\n            } else {\\n                bLower[i] = bStr[i];\\n            }\\n        }\\n        return string(bLower);\\n    }\\n}\\n\",\"keccak256\":\"0x1b1a4a8614ff281a433367f598d9c642e84e0d722a34bcace94594aacac5ca8e\",\"license\":\"MIT\"},\"src/contracts/NiftyDegen.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.11;\\n\\nimport \\\"@openzeppelin/contracts/utils/Counters.sol\\\";\\nimport \\\"./NameableCharacter.sol\\\";\\nimport \\\"./AllowedColorsStorage.sol\\\";\\n\\n/**\\n * @title NiftyDegen NFT (The OG NFTs of the Nifty League on Ethereum)\\n * @dev Extends NameableCharacter and NiftyLeagueCharacter (ERC721)\\n */\\ncontract NiftyDegen is NameableCharacter {\\n    using Counters for Counters.Counter;\\n\\n    /// @notice Counter for number of minted characters\\n    Counters.Counter public totalSupply;\\n\\n    /// @notice Max number of mintable characters\\n    uint256 public constant MAX_SUPPLY = 10000;\\n\\n    /// @notice Special characters reserved for future giveaways\\n    uint256 public constant SPECIAL_CHARACTERS = 100;\\n\\n    /// @dev Available traits storage address\\n    address internal immutable _storageAddress;\\n\\n    /// @dev Mapping trait indexes to pool size of available traits\\n    mapping(uint256 => uint256) internal _originalPoolSizes;\\n\\n    /// @dev Set if we want to override semi-fomo ramp pricing\\n    uint256 private _manualMintPrice;\\n\\n    /// @dev Base URI used for token metadata\\n    string private _baseTokenUri = \\\"\\\";\\n\\n    /**\\n     * @notice Construct the Nifty League NFTs\\n     * @param nftlAddress Address of verified Nifty League NFTL contract\\n     * @param storageAddress Address of verified Allowed Colors Storage\\n     */\\n    constructor(address nftlAddress, address storageAddress) NiftyLeagueCharacter(nftlAddress, \\\"NiftyDegen\\\", \\\"DEGEN\\\") {\\n        _storageAddress = storageAddress;\\n    }\\n\\n    // External functions\\n\\n    /**\\n     * @notice Validate character traits and purchase a Nifty Degen NFT\\n     * @param character Indexed list of character traits\\n     * @param head Indexed list of head traits\\n     * @param clothing Indexed list of clothing options\\n     * @param accessories Indexed list of accessories\\n     * @param items Indexed list of items\\n     * @dev Order is based on character selector indexes\\n     */\\n    function purchase(\\n        uint256[5] memory character,\\n        uint256[3] memory head,\\n        uint256[6] memory clothing,\\n        uint256[6] memory accessories,\\n        uint256[2] memory items\\n    ) external payable whenNotPaused {\\n        uint256 currentSupply = totalSupply.current();\\n        require(currentSupply >= 3 || _msgSender() == owner(), \\\"Sale has not started\\\");\\n        require(msg.value == getNFTPrice(), \\\"Ether value incorrect\\\");\\n        _validateTraits(character, head, clothing, accessories, items);\\n        uint256 traitCombo = _generateTraitCombo(character, head, clothing, accessories, items);\\n        _storeNewCharacter(traitCombo);\\n    }\\n\\n    /**\\n     * @notice Set pool size for each trait index called on deploy\\n     * @dev Unable to init mapping at declaration :/\\n     */\\n    function initPoolSizes() external onlyOwner {\\n        _originalPoolSizes[5] = 113;\\n        _originalPoolSizes[6] = 14;\\n        _originalPoolSizes[7] = 63;\\n        _originalPoolSizes[8] = 99;\\n        _originalPoolSizes[9] = 76;\\n        _originalPoolSizes[10] = 41;\\n        _originalPoolSizes[11] = 101;\\n        _originalPoolSizes[12] = 37;\\n        _originalPoolSizes[13] = 12;\\n        _originalPoolSizes[14] = 43;\\n        _originalPoolSizes[15] = 50;\\n        _originalPoolSizes[16] = 10;\\n        _originalPoolSizes[17] = 12;\\n        _originalPoolSizes[18] = 25;\\n        _originalPoolSizes[19] = 37;\\n        _originalPoolSizes[20] = 92;\\n        _originalPoolSizes[21] = 48;\\n    }\\n\\n    /**\\n     * @notice Fallback to set NFT price to static ether value if necessary\\n     * @param newPrice New price to set for remaining character sale\\n     * @dev Minimum value of 0.08 ETH for this to be considered in getNFTPrice\\n     */\\n    function overrideMintPrice(uint256 newPrice) external onlyOwner {\\n        _manualMintPrice = newPrice;\\n    }\\n\\n    /**\\n     * @notice Option to set _baseUri for transfering Heroku to IPFS\\n     * @param baseURI New base URI for NFT metadata\\n     */\\n    function setBaseURI(string memory baseURI) public onlyOwner {\\n        _baseTokenUri = baseURI;\\n    }\\n\\n    // Public functions\\n\\n    /**\\n     * @notice Gets current NFT Price based on current supply\\n     * @return Current price to mint 1 NFT\\n     */\\n    function getNFTPrice() public view returns (uint256) {\\n        uint256 currentSupply = totalSupply.current();\\n        require(\\n            currentSupply < MAX_SUPPLY - SPECIAL_CHARACTERS || (_msgSender() == owner() && currentSupply < MAX_SUPPLY),\\n            \\\"Sale has already ended\\\"\\n        );\\n        // 1 - 3 free for core team members, 9901 - 10000 free special community giveaway characters\\n        if (_msgSender() == owner()) return 0;\\n        // fallback option to override price floors only if necessary. Minimum value of 0.08 ETH\\n        if (_manualMintPrice >= 80000000000000000) return _manualMintPrice;\\n        if (currentSupply >= 9500) return 280000000000000000; // 9500 - 9900 0.28 ETH\\n        if (currentSupply >= 8500) return 250000000000000000; // 8501 - 9500 0.25 ETH\\n        if (currentSupply >= 6500) return 220000000000000000; // 6501 - 8500 0.22 ETH\\n        if (currentSupply >= 4500) return 190000000000000000; // 4501 - 6500 0.18 ETH\\n        if (currentSupply >= 2500) return 160000000000000000; // 2501 - 4500 0.15 ETH\\n        if (currentSupply >= 1000) return 130000000000000000; // 1001 - 2500 0.13 ETH\\n        return 100000000000000000; // 4 - 1000 0.1 ETH\\n    }\\n\\n    /**\\n     * @notice Check if traits is allowed for tribe and hasn't been removed yet\\n     * @param tribe Tribe ID\\n     * @param trait Trait ID\\n     * @dev Trait types are restricted per tribe before deploy in AllowedColorsStorage\\n     * @return True if trait is available and allowed for tribe\\n     */\\n    function isAvailableAndAllowedTrait(uint256 tribe, uint256 trait) public view returns (bool) {\\n        if (trait == EMPTY_TRAIT) return true;\\n        if (trait >= 150) return isAvailableTrait(trait);\\n        AllowedColorsStorage colorsStorage = AllowedColorsStorage(_storageAddress);\\n        return colorsStorage.isAllowedColor(tribe, trait);\\n    }\\n\\n    // Internal functions\\n\\n    /**\\n     * @notice Base URI for computing {tokenURI}. Overrides ERC721 default\\n     * @return Base token URI linked to IPFS metadata\\n     */\\n    function _baseURI() internal view virtual override returns (string memory) {\\n        return _baseTokenUri;\\n    }\\n\\n    // Private functions\\n\\n    /**\\n     * @notice Validate character traits\\n     * @param char Indexed list of character traits\\n     * @param head Indexed list of head traits\\n     * @param cloth Indexed list of clothing options\\n     * @param acc Indexed list of accessories\\n     * @param items Indexed list of items\\n     */\\n    function _validateTraits(\\n        uint256[5] memory char,\\n        uint256[3] memory head,\\n        uint256[6] memory cloth,\\n        uint256[6] memory acc,\\n        uint256[2] memory items\\n    ) private view {\\n        uint256 tribe = char[0];\\n        require(tribe > 0 && (tribe <= 6 || (tribe <= 9 && _msgSender() == owner())), \\\"Tribe incorrect\\\");\\n        require(_isTraitInRange(char[1], 10, 69) || _isTraitInRange(char[1], 119, 149), \\\"Skin color incorrect\\\");\\n        require(_isTraitInRange(char[2], 70, 100) || _isTraitInRange(char[2], 119, 149), \\\"Fur color incorrect\\\");\\n        require(_isTraitInRange(char[3], 101, 109) || _isTraitInRange(char[3], 119, 149), \\\"Eye color incorrect\\\");\\n        require(_isTraitInRange(char[4], 110, 118) || _isTraitInRange(char[4], 119, 149), \\\"Pupil color incorrect\\\");\\n        require(_isTraitInRange(head[0], 150, 262), \\\"Hair incorrect\\\");\\n        require(_isTraitInRange(head[1], 263, 276), \\\"Mouth incorrect\\\");\\n        require(_isTraitInRange(head[2], 277, 339), \\\"Beard incorrect\\\");\\n        require(_isTraitInRange(cloth[0], 340, 438), \\\"Top incorrect\\\");\\n        require(_isTraitInRange(cloth[1], 439, 514), \\\"Outerwear incorrect\\\");\\n        require(_isTraitInRange(cloth[2], 515, 555), \\\"Print incorrect\\\");\\n        require(_isTraitInRange(cloth[3], 556, 657), \\\"Bottom incorrect\\\");\\n        require(_isTraitInRange(cloth[4], 658, 694), \\\"Footwear incorrect\\\");\\n        require(_isTraitInRange(cloth[5], 695, 706), \\\"Belt incorrect\\\");\\n        require(_isTraitInRange(acc[0], 707, 749), \\\"Hat incorrect\\\");\\n        require(_isTraitInRange(acc[1], 750, 799), \\\"Eyewear incorrect\\\");\\n        require(_isTraitInRange(acc[2], 800, 809), \\\"Piercing incorrect\\\");\\n        require(_isTraitInRange(acc[3], 810, 821), \\\"Wrist accessory incorrect\\\");\\n        require(_isTraitInRange(acc[4], 822, 846), \\\"Hands accessory incorrect\\\");\\n        require(_isTraitInRange(acc[5], 847, 883), \\\"Neckwear incorrect\\\");\\n        require(_isTraitInRange(items[0], 884, 975), \\\"Left item incorrect\\\");\\n        require(_isTraitInRange(items[1], 976, 1023), \\\"Right item incorrect\\\");\\n\\n        require(isAvailableAndAllowedTrait(tribe, char[1]), \\\"Skin color unavailable\\\");\\n        require(isAvailableAndAllowedTrait(tribe, char[2]), \\\"Fur color unavailable\\\");\\n        require(isAvailableAndAllowedTrait(tribe, char[3]), \\\"Eye color unavailable\\\");\\n        require(isAvailableAndAllowedTrait(tribe, char[4]), \\\"Pupil color unavailable\\\");\\n        require(isAvailableAndAllowedTrait(tribe, head[0]), \\\"Hair unavailable\\\");\\n        require(isAvailableAndAllowedTrait(tribe, head[1]), \\\"Mouth unavailable\\\");\\n        require(isAvailableAndAllowedTrait(tribe, head[2]), \\\"Beard unavailable\\\");\\n        require(isAvailableAndAllowedTrait(tribe, cloth[0]), \\\"Top unavailable\\\");\\n        require(isAvailableAndAllowedTrait(tribe, cloth[1]), \\\"Outerwear unavailable\\\");\\n        require(isAvailableAndAllowedTrait(tribe, cloth[2]), \\\"Print unavailable\\\");\\n        require(isAvailableAndAllowedTrait(tribe, cloth[3]), \\\"Bottom unavailable\\\");\\n        require(isAvailableAndAllowedTrait(tribe, cloth[4]), \\\"Footwear unavailable\\\");\\n        require(isAvailableAndAllowedTrait(tribe, cloth[5]), \\\"Belt unavailable\\\");\\n        require(isAvailableAndAllowedTrait(tribe, acc[0]), \\\"Hat unavailable\\\");\\n        require(isAvailableAndAllowedTrait(tribe, acc[1]), \\\"Eyewear unavailable\\\");\\n        require(isAvailableAndAllowedTrait(tribe, acc[2]), \\\"Piercing unavailable\\\");\\n        require(isAvailableAndAllowedTrait(tribe, acc[3]), \\\"Wrist accessory unavailable\\\");\\n        require(isAvailableAndAllowedTrait(tribe, acc[4]), \\\"Hand accessory unavailable\\\");\\n        require(isAvailableAndAllowedTrait(tribe, acc[5]), \\\"Neckwear unavailable\\\");\\n        require(isAvailableAndAllowedTrait(tribe, items[0]), \\\"Left item unavailable\\\");\\n        require(isAvailableAndAllowedTrait(tribe, items[1]), \\\"Right item unavailable\\\");\\n    }\\n\\n    /**\\n     * @notice Mints NFT if unique and attempts to remove a random trait\\n     * @param traitCombo Trait combo provided from _generateTraitCombo\\n     */\\n    function _storeNewCharacter(uint256 traitCombo) private {\\n        require(isUnique(traitCombo), \\\"NFT trait combo already exists\\\");\\n        _existMap[traitCombo] = true;\\n        totalSupply.increment();\\n        uint256 newCharId = totalSupply.current();\\n        Character memory newChar;\\n        newChar.traits = traitCombo;\\n        _characters[newCharId] = newChar;\\n        // _removeRandomTrait(newCharId, traitCombo); // disabled for test networks\\n        _safeMint(_msgSender(), newCharId);\\n    }\\n\\n    /**\\n     * @notice Attempts to remove a random trait from availability\\n     * @param newCharId ID of newly generated NFT\\n     * @param traitCombo Trait combo provided from _generateTraitCombo\\n     * @dev Any trait id besides 0, tribe ids, or body/eye colors can be removed\\n     */\\n    function _removeRandomTrait(uint256 newCharId, uint256 traitCombo) private {\\n        uint256 numRemoved = removedTraits.length;\\n        if (\\n            (numRemoved < 100 && newCharId % 7 == 0) ||\\n            (numRemoved >= 100 && numRemoved < 200 && newCharId % 9 == 0) ||\\n            (numRemoved >= 200 && numRemoved < 300 && newCharId % 11 == 0) ||\\n            (numRemoved >= 300 && numRemoved < 400 && newCharId % 13 == 0)\\n        ) {\\n            uint256 randomIndex = _rngIndex(newCharId);\\n            uint16 randomTrait = _unpackUint10(traitCombo >> (randomIndex * 10));\\n            if (randomTrait != 0) {\\n                uint256 poolSize = _originalPoolSizes[randomIndex];\\n                bool skip = _rngSkip(poolSize);\\n                if (!skip) {\\n                    removedTraits.push(randomTrait);\\n                    _removedTraitsMap[randomTrait] = true;\\n                }\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @notice Simulate randomness for token index to attempt to remove excluding tribes and colors\\n     * @param tokenId ID of newly generated NFT\\n     * @dev Randomness can be anticipated and exploited but is not crucial to NFT sale\\n     * @return Number from 5-21\\n     */\\n    function _rngIndex(uint256 tokenId) private view returns (uint256) {\\n        uint256 randomHash = uint256(keccak256(abi.encodePacked(tokenId, block.timestamp, block.difficulty)));\\n        return (randomHash % 17) + 5;\\n    }\\n\\n    /**\\n     * @notice Simulate randomness to decide to skip removing trait based on pool size\\n     * @param poolSize Number of trait options for a specific trait type\\n     * @dev Randomness can be anticipated and exploited but is not crucial to NFT sale\\n     * @return True if should skip this trait removal\\n     */\\n    function _rngSkip(uint256 poolSize) private view returns (bool) {\\n        uint256 randomHash = uint256(keccak256(abi.encodePacked(poolSize, block.timestamp, block.difficulty)));\\n        int256 odds = 70 - int256(randomHash % 61);\\n        return odds < int256(500 / poolSize);\\n    }\\n\\n    /**\\n     * @notice Checks whether trait id is in range of lower/upper bounds\\n     * @param lower lower range-bound\\n     * @param upper upper range-bound\\n     * @return True if in range\\n     */\\n    function _isTraitInRange(uint256 trait, uint256 lower, uint256 upper) private pure returns (bool) {\\n        return trait == EMPTY_TRAIT || (trait >= lower && trait <= upper);\\n    }\\n}\\n\",\"keccak256\":\"0x391ecf955b42206e14b5ad438f587d9592e86ec80872474c540f83075b8ab9e5\",\"license\":\"MIT\"},\"src/contracts/NiftyLeagueCharacter.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.11;\\n\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"@openzeppelin/contracts/security/Pausable.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC721/ERC721.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/Counters.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/Strings.sol\\\";\\n\\n/**\\n * @title NiftyLeagueCharacter (Base NFT for Nifty League characters)\\n * @dev Extends standard ERC721 contract from OpenZeppelin\\n */\\ncontract NiftyLeagueCharacter is ERC721, Ownable, Pausable {\\n    using Strings for string;\\n\\n    struct Character {\\n        uint256 traits;\\n        string name;\\n    }\\n    struct CharacterTraits {\\n        // character\\n        uint16 tribe;\\n        uint16 skinColor;\\n        uint16 furColor;\\n        uint16 eyeColor;\\n        uint16 pupilColor;\\n        //  head\\n        uint16 hair;\\n        uint16 mouth;\\n        uint16 beard;\\n        //  clothing\\n        uint16 top;\\n        uint16 outerwear;\\n        uint16 print;\\n        uint16 bottom;\\n        uint16 footwear;\\n        uint16 belt;\\n        //  accessories\\n        uint16 hat;\\n        uint16 eyewear;\\n        uint16 piercing;\\n        uint16 wrist;\\n        uint16 hands;\\n        uint16 neckwear;\\n        //  items\\n        uint16 leftItem;\\n        uint16 rightItem;\\n    }\\n    /// @dev Mapping of created character structs from token ID\\n    mapping(uint256 => Character) internal _characters;\\n\\n    /// @dev Expected uint if no specific trait is selected\\n    uint256 internal constant EMPTY_TRAIT = 0;\\n\\n    /// @dev Mapping if character trait combination exist\\n    mapping(uint256 => bool) internal _existMap;\\n\\n    /// @dev Mapping if character trait has been removed\\n    mapping(uint256 => bool) internal _removedTraitsMap;\\n\\n    /// @dev Array initialized in order to return removed trait list\\n    uint16[] internal removedTraits;\\n\\n    /// @dev Nifty League NFTL token address\\n    address internal immutable _nftlAddress;\\n\\n    /**\\n     * @notice Construct the Nifty League NFTs\\n     * @param nftlAddress Address of verified Nifty League NFTL contract\\n     */\\n    constructor(address nftlAddress, string memory name, string memory symbol) ERC721(name, symbol) {\\n        _nftlAddress = nftlAddress;\\n    }\\n\\n    // External functions\\n\\n    /**\\n     * @notice Triggers stopped state\\n     * @dev Requirements: The contract must not be paused\\n     */\\n    function pauseMinting() external onlyOwner {\\n        _pause();\\n    }\\n\\n    /**\\n     * @notice Returns to normal state\\n     * @dev Requirements: The contract must be paused\\n     */\\n    function unpauseMinting() external onlyOwner {\\n        _unpause();\\n    }\\n\\n    /**\\n     * @notice Withdraw ether from this contract (Callable by owner)\\n     */\\n    function withdraw() external onlyOwner {\\n        uint256 balance = address(this).balance;\\n        payable(_msgSender()).transfer(balance);\\n    }\\n\\n    /**\\n     * @notice Retrieve a list of removed character traits\\n     * @return removedTraits - list of unavailable character traits\\n     */\\n    function getRemovedTraits() external view returns (uint16[] memory) {\\n        return removedTraits;\\n    }\\n\\n    /**\\n     * @notice Retrieve a list of character traits for a token\\n     * @param tokenId ID of NFT\\n     * @dev Permissioning not added because it is only callable once.\\n     * @return _characterTraits - indexed list of character traits\\n     */\\n    function getCharacterTraits(uint256 tokenId) external view returns (CharacterTraits memory _characterTraits) {\\n        require(_exists(tokenId), \\\"nonexistent token\\\");\\n        Character memory character = _characters[tokenId];\\n        _characterTraits.tribe = _unpackUint10(character.traits);\\n        _characterTraits.skinColor = _unpackUint10(character.traits >> 10);\\n        _characterTraits.furColor = _unpackUint10(character.traits >> 20);\\n        _characterTraits.eyeColor = _unpackUint10(character.traits >> 30);\\n        _characterTraits.pupilColor = _unpackUint10(character.traits >> 40);\\n        _characterTraits.hair = _unpackUint10(character.traits >> 50);\\n        _characterTraits.mouth = _unpackUint10(character.traits >> 60);\\n        _characterTraits.beard = _unpackUint10(character.traits >> 70);\\n        _characterTraits.top = _unpackUint10(character.traits >> 80);\\n        _characterTraits.outerwear = _unpackUint10(character.traits >> 90);\\n        _characterTraits.print = _unpackUint10(character.traits >> 100);\\n        _characterTraits.bottom = _unpackUint10(character.traits >> 110);\\n        _characterTraits.footwear = _unpackUint10(character.traits >> 120);\\n        _characterTraits.belt = _unpackUint10(character.traits >> 130);\\n        _characterTraits.hat = _unpackUint10(character.traits >> 140);\\n        _characterTraits.eyewear = _unpackUint10(character.traits >> 150);\\n        _characterTraits.piercing = _unpackUint10(character.traits >> 160);\\n        _characterTraits.wrist = _unpackUint10(character.traits >> 170);\\n        _characterTraits.hands = _unpackUint10(character.traits >> 180);\\n        _characterTraits.neckwear = _unpackUint10(character.traits >> 190);\\n        _characterTraits.leftItem = _unpackUint10(character.traits >> 200);\\n        _characterTraits.rightItem = _unpackUint10(character.traits >> 210);\\n    }\\n\\n    // Public functions\\n\\n    /**\\n     * @notice Check whether trait combo is unique\\n     * @param traitCombo Generated trait combo packed into uint256\\n     * @return True if combo is unique and available\\n     */\\n    function isUnique(uint256 traitCombo) public view returns (bool) {\\n        return !_existMap[traitCombo];\\n    }\\n\\n    /**\\n     * @notice Check whether trait is still available\\n     * @param trait ID of trait\\n     * @return True if trait has not been removed\\n     */\\n    function isAvailableTrait(uint256 trait) public view returns (bool) {\\n        return !_removedTraitsMap[trait];\\n    }\\n\\n    // Internal functions\\n\\n    /**\\n     * @notice Unpack trait id from trait list\\n     * @param traits Section within trait combo\\n     * @return Trait ID\\n     */\\n    function _unpackUint10(uint256 traits) internal pure returns (uint16) {\\n        return uint16(traits) & 0x03FF;\\n    }\\n\\n    /**\\n     * @notice Generates uint256 bitwise trait combo\\n     * @param character Indexed list of character traits\\n     * @param head Indexed list of head traits\\n     * @param clothing Indexed list of clothing options\\n     * @param accessories Indexed list of accessories\\n     * @param items Indexed list of items\\n     * @dev Each trait is stored in 10 bits\\n     * @return Trait combo packed into uint256\\n     */\\n    function _generateTraitCombo(\\n        uint256[5] memory character,\\n        uint256[3] memory head,\\n        uint256[6] memory clothing,\\n        uint256[6] memory accessories,\\n        uint256[2] memory items\\n    ) internal pure returns (uint256) {\\n        uint256 traits = character[0];\\n        traits |= character[1] << 10;\\n        traits |= character[2] << 20;\\n        traits |= character[3] << 30;\\n        traits |= character[4] << 40;\\n        traits |= head[0] << 50;\\n        traits |= head[1] << 60;\\n        traits |= head[2] << 70;\\n        traits |= clothing[0] << 80;\\n        traits |= clothing[1] << 90;\\n        traits |= clothing[2] << 100;\\n        traits |= clothing[3] << 110;\\n        traits |= clothing[4] << 120;\\n        traits |= clothing[5] << 130;\\n        traits |= accessories[0] << 140;\\n        traits |= accessories[1] << 150;\\n        traits |= accessories[2] << 160;\\n        traits |= accessories[3] << 170;\\n        traits |= accessories[4] << 180;\\n        traits |= accessories[5] << 190;\\n        traits |= items[0] << 200;\\n        traits |= items[1] << 210;\\n        return traits;\\n    }\\n}\\n\",\"keccak256\":\"0xee3d1df063e7fc9de126ca57055dcc445ccc2beb45513e3eacd89fee4d46c875\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60e06040819052600060c08190526200001b91600f9162000151565b503480156200002957600080fd5b50604051620046cd380380620046cd8339810160408190526200004c9162000214565b604080518082018252600a8152692734b33a3ca232b3b2b760b11b6020808301918252835180850190945260058452642222a3a2a760d91b90840152815185939183918391620000a0916000919062000151565b508051620000b690600190602084019062000151565b505050620000d3620000cd620000fb60201b60201c565b620000ff565b50506006805460ff60a01b191690556001600160a01b039081166080521660a0525062000289565b3390565b600680546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b8280546200015f906200024c565b90600052602060002090601f016020900481019282620001835760008555620001ce565b82601f106200019e57805160ff1916838001178555620001ce565b82800160010185558215620001ce579182015b82811115620001ce578251825591602001919060010190620001b1565b50620001dc929150620001e0565b5090565b5b80821115620001dc5760008155600101620001e1565b80516001600160a01b03811681146200020f57600080fd5b919050565b600080604083850312156200022857600080fd5b6200023383620001f7565b91506200024360208401620001f7565b90509250929050565b600181811c908216806200026157607f821691505b602082108114156200028357634e487b7160e01b600052602260045260246000fd5b50919050565b60805160a05161441e620002af6000396000611e090152600061199b015261441e6000f3fe6080604052600436106102255760003560e01c806370a0823111610123578063b88d4fde116100ab578063e13cae401161006f578063e13cae4014610652578063e985e9c514610667578063f2fde38b146106b0578063fb107a4f146106d0578063ff88dea9146106e557600080fd5b8063b88d4fde146105bd578063c39cbef1146105dd578063c87b56dd146105fd578063d92559ad1461061d578063da8fbf2a1461063d57600080fd5b806395d89b41116100f257806395d89b41146105265780639b046ed31461053b5780639ffdb65a14610568578063a22cb46514610588578063ae200322146105a857600080fd5b806370a08231146104c0578063715018a6146104e057806372c9f580146104f55780638da5cb5b1461050857600080fd5b806318160ddd116101b157806354b6f1611161017557806354b6f1611461042457806355f804b3146104415780635c975abb146104615780636352211e146104805780636b8ff574146104a057600080fd5b806318160ddd1461039457806323b872dd146103b957806332cb6b0c146103d95780633ccfd60b146103ef57806342842e0e1461040457600080fd5b8063081812fc116101f8578063081812fc146102c9578063095ea7b31461030157806315b56d10146103215780631656efc61461034157806317bed2c51461037257600080fd5b80630194cf121461022a57806301ffc9a71461024157806306fdde03146102765780630750d2fb14610298575b600080fd5b34801561023657600080fd5b5061023f610705565b005b34801561024d57600080fd5b5061026161025c3660046139e8565b61097d565b60405190151581526020015b60405180910390f35b34801561028257600080fd5b5061028b6109cf565b60405161026d9190613a5d565b3480156102a457600080fd5b506102616102b3366004613a70565b60009081526008602052604090205460ff161590565b3480156102d557600080fd5b506102e96102e4366004613a70565b610a61565b6040516001600160a01b03909116815260200161026d565b34801561030d57600080fd5b5061023f61031c366004613aa5565b610a88565b34801561032d57600080fd5b5061026161033c366004613ba4565b610ba3565b34801561034d57600080fd5b5061026161035c366004613a70565b60009081526009602052604090205460ff161590565b34801561037e57600080fd5b50610387610bd6565b60405161026d9190613bd9565b3480156103a057600080fd5b50600c546103ab9081565b60405190815260200161026d565b3480156103c557600080fd5b5061023f6103d4366004613c21565b610c55565b3480156103e557600080fd5b506103ab61271081565b3480156103fb57600080fd5b5061023f610c86565b34801561041057600080fd5b5061023f61041f366004613c21565b610cc1565b34801561043057600080fd5b506103ab683635c9adc5dea0000081565b34801561044d57600080fd5b5061023f61045c366004613ba4565b610cdc565b34801561046d57600080fd5b50600654600160a01b900460ff16610261565b34801561048c57600080fd5b506102e961049b366004613a70565b610cf7565b3480156104ac57600080fd5b5061028b6104bb366004613a70565b610d57565b3480156104cc57600080fd5b506103ab6104db366004613c5d565b610e1f565b3480156104ec57600080fd5b5061023f610ea5565b61023f610503366004613d83565b610eb9565b34801561051457600080fd5b506006546001600160a01b03166102e9565b34801561053257600080fd5b5061028b6110cb565b34801561054757600080fd5b5061055b610556366004613a70565b6110da565b60405161026d9190613e4b565b34801561057457600080fd5b50610261610583366004613ba4565b61149d565b34801561059457600080fd5b5061023f6105a3366004613fc3565b61169e565b3480156105b457600080fd5b5061023f6116a9565b3480156105c957600080fd5b5061023f6105d8366004613ffa565b6116b9565b3480156105e957600080fd5b5061028b6105f8366004614076565b6116f1565b34801561060957600080fd5b5061028b610618366004613a70565b611b69565b34801561062957600080fd5b5061023f610638366004613a70565b611bd0565b34801561064957600080fd5b5061023f611bdd565b34801561065e57600080fd5b506103ab606481565b34801561067357600080fd5b506102616106823660046140bd565b6001600160a01b03918216600090815260056020908152604080832093909416825291909152205460ff1690565b3480156106bc57600080fd5b5061023f6106cb366004613c5d565b611bed565b3480156106dc57600080fd5b506103ab611c66565b3480156106f157600080fd5b506102616107003660046140f0565b611dbc565b61070d611e86565b600d60205260717fa5049387d9cb649c59f4bda666105ba636c2a103d8e2b232ba4d125737cd214955600e7fa48544818c2c710afa9849c61ec9c60e8acdb3eaa2885f33b37e118cc8fd04ac55603f7fb91432bedff11256dbe14161d3606a2657bc9dacf8742f6b817d871dd53fb9765560637f0b705463cf5f7356780ee6e96132d37412c1b5816a4d207b8dcd42c34976745755604c7f7b6f1ece0cbe5122a575776770f0494c2d57ed2a50e36c2ba0d811d70ee03b645560297fba9d637f252776d5e1b3534bbd7554a1265a4ef0539d9ca50abe118598a6973c5560657f52c2086a203f40e709b1346663401f6c737b2fce5878601fcf875b047fed5fb65560257fe399baa2fabbab2a0309615b124a802277bab50ec0ca3452a00889e216c4b902819055600c7fe0af3347aa7e5af384208c9d29458f902f0ceddbc90963608afa77235658b360819055602b7f154ef5b709dcdc8b49a2af6408b8a1af209c39b5fa796f03680257c97692546e5560327f52fb6a28cb3c239105f8f829bc7376f939b6bfb040c470bdc2bda0af2e784b9455600a7f01a49be1e7ea084651fd665847100d28826db0b17160863a99534933cbbd2dce557f6fbf3b49b523bc27464b7dbfa6311951351b1d3efd07aa2ee4d1ce319801a0ce5560197f0a206051e911305809ddd48cf2baa7ead2c7fb038e505e1d02f9e6c2ce72930c557f1341e158d1184a2eb4edb96b016176e1c5ad075baae6651557fb93ae3925007a55605c7fdd2af3330d298808a303a10bc360333536e7697099bb3fe7200b0c272de6655855601560005260307f35c0ef8c6f7488ebe28ad34a3af68b3aa3aea0693e227054e9ec90bd504f66d255565b60006001600160e01b031982166380ac58cd60e01b14806109ae57506001600160e01b03198216635b5e139f60e01b145b806109c957506301ffc9a760e01b6001600160e01b03198316145b92915050565b6060600080546109de90614112565b80601f0160208091040260200160405190810160405280929190818152602001828054610a0a90614112565b8015610a575780601f10610a2c57610100808354040283529160200191610a57565b820191906000526020600020905b815481529060010190602001808311610a3a57829003601f168201915b5050505050905090565b6000610a6c82611ee0565b506000908152600460205260409020546001600160a01b031690565b6000610a9382610cf7565b9050806001600160a01b0316836001600160a01b03161415610b065760405162461bcd60e51b815260206004820152602160248201527f4552433732313a20617070726f76616c20746f2063757272656e74206f776e656044820152603960f91b60648201526084015b60405180910390fd5b336001600160a01b0382161480610b225750610b228133610682565b610b945760405162461bcd60e51b815260206004820152603d60248201527f4552433732313a20617070726f76652063616c6c6572206973206e6f7420746f60448201527f6b656e206f776e6572206f7220617070726f76656420666f7220616c6c0000006064820152608401610afd565b610b9e8383611f30565b505050565b6000600b610bb083611f9e565b604051610bbd919061414d565b9081526040519081900360200190205460ff1692915050565b6060600a805480602002602001604051908101604052809291908181526020018280548015610a5757602002820191906000526020600020906000905b82829054906101000a900461ffff1661ffff1681526020019060020190602082600101049283019260010382029150808411610c135790505050505050905090565b610c5f3382612101565b610c7b5760405162461bcd60e51b8152600401610afd90614169565b610b9e83838361217f565b610c8e611e86565b6040514790339082156108fc029083906000818181858888f19350505050158015610cbd573d6000803e3d6000fd5b5050565b610b9e838383604051806020016040528060008152506116b9565b610ce4611e86565b8051610cbd90600f906020840190613939565b6000818152600260205260408120546001600160a01b0316806109c95760405162461bcd60e51b8152602060048201526018602482015277115490cdcc8c4e881a5b9d985b1a59081d1bdad95b88125160421b6044820152606401610afd565b6060610d62826122e3565b610d7e5760405162461bcd60e51b8152600401610afd906141b6565b60008281526007602052604090206001018054610d9a90614112565b80601f0160208091040260200160405190810160405280929190818152602001828054610dc690614112565b8015610e135780601f10610de857610100808354040283529160200191610e13565b820191906000526020600020905b815481529060010190602001808311610df657829003601f168201915b50505050509050919050565b60006001600160a01b038216610e895760405162461bcd60e51b815260206004820152602960248201527f4552433732313a2061646472657373207a65726f206973206e6f7420612076616044820152683634b21037bbb732b960b91b6064820152608401610afd565b506001600160a01b031660009081526003602052604090205490565b610ead611e86565b610eb76000612300565b565b610ec1612352565b6000610ecc600c5490565b9050600381101580610ee857506006546001600160a01b031633145b610f2b5760405162461bcd60e51b815260206004820152601460248201527314d85b19481a185cc81b9bdd081cdd185c9d195960621b6044820152606401610afd565b610f33611c66565b3414610f795760405162461bcd60e51b8152602060048201526015602482015274115d1a195c881d985b1d59481a5b98dbdc9c9958dd605a1b6044820152606401610afd565b610f86868686868661239f565b60006110b78787878787600080868160200201519050600a8760016020020151901b1760148760026020020151901b17601e8760036020020151901b1760288760046020020151901b1760328660006020020151901b17603c8660016020020151901b1760468660026020020151901b1760508560006020020151901b17605a8560016020020151901b1760648560026020020151901b17606e8560036020020151901b1760788560046020020151901b1760828560056020020151901b17608c8460006020020151901b1760968460016020020151901b1760a08460026020020151901b1760aa8460036020020151901b1760b48460046020020151901b1760be8460056020020151901b1760c88360006020020151901b1760d28360016020020151901b179695505050505050565b90506110c2816131d2565b50505050505050565b6060600180546109de90614112565b604080516102c081018252600080825260208201819052918101829052606081018290526080810182905260a0810182905260c0810182905260e08101829052610100810182905261012081018290526101408101829052610160810182905261018081018290526101a081018290526101c081018290526101e08101829052610200810182905261022081018290526102408101829052610260810182905261028081018290526102a0810191909152611194826122e3565b6111b05760405162461bcd60e51b8152600401610afd906141b6565b600060076000848152602001908152602001600020604051806040016040529081600082015481526020016001820180546111ea90614112565b80601f016020809104026020016040519081016040528092919081815260200182805461121690614112565b80156112635780601f1061123857610100808354040283529160200191611263565b820191906000526020600020905b81548152906001019060200180831161124657829003601f168201915b5050509190925250508151919250506103ff1661ffff168252805161128c90600a1c6103ff1690565b61ffff16602083015280516112a59060141c6103ff1690565b61ffff16604083015280516112be90601e1c6103ff1690565b61ffff16606083015280516112d79060281c6103ff1690565b61ffff16608083015280516112f09060321c6103ff1690565b61ffff1660a0830152805161130990603c1c6103ff1690565b61ffff1660c083015280516113229060461c6103ff1690565b61ffff1660e0830152805161133b9060501c6103ff1690565b61ffff16610100830152805161135590605a1c6103ff1690565b61ffff16610120830152805161136f9060641c6103ff1690565b61ffff16610140830152805161138990606e1c6103ff1690565b61ffff1661016083015280516113a39060781c6103ff1690565b61ffff1661018083015280516113bd9060821c6103ff1690565b61ffff166101a083015280516113d790608c1c6103ff1690565b61ffff166101c083015280516113f19060961c6103ff1690565b61ffff166101e0830152805161140b9060a01c6103ff1690565b61ffff1661020083015280516114259060aa1c6103ff1690565b61ffff16610220830152805161143f9060b41c6103ff1690565b61ffff1661024083015280516114599060be1c6103ff1690565b61ffff1661026083015280516114739060c81c6103ff1690565b61ffff16610280830152805161148d9060d21c6103ff1690565b61ffff166102a083015250919050565b6000808290506001815110806114b4575060208151115b156114c25750600092915050565b806000815181106114d5576114d56141e1565b6020910101516001600160f81b031916600160fd1b148061152757508060018251611500919061420d565b81518110611510576115106141e1565b6020910101516001600160f81b031916600160fd1b145b156115355750600092915050565b60008160008151811061154a5761154a6141e1565b01602001516001600160f81b031916905060005b825181101561169357600083828151811061157b5761157b6141e1565b01602001516001600160f81b0319169050600160fd1b811480156115ac5750600160fd1b6001600160f81b03198416145b156115bd5750600095945050505050565b600360fc1b6001600160f81b03198216108015906115e95750603960f81b6001600160f81b0319821611155b15801561161f5750604160f81b6001600160f81b031982161080159061161d5750602d60f91b6001600160f81b0319821611155b155b80156116545750606160f81b6001600160f81b03198216108015906116525750603d60f91b6001600160f81b0319821611155b155b801561166e5750600160fd1b6001600160f81b0319821614155b1561167f5750600095945050505050565b91508061168b81614224565b91505061155e565b506001949350505050565b610cbd3383836132c7565b6116b1611e86565b610eb7613396565b6116c33383612101565b6116df5760405162461bcd60e51b8152600401610afd90614169565b6116eb848484846133eb565b50505050565b60606116fc836122e3565b6117185760405162461bcd60e51b8152600401610afd906141b6565b6117223384612101565b61176e5760405162461bcd60e51b815260206004820181905260248201527f43616c6c6572206973206e6f74206f776e6572206e6f7220617070726f7665646044820152606401610afd565b6000838152600760205260408120600101805461178a90614112565b80601f01602080910402602001604051908101604052809291908181526020018280546117b690614112565b80156118035780601f106117d857610100808354040283529160200191611803565b820191906000526020600020905b8154815290600101906020018083116117e657829003601f168201915b5050505050905060028160405161181a919061414d565b602060405180830381855afa158015611837573d6000803e3d6000fd5b5050506040513d601f19601f8201168201806040525081019061185a919061423f565b60028460405161186a919061414d565b602060405180830381855afa158015611887573d6000803e3d6000fd5b5050506040513d601f19601f820116820180604052508101906118aa919061423f565b14156118f85760405162461bcd60e51b815260206004820152601f60248201527f4e6577206e616d6520616e64206f6c64206e616d652061726520657175616c006044820152606401610afd565b6119018361149d565b6119435760405162461bcd60e51b815260206004820152601360248201527213985b59481a5cc81b9bdd08185b1b1bddd959606a1b6044820152606401610afd565b61194c83610ba3565b156119915760405162461bcd60e51b815260206004820152601560248201527413985b5948185b1c9958591e481c995cd95c9d9959605a1b6044820152606401610afd565b6001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000166379cc6790336040516001600160e01b031960e084901b1681526001600160a01b039091166004820152683635c9adc5dea000006024820152604401600060405180830381600087803b158015611a1157600080fd5b505af1158015611a25573d6000803e3d6000fd5b5050506000858152600760205260408120600101805491925090611a4890614112565b90501115611af65760008481526007602052604090206001018054611af69190611a7190614112565b80601f0160208091040260200160405190810160405280929190818152602001828054611a9d90614112565b8015611aea5780601f10611abf57610100808354040283529160200191611aea565b820191906000526020600020905b815481529060010190602001808311611acd57829003601f168201915b5050505050600061341e565b611b0183600161341e565b60008481526007602090815260409091208451611b2692600190920191860190613939565b50837f8eff5208043d31f23e348dc06be3a80821505e5b3e0002e9fa1185f5d47eac598285604051611b59929190614258565b60405180910390a2509092915050565b6060611b7482611ee0565b6000611b7e61345b565b90506000815111611b9e5760405180602001604052806000815250611bc9565b80611ba88461346a565b604051602001611bb9929190614286565b6040516020818303038152906040525b9392505050565b611bd8611e86565b600e55565b611be5611e86565b610eb76134ff565b611bf5611e86565b6001600160a01b038116611c5a5760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b6064820152608401610afd565b611c6381612300565b50565b600080611c72600c5490565b9050611c81606461271061420d565b811080611ca457506006546001600160a01b031633148015611ca4575061271081105b611ce95760405162461bcd60e51b815260206004820152601660248201527514d85b19481a185cc8185b1c9958591e48195b99195960521b6044820152606401610afd565b6006546001600160a01b0316331415611d0457600091505090565b67011c37937e080000600e5410611d1d575050600e5490565b61251c8110611d35576703e2c284391c000091505090565b6121348110611d4d576703782dace9d9000091505090565b6119648110611d655767030d98d59a96000091505090565b6111948110611d7d576702a303fe4b53000091505090565b6109c48110611d95576702386f26fc10000091505090565b6103e88110611dad576701cdda4faccd000091505090565b67016345785d8a000091505090565b600081611dcb575060016109c9565b60968210611dec575060008181526009602052604090205460ff16156109c9565b60405163968ef8f560e01b815260048101849052602481018390527f0000000000000000000000000000000000000000000000000000000000000000906001600160a01b0382169063968ef8f590604401602060405180830381865afa158015611e5a573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611e7e91906142b5565b949350505050565b6006546001600160a01b03163314610eb75760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152606401610afd565b611ee9816122e3565b611c635760405162461bcd60e51b8152602060048201526018602482015277115490cdcc8c4e881a5b9d985b1a59081d1bdad95b88125160421b6044820152606401610afd565b600081815260046020526040902080546001600160a01b0319166001600160a01b0384169081179091558190611f6582610cf7565b6001600160a01b03167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92560405160405180910390a45050565b606060008290506000815167ffffffffffffffff811115611fc157611fc1613acf565b6040519080825280601f01601f191660200182016040528015611feb576020820181803683370190505b50905060005b82518110156120f957604183828151811061200e5761200e6141e1565b016020015160f81c1080159061203e5750605a838281518110612033576120336141e1565b016020015160f81c11155b156120a057828181518110612055576120556141e1565b602001015160f81c60f81b60f81c602061206f91906142d2565b60f81b828281518110612084576120846141e1565b60200101906001600160f81b031916908160001a9053506120e7565b8281815181106120b2576120b26141e1565b602001015160f81c60f81b8282815181106120cf576120cf6141e1565b60200101906001600160f81b031916908160001a9053505b806120f181614224565b915050611ff1565b509392505050565b60008061210d83610cf7565b9050806001600160a01b0316846001600160a01b0316148061215457506001600160a01b0380821660009081526005602090815260408083209388168352929052205460ff165b80611e7e5750836001600160a01b031661216d84610a61565b6001600160a01b031614949350505050565b826001600160a01b031661219282610cf7565b6001600160a01b0316146121b85760405162461bcd60e51b8152600401610afd906142f7565b6001600160a01b03821661221a5760405162461bcd60e51b8152602060048201526024808201527f4552433732313a207472616e7366657220746f20746865207a65726f206164646044820152637265737360e01b6064820152608401610afd565b826001600160a01b031661222d82610cf7565b6001600160a01b0316146122535760405162461bcd60e51b8152600401610afd906142f7565b600081815260046020908152604080832080546001600160a01b03199081169091556001600160a01b0387811680865260038552838620805460001901905590871680865283862080546001019055868652600290945282852080549092168417909155905184937fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef91a4505050565b6000908152600260205260409020546001600160a01b0316151590565b600680546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b600654600160a01b900460ff1615610eb75760405162461bcd60e51b815260206004820152601060248201526f14185d5cd8589b194e881c185d5cd95960821b6044820152606401610afd565b845180158015906123d157506006811115806123d15750600981111580156123d157506006546001600160a01b031633145b61240f5760405162461bcd60e51b815260206004820152600f60248201526e151c9a5899481a5b98dbdc9c9958dd608a1b6044820152606401610afd565b602086015161242190600a6045613542565b8061243c575061243c8660015b602002015160776095613542565b61247f5760405162461bcd60e51b815260206004820152601460248201527314dada5b8818dbdb1bdc881a5b98dbdc9c9958dd60621b6044820152606401610afd565b60408601516124919060466064613542565b806124a257506124a286600261242e565b6124e45760405162461bcd60e51b8152602060048201526013602482015272119d5c8818dbdb1bdc881a5b98dbdc9c9958dd606a1b6044820152606401610afd565b60608601516124f6906065606d613542565b80612507575061250786600361242e565b6125495760405162461bcd60e51b8152602060048201526013602482015272115e594818dbdb1bdc881a5b98dbdc9c9958dd606a1b6044820152606401610afd565b608086015161255b90606e6076613542565b8061256c575061256c86600461242e565b6125b05760405162461bcd60e51b8152602060048201526015602482015274141d5c1a5b0818dbdb1bdc881a5b98dbdc9c9958dd605a1b6044820152606401610afd565b84516125c0906096610106613542565b6125fd5760405162461bcd60e51b815260206004820152600e60248201526d12185a5c881a5b98dbdc9c9958dd60921b6044820152606401610afd565b602085015161261190610107610114613542565b61264f5760405162461bcd60e51b815260206004820152600f60248201526e135bdd5d1a081a5b98dbdc9c9958dd608a1b6044820152606401610afd565b604085015161266390610115610153613542565b6126a15760405162461bcd60e51b815260206004820152600f60248201526e1099585c99081a5b98dbdc9c9958dd608a1b6044820152606401610afd565b83516126b2906101546101b6613542565b6126ee5760405162461bcd60e51b815260206004820152600d60248201526c151bdc081a5b98dbdc9c9958dd609a1b6044820152606401610afd565b6020840151612702906101b7610202613542565b6127445760405162461bcd60e51b815260206004820152601360248201527213dd5d195c9dd9585c881a5b98dbdc9c9958dd606a1b6044820152606401610afd565b60408401516127589061020361022b613542565b6127965760405162461bcd60e51b815260206004820152600f60248201526e141c9a5b9d081a5b98dbdc9c9958dd608a1b6044820152606401610afd565b60608401516127aa9061022c610291613542565b6127e95760405162461bcd60e51b815260206004820152601060248201526f109bdd1d1bdb481a5b98dbdc9c9958dd60821b6044820152606401610afd565b60808401516127fd906102926102b6613542565b61283e5760405162461bcd60e51b8152602060048201526012602482015271119bdbdd1dd9585c881a5b98dbdc9c9958dd60721b6044820152606401610afd565b60a0840151612852906102b76102c2613542565b61288f5760405162461bcd60e51b815260206004820152600e60248201526d10995b1d081a5b98dbdc9c9958dd60921b6044820152606401610afd565b82516128a0906102c36102ed613542565b6128dc5760405162461bcd60e51b815260206004820152600d60248201526c12185d081a5b98dbdc9c9958dd609a1b6044820152606401610afd565b60208301516128f0906102ee61031f613542565b6129305760405162461bcd60e51b8152602060048201526011602482015270115e595dd9585c881a5b98dbdc9c9958dd607a1b6044820152606401610afd565b604083015161294490610320610329613542565b6129855760405162461bcd60e51b8152602060048201526012602482015271141a595c98da5b99c81a5b98dbdc9c9958dd60721b6044820152606401610afd565b60608301516129999061032a610335613542565b6129e55760405162461bcd60e51b815260206004820152601960248201527f5772697374206163636573736f727920696e636f7272656374000000000000006044820152606401610afd565b60808301516129f99061033661034e613542565b612a455760405162461bcd60e51b815260206004820152601960248201527f48616e6473206163636573736f727920696e636f7272656374000000000000006044820152606401610afd565b60a0830151612a599061034f610373613542565b612a9a5760405162461bcd60e51b8152602060048201526012602482015271139958daddd9585c881a5b98dbdc9c9958dd60721b6044820152606401610afd565b8151612aab906103746103cf613542565b612aed5760405162461bcd60e51b81526020600482015260136024820152721319599d081a5d195b481a5b98dbdc9c9958dd606a1b6044820152606401610afd565b6020820151612b01906103d06103ff613542565b612b445760405162461bcd60e51b8152602060048201526014602482015273149a59da1d081a5d195b481a5b98dbdc9c9958dd60621b6044820152606401610afd565b612b56818760015b6020020151611dbc565b612b9b5760405162461bcd60e51b8152602060048201526016602482015275536b696e20636f6c6f7220756e617661696c61626c6560501b6044820152606401610afd565b612ba781876002612b4c565b612beb5760405162461bcd60e51b815260206004820152601560248201527446757220636f6c6f7220756e617661696c61626c6560581b6044820152606401610afd565b612bf781876003612b4c565b612c3b5760405162461bcd60e51b815260206004820152601560248201527445796520636f6c6f7220756e617661696c61626c6560581b6044820152606401610afd565b612c4781876004612b4c565b612c935760405162461bcd60e51b815260206004820152601760248201527f507570696c20636f6c6f7220756e617661696c61626c650000000000000000006044820152606401610afd565b612c9f81866000612b4c565b612cde5760405162461bcd60e51b815260206004820152601060248201526f4861697220756e617661696c61626c6560801b6044820152606401610afd565b612cea81866001612b4c565b612d2a5760405162461bcd60e51b81526020600482015260116024820152704d6f75746820756e617661696c61626c6560781b6044820152606401610afd565b612d3681866002612b4c565b612d765760405162461bcd60e51b8152602060048201526011602482015270426561726420756e617661696c61626c6560781b6044820152606401610afd565b612d8281856000612b4c565b612dc05760405162461bcd60e51b815260206004820152600f60248201526e546f7020756e617661696c61626c6560881b6044820152606401610afd565b612dcc81856001612b4c565b612e105760405162461bcd60e51b81526020600482015260156024820152744f757465727765617220756e617661696c61626c6560581b6044820152606401610afd565b612e1c81856002612b4c565b612e5c5760405162461bcd60e51b81526020600482015260116024820152705072696e7420756e617661696c61626c6560781b6044820152606401610afd565b612e6881856003612b4c565b612ea95760405162461bcd60e51b8152602060048201526012602482015271426f74746f6d20756e617661696c61626c6560701b6044820152606401610afd565b612eb581856004612b4c565b612ef85760405162461bcd60e51b8152602060048201526014602482015273466f6f747765617220756e617661696c61626c6560601b6044820152606401610afd565b612f0481856005612b4c565b612f435760405162461bcd60e51b815260206004820152601060248201526f42656c7420756e617661696c61626c6560801b6044820152606401610afd565b612f4f81846000612b4c565b612f8d5760405162461bcd60e51b815260206004820152600f60248201526e48617420756e617661696c61626c6560881b6044820152606401610afd565b612f9981846001612b4c565b612fdb5760405162461bcd60e51b81526020600482015260136024820152724579657765617220756e617661696c61626c6560681b6044820152606401610afd565b612fe781846002612b4c565b61302a5760405162461bcd60e51b81526020600482015260146024820152735069657263696e6720756e617661696c61626c6560601b6044820152606401610afd565b61303681846003612b4c565b6130825760405162461bcd60e51b815260206004820152601b60248201527f5772697374206163636573736f727920756e617661696c61626c6500000000006044820152606401610afd565b61308e81846004612b4c565b6130da5760405162461bcd60e51b815260206004820152601a60248201527f48616e64206163636573736f727920756e617661696c61626c650000000000006044820152606401610afd565b6130e681846005612b4c565b6131295760405162461bcd60e51b81526020600482015260146024820152734e65636b7765617220756e617661696c61626c6560601b6044820152606401610afd565b61313581836000612b4c565b6131795760405162461bcd60e51b81526020600482015260156024820152744c656674206974656d20756e617661696c61626c6560581b6044820152606401610afd565b61318581836001612b4c565b6131ca5760405162461bcd60e51b81526020600482015260166024820152755269676874206974656d20756e617661696c61626c6560501b6044820152606401610afd565b505050505050565b60008181526008602052604090205460ff16156132315760405162461bcd60e51b815260206004820152601e60248201527f4e465420747261697420636f6d626f20616c72656164792065786973747300006044820152606401610afd565b6000818152600860205260409020805460ff19166001179055613258600c80546001019055565b6000613263600c5490565b9050613282604051806040016040528060008152602001606081525090565b82815260008281526007602090815260409091208251815581830151805184936132b3926001850192910190613939565b50905050610b9e6132c13390565b83613561565b816001600160a01b0316836001600160a01b031614156133295760405162461bcd60e51b815260206004820152601960248201527f4552433732313a20617070726f766520746f2063616c6c6572000000000000006044820152606401610afd565b6001600160a01b03838116600081815260056020908152604080832094871680845294825291829020805460ff191686151590811790915591519182527f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31910160405180910390a3505050565b61339e61357b565b6006805460ff60a01b191690557f5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa335b6040516001600160a01b03909116815260200160405180910390a1565b6133f684848461217f565b613402848484846135cb565b6116eb5760405162461bcd60e51b8152600401610afd9061433c565b80600b61342a84611f9e565b604051613437919061414d565b908152604051908190036020019020805491151560ff199092169190911790555050565b6060600f80546109de90614112565b60606000613477836136c1565b600101905060008167ffffffffffffffff81111561349757613497613acf565b6040519080825280601f01601f1916602001820160405280156134c1576020820181803683370190505b5090508181016020015b600019016f181899199a1a9b1b9c1cb0b131b232b360811b600a86061a8153600a85049450846134fa576120f9565b6134cb565b613507612352565b6006805460ff60a01b1916600160a01b1790557f62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a2586133ce3390565b6000831580611e7e5750828410158015611e7e57505090911115919050565b610cbd828260405180602001604052806000815250613799565b600654600160a01b900460ff16610eb75760405162461bcd60e51b815260206004820152601460248201527314185d5cd8589b194e881b9bdd081c185d5cd95960621b6044820152606401610afd565b60006001600160a01b0384163b1561169357604051630a85bd0160e11b81526001600160a01b0385169063150b7a029061360f90339089908890889060040161438e565b6020604051808303816000875af192505050801561364a575060408051601f3d908101601f19168201909252613647918101906143cb565b60015b6136a4573d808015613678576040519150601f19603f3d011682016040523d82523d6000602084013e61367d565b606091505b50805161369c5760405162461bcd60e51b8152600401610afd9061433c565b805181602001fd5b6001600160e01b031916630a85bd0160e11b149050949350505050565b60008072184f03e93ff9f4daa797ed6e38ed64bf6a1f0160401b83106137005772184f03e93ff9f4daa797ed6e38ed64bf6a1f0160401b830492506040015b6d04ee2d6d415b85acef8100000000831061372c576d04ee2d6d415b85acef8100000000830492506020015b662386f26fc10000831061374a57662386f26fc10000830492506010015b6305f5e1008310613762576305f5e100830492506008015b612710831061377657612710830492506004015b60648310613788576064830492506002015b600a83106109c95760010192915050565b6137a383836137cc565b6137b060008484846135cb565b610b9e5760405162461bcd60e51b8152600401610afd9061433c565b6001600160a01b0382166138225760405162461bcd60e51b815260206004820181905260248201527f4552433732313a206d696e7420746f20746865207a65726f20616464726573736044820152606401610afd565b61382b816122e3565b156138785760405162461bcd60e51b815260206004820152601c60248201527f4552433732313a20746f6b656e20616c7265616479206d696e746564000000006044820152606401610afd565b613881816122e3565b156138ce5760405162461bcd60e51b815260206004820152601c60248201527f4552433732313a20746f6b656e20616c7265616479206d696e746564000000006044820152606401610afd565b6001600160a01b038216600081815260036020908152604080832080546001019055848352600290915280822080546001600160a01b0319168417905551839291907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef908290a45050565b82805461394590614112565b90600052602060002090601f01602090048101928261396757600085556139ad565b82601f1061398057805160ff19168380011785556139ad565b828001600101855582156139ad579182015b828111156139ad578251825591602001919060010190613992565b506139b99291506139bd565b5090565b5b808211156139b957600081556001016139be565b6001600160e01b031981168114611c6357600080fd5b6000602082840312156139fa57600080fd5b8135611bc9816139d2565b60005b83811015613a20578181015183820152602001613a08565b838111156116eb5750506000910152565b60008151808452613a49816020860160208601613a05565b601f01601f19169290920160200192915050565b602081526000611bc96020830184613a31565b600060208284031215613a8257600080fd5b5035919050565b80356001600160a01b0381168114613aa057600080fd5b919050565b60008060408385031215613ab857600080fd5b613ac183613a89565b946020939093013593505050565b634e487b7160e01b600052604160045260246000fd5b60405160a0810167ffffffffffffffff81118282101715613b0857613b08613acf565b60405290565b600067ffffffffffffffff80841115613b2957613b29613acf565b604051601f8501601f19908116603f01168101908282118183101715613b5157613b51613acf565b81604052809350858152868686011115613b6a57600080fd5b858560208301376000602087830101525050509392505050565b600082601f830112613b9557600080fd5b611bc983833560208501613b0e565b600060208284031215613bb657600080fd5b813567ffffffffffffffff811115613bcd57600080fd5b611e7e84828501613b84565b6020808252825182820181905260009190848201906040850190845b81811015613c1557835161ffff1683529284019291840191600101613bf5565b50909695505050505050565b600080600060608486031215613c3657600080fd5b613c3f84613a89565b9250613c4d60208501613a89565b9150604084013590509250925092565b600060208284031215613c6f57600080fd5b611bc982613a89565b60006040516060810181811067ffffffffffffffff82111715613c9d57613c9d613acf565b6040529050806060830184811115613cb457600080fd5b835b81811015613cce578035835260209283019201613cb6565b50505092915050565b60006040516040810181811067ffffffffffffffff82111715613cfc57613cfc613acf565b80604052508091506040830184811115613cb457600080fd5b600082601f830112613d2657600080fd5b60405160c0810181811067ffffffffffffffff82111715613d4957613d49613acf565b6040528060c0840185811115613d5e57600080fd5b845b81811015613d78578035835260209283019201613d60565b509195945050505050565b60008060008060006102c08688031215613d9c57600080fd5b86601f870112613dab57600080fd5b613db3613ae5565b8060a0880189811115613dc557600080fd5b885b81811015613ddf578035845260209384019301613dc7565b508197508960bf8a0112613df257600080fd5b613dfc8a82613c78565b9650505050613e0f876101008801613d15565b9250613e1f876101c08801613d15565b91508661029f870112613e3157600080fd5b613e3f876102808801613cd7565b90509295509295909350565b815161ffff1681526102c081016020830151613e6d602084018261ffff169052565b506040830151613e83604084018261ffff169052565b506060830151613e99606084018261ffff169052565b506080830151613eaf608084018261ffff169052565b5060a0830151613ec560a084018261ffff169052565b5060c0830151613edb60c084018261ffff169052565b5060e0830151613ef160e084018261ffff169052565b506101008381015161ffff90811691840191909152610120808501518216908401526101408085015182169084015261016080850151821690840152610180808501518216908401526101a0808501518216908401526101c0808501518216908401526101e08085015182169084015261020080850151821690840152610220808501518216908401526102408085015182169084015261026080850151821690840152610280808501518216908401526102a09384015116929091019190915290565b8015158114611c6357600080fd5b60008060408385031215613fd657600080fd5b613fdf83613a89565b91506020830135613fef81613fb5565b809150509250929050565b6000806000806080858703121561401057600080fd5b61401985613a89565b935061402760208601613a89565b925060408501359150606085013567ffffffffffffffff81111561404a57600080fd5b8501601f8101871361405b57600080fd5b61406a87823560208401613b0e565b91505092959194509250565b6000806040838503121561408957600080fd5b82359150602083013567ffffffffffffffff8111156140a757600080fd5b6140b385828601613b84565b9150509250929050565b600080604083850312156140d057600080fd5b6140d983613a89565b91506140e760208401613a89565b90509250929050565b6000806040838503121561410357600080fd5b50508035926020909101359150565b600181811c9082168061412657607f821691505b6020821081141561414757634e487b7160e01b600052602260045260246000fd5b50919050565b6000825161415f818460208701613a05565b9190910192915050565b6020808252602d908201527f4552433732313a2063616c6c6572206973206e6f7420746f6b656e206f776e6560408201526c1c881bdc88185c1c1c9bdd9959609a1b606082015260800190565b6020808252601190820152703737b732bc34b9ba32b73a103a37b5b2b760791b604082015260600190565b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052601160045260246000fd5b60008282101561421f5761421f6141f7565b500390565b6000600019821415614238576142386141f7565b5060010190565b60006020828403121561425157600080fd5b5051919050565b60408152600061426b6040830185613a31565b828103602084015261427d8185613a31565b95945050505050565b60008351614298818460208801613a05565b8351908301906142ac818360208801613a05565b01949350505050565b6000602082840312156142c757600080fd5b8151611bc981613fb5565b600060ff821660ff84168060ff038211156142ef576142ef6141f7565b019392505050565b60208082526025908201527f4552433732313a207472616e736665722066726f6d20696e636f72726563742060408201526437bbb732b960d91b606082015260800190565b60208082526032908201527f4552433732313a207472616e7366657220746f206e6f6e20455243373231526560408201527131b2b4bb32b91034b6b83632b6b2b73a32b960711b606082015260800190565b6001600160a01b03858116825284166020820152604081018390526080606082018190526000906143c190830184613a31565b9695505050505050565b6000602082840312156143dd57600080fd5b8151611bc9816139d256fea2646970667358221220a42911da85756b5c9f225e3d04d622d164697eda1447572b7e2c232fa5af42a564736f6c634300080b0033",
  "deployedBytecode": "0x6080604052600436106102255760003560e01c806370a0823111610123578063b88d4fde116100ab578063e13cae401161006f578063e13cae4014610652578063e985e9c514610667578063f2fde38b146106b0578063fb107a4f146106d0578063ff88dea9146106e557600080fd5b8063b88d4fde146105bd578063c39cbef1146105dd578063c87b56dd146105fd578063d92559ad1461061d578063da8fbf2a1461063d57600080fd5b806395d89b41116100f257806395d89b41146105265780639b046ed31461053b5780639ffdb65a14610568578063a22cb46514610588578063ae200322146105a857600080fd5b806370a08231146104c0578063715018a6146104e057806372c9f580146104f55780638da5cb5b1461050857600080fd5b806318160ddd116101b157806354b6f1611161017557806354b6f1611461042457806355f804b3146104415780635c975abb146104615780636352211e146104805780636b8ff574146104a057600080fd5b806318160ddd1461039457806323b872dd146103b957806332cb6b0c146103d95780633ccfd60b146103ef57806342842e0e1461040457600080fd5b8063081812fc116101f8578063081812fc146102c9578063095ea7b31461030157806315b56d10146103215780631656efc61461034157806317bed2c51461037257600080fd5b80630194cf121461022a57806301ffc9a71461024157806306fdde03146102765780630750d2fb14610298575b600080fd5b34801561023657600080fd5b5061023f610705565b005b34801561024d57600080fd5b5061026161025c3660046139e8565b61097d565b60405190151581526020015b60405180910390f35b34801561028257600080fd5b5061028b6109cf565b60405161026d9190613a5d565b3480156102a457600080fd5b506102616102b3366004613a70565b60009081526008602052604090205460ff161590565b3480156102d557600080fd5b506102e96102e4366004613a70565b610a61565b6040516001600160a01b03909116815260200161026d565b34801561030d57600080fd5b5061023f61031c366004613aa5565b610a88565b34801561032d57600080fd5b5061026161033c366004613ba4565b610ba3565b34801561034d57600080fd5b5061026161035c366004613a70565b60009081526009602052604090205460ff161590565b34801561037e57600080fd5b50610387610bd6565b60405161026d9190613bd9565b3480156103a057600080fd5b50600c546103ab9081565b60405190815260200161026d565b3480156103c557600080fd5b5061023f6103d4366004613c21565b610c55565b3480156103e557600080fd5b506103ab61271081565b3480156103fb57600080fd5b5061023f610c86565b34801561041057600080fd5b5061023f61041f366004613c21565b610cc1565b34801561043057600080fd5b506103ab683635c9adc5dea0000081565b34801561044d57600080fd5b5061023f61045c366004613ba4565b610cdc565b34801561046d57600080fd5b50600654600160a01b900460ff16610261565b34801561048c57600080fd5b506102e961049b366004613a70565b610cf7565b3480156104ac57600080fd5b5061028b6104bb366004613a70565b610d57565b3480156104cc57600080fd5b506103ab6104db366004613c5d565b610e1f565b3480156104ec57600080fd5b5061023f610ea5565b61023f610503366004613d83565b610eb9565b34801561051457600080fd5b506006546001600160a01b03166102e9565b34801561053257600080fd5b5061028b6110cb565b34801561054757600080fd5b5061055b610556366004613a70565b6110da565b60405161026d9190613e4b565b34801561057457600080fd5b50610261610583366004613ba4565b61149d565b34801561059457600080fd5b5061023f6105a3366004613fc3565b61169e565b3480156105b457600080fd5b5061023f6116a9565b3480156105c957600080fd5b5061023f6105d8366004613ffa565b6116b9565b3480156105e957600080fd5b5061028b6105f8366004614076565b6116f1565b34801561060957600080fd5b5061028b610618366004613a70565b611b69565b34801561062957600080fd5b5061023f610638366004613a70565b611bd0565b34801561064957600080fd5b5061023f611bdd565b34801561065e57600080fd5b506103ab606481565b34801561067357600080fd5b506102616106823660046140bd565b6001600160a01b03918216600090815260056020908152604080832093909416825291909152205460ff1690565b3480156106bc57600080fd5b5061023f6106cb366004613c5d565b611bed565b3480156106dc57600080fd5b506103ab611c66565b3480156106f157600080fd5b506102616107003660046140f0565b611dbc565b61070d611e86565b600d60205260717fa5049387d9cb649c59f4bda666105ba636c2a103d8e2b232ba4d125737cd214955600e7fa48544818c2c710afa9849c61ec9c60e8acdb3eaa2885f33b37e118cc8fd04ac55603f7fb91432bedff11256dbe14161d3606a2657bc9dacf8742f6b817d871dd53fb9765560637f0b705463cf5f7356780ee6e96132d37412c1b5816a4d207b8dcd42c34976745755604c7f7b6f1ece0cbe5122a575776770f0494c2d57ed2a50e36c2ba0d811d70ee03b645560297fba9d637f252776d5e1b3534bbd7554a1265a4ef0539d9ca50abe118598a6973c5560657f52c2086a203f40e709b1346663401f6c737b2fce5878601fcf875b047fed5fb65560257fe399baa2fabbab2a0309615b124a802277bab50ec0ca3452a00889e216c4b902819055600c7fe0af3347aa7e5af384208c9d29458f902f0ceddbc90963608afa77235658b360819055602b7f154ef5b709dcdc8b49a2af6408b8a1af209c39b5fa796f03680257c97692546e5560327f52fb6a28cb3c239105f8f829bc7376f939b6bfb040c470bdc2bda0af2e784b9455600a7f01a49be1e7ea084651fd665847100d28826db0b17160863a99534933cbbd2dce557f6fbf3b49b523bc27464b7dbfa6311951351b1d3efd07aa2ee4d1ce319801a0ce5560197f0a206051e911305809ddd48cf2baa7ead2c7fb038e505e1d02f9e6c2ce72930c557f1341e158d1184a2eb4edb96b016176e1c5ad075baae6651557fb93ae3925007a55605c7fdd2af3330d298808a303a10bc360333536e7697099bb3fe7200b0c272de6655855601560005260307f35c0ef8c6f7488ebe28ad34a3af68b3aa3aea0693e227054e9ec90bd504f66d255565b60006001600160e01b031982166380ac58cd60e01b14806109ae57506001600160e01b03198216635b5e139f60e01b145b806109c957506301ffc9a760e01b6001600160e01b03198316145b92915050565b6060600080546109de90614112565b80601f0160208091040260200160405190810160405280929190818152602001828054610a0a90614112565b8015610a575780601f10610a2c57610100808354040283529160200191610a57565b820191906000526020600020905b815481529060010190602001808311610a3a57829003601f168201915b5050505050905090565b6000610a6c82611ee0565b506000908152600460205260409020546001600160a01b031690565b6000610a9382610cf7565b9050806001600160a01b0316836001600160a01b03161415610b065760405162461bcd60e51b815260206004820152602160248201527f4552433732313a20617070726f76616c20746f2063757272656e74206f776e656044820152603960f91b60648201526084015b60405180910390fd5b336001600160a01b0382161480610b225750610b228133610682565b610b945760405162461bcd60e51b815260206004820152603d60248201527f4552433732313a20617070726f76652063616c6c6572206973206e6f7420746f60448201527f6b656e206f776e6572206f7220617070726f76656420666f7220616c6c0000006064820152608401610afd565b610b9e8383611f30565b505050565b6000600b610bb083611f9e565b604051610bbd919061414d565b9081526040519081900360200190205460ff1692915050565b6060600a805480602002602001604051908101604052809291908181526020018280548015610a5757602002820191906000526020600020906000905b82829054906101000a900461ffff1661ffff1681526020019060020190602082600101049283019260010382029150808411610c135790505050505050905090565b610c5f3382612101565b610c7b5760405162461bcd60e51b8152600401610afd90614169565b610b9e83838361217f565b610c8e611e86565b6040514790339082156108fc029083906000818181858888f19350505050158015610cbd573d6000803e3d6000fd5b5050565b610b9e838383604051806020016040528060008152506116b9565b610ce4611e86565b8051610cbd90600f906020840190613939565b6000818152600260205260408120546001600160a01b0316806109c95760405162461bcd60e51b8152602060048201526018602482015277115490cdcc8c4e881a5b9d985b1a59081d1bdad95b88125160421b6044820152606401610afd565b6060610d62826122e3565b610d7e5760405162461bcd60e51b8152600401610afd906141b6565b60008281526007602052604090206001018054610d9a90614112565b80601f0160208091040260200160405190810160405280929190818152602001828054610dc690614112565b8015610e135780601f10610de857610100808354040283529160200191610e13565b820191906000526020600020905b815481529060010190602001808311610df657829003601f168201915b50505050509050919050565b60006001600160a01b038216610e895760405162461bcd60e51b815260206004820152602960248201527f4552433732313a2061646472657373207a65726f206973206e6f7420612076616044820152683634b21037bbb732b960b91b6064820152608401610afd565b506001600160a01b031660009081526003602052604090205490565b610ead611e86565b610eb76000612300565b565b610ec1612352565b6000610ecc600c5490565b9050600381101580610ee857506006546001600160a01b031633145b610f2b5760405162461bcd60e51b815260206004820152601460248201527314d85b19481a185cc81b9bdd081cdd185c9d195960621b6044820152606401610afd565b610f33611c66565b3414610f795760405162461bcd60e51b8152602060048201526015602482015274115d1a195c881d985b1d59481a5b98dbdc9c9958dd605a1b6044820152606401610afd565b610f86868686868661239f565b60006110b78787878787600080868160200201519050600a8760016020020151901b1760148760026020020151901b17601e8760036020020151901b1760288760046020020151901b1760328660006020020151901b17603c8660016020020151901b1760468660026020020151901b1760508560006020020151901b17605a8560016020020151901b1760648560026020020151901b17606e8560036020020151901b1760788560046020020151901b1760828560056020020151901b17608c8460006020020151901b1760968460016020020151901b1760a08460026020020151901b1760aa8460036020020151901b1760b48460046020020151901b1760be8460056020020151901b1760c88360006020020151901b1760d28360016020020151901b179695505050505050565b90506110c2816131d2565b50505050505050565b6060600180546109de90614112565b604080516102c081018252600080825260208201819052918101829052606081018290526080810182905260a0810182905260c0810182905260e08101829052610100810182905261012081018290526101408101829052610160810182905261018081018290526101a081018290526101c081018290526101e08101829052610200810182905261022081018290526102408101829052610260810182905261028081018290526102a0810191909152611194826122e3565b6111b05760405162461bcd60e51b8152600401610afd906141b6565b600060076000848152602001908152602001600020604051806040016040529081600082015481526020016001820180546111ea90614112565b80601f016020809104026020016040519081016040528092919081815260200182805461121690614112565b80156112635780601f1061123857610100808354040283529160200191611263565b820191906000526020600020905b81548152906001019060200180831161124657829003601f168201915b5050509190925250508151919250506103ff1661ffff168252805161128c90600a1c6103ff1690565b61ffff16602083015280516112a59060141c6103ff1690565b61ffff16604083015280516112be90601e1c6103ff1690565b61ffff16606083015280516112d79060281c6103ff1690565b61ffff16608083015280516112f09060321c6103ff1690565b61ffff1660a0830152805161130990603c1c6103ff1690565b61ffff1660c083015280516113229060461c6103ff1690565b61ffff1660e0830152805161133b9060501c6103ff1690565b61ffff16610100830152805161135590605a1c6103ff1690565b61ffff16610120830152805161136f9060641c6103ff1690565b61ffff16610140830152805161138990606e1c6103ff1690565b61ffff1661016083015280516113a39060781c6103ff1690565b61ffff1661018083015280516113bd9060821c6103ff1690565b61ffff166101a083015280516113d790608c1c6103ff1690565b61ffff166101c083015280516113f19060961c6103ff1690565b61ffff166101e0830152805161140b9060a01c6103ff1690565b61ffff1661020083015280516114259060aa1c6103ff1690565b61ffff16610220830152805161143f9060b41c6103ff1690565b61ffff1661024083015280516114599060be1c6103ff1690565b61ffff1661026083015280516114739060c81c6103ff1690565b61ffff16610280830152805161148d9060d21c6103ff1690565b61ffff166102a083015250919050565b6000808290506001815110806114b4575060208151115b156114c25750600092915050565b806000815181106114d5576114d56141e1565b6020910101516001600160f81b031916600160fd1b148061152757508060018251611500919061420d565b81518110611510576115106141e1565b6020910101516001600160f81b031916600160fd1b145b156115355750600092915050565b60008160008151811061154a5761154a6141e1565b01602001516001600160f81b031916905060005b825181101561169357600083828151811061157b5761157b6141e1565b01602001516001600160f81b0319169050600160fd1b811480156115ac5750600160fd1b6001600160f81b03198416145b156115bd5750600095945050505050565b600360fc1b6001600160f81b03198216108015906115e95750603960f81b6001600160f81b0319821611155b15801561161f5750604160f81b6001600160f81b031982161080159061161d5750602d60f91b6001600160f81b0319821611155b155b80156116545750606160f81b6001600160f81b03198216108015906116525750603d60f91b6001600160f81b0319821611155b155b801561166e5750600160fd1b6001600160f81b0319821614155b1561167f5750600095945050505050565b91508061168b81614224565b91505061155e565b506001949350505050565b610cbd3383836132c7565b6116b1611e86565b610eb7613396565b6116c33383612101565b6116df5760405162461bcd60e51b8152600401610afd90614169565b6116eb848484846133eb565b50505050565b60606116fc836122e3565b6117185760405162461bcd60e51b8152600401610afd906141b6565b6117223384612101565b61176e5760405162461bcd60e51b815260206004820181905260248201527f43616c6c6572206973206e6f74206f776e6572206e6f7220617070726f7665646044820152606401610afd565b6000838152600760205260408120600101805461178a90614112565b80601f01602080910402602001604051908101604052809291908181526020018280546117b690614112565b80156118035780601f106117d857610100808354040283529160200191611803565b820191906000526020600020905b8154815290600101906020018083116117e657829003601f168201915b5050505050905060028160405161181a919061414d565b602060405180830381855afa158015611837573d6000803e3d6000fd5b5050506040513d601f19601f8201168201806040525081019061185a919061423f565b60028460405161186a919061414d565b602060405180830381855afa158015611887573d6000803e3d6000fd5b5050506040513d601f19601f820116820180604052508101906118aa919061423f565b14156118f85760405162461bcd60e51b815260206004820152601f60248201527f4e6577206e616d6520616e64206f6c64206e616d652061726520657175616c006044820152606401610afd565b6119018361149d565b6119435760405162461bcd60e51b815260206004820152601360248201527213985b59481a5cc81b9bdd08185b1b1bddd959606a1b6044820152606401610afd565b61194c83610ba3565b156119915760405162461bcd60e51b815260206004820152601560248201527413985b5948185b1c9958591e481c995cd95c9d9959605a1b6044820152606401610afd565b6001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000166379cc6790336040516001600160e01b031960e084901b1681526001600160a01b039091166004820152683635c9adc5dea000006024820152604401600060405180830381600087803b158015611a1157600080fd5b505af1158015611a25573d6000803e3d6000fd5b5050506000858152600760205260408120600101805491925090611a4890614112565b90501115611af65760008481526007602052604090206001018054611af69190611a7190614112565b80601f0160208091040260200160405190810160405280929190818152602001828054611a9d90614112565b8015611aea5780601f10611abf57610100808354040283529160200191611aea565b820191906000526020600020905b815481529060010190602001808311611acd57829003601f168201915b5050505050600061341e565b611b0183600161341e565b60008481526007602090815260409091208451611b2692600190920191860190613939565b50837f8eff5208043d31f23e348dc06be3a80821505e5b3e0002e9fa1185f5d47eac598285604051611b59929190614258565b60405180910390a2509092915050565b6060611b7482611ee0565b6000611b7e61345b565b90506000815111611b9e5760405180602001604052806000815250611bc9565b80611ba88461346a565b604051602001611bb9929190614286565b6040516020818303038152906040525b9392505050565b611bd8611e86565b600e55565b611be5611e86565b610eb76134ff565b611bf5611e86565b6001600160a01b038116611c5a5760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b6064820152608401610afd565b611c6381612300565b50565b600080611c72600c5490565b9050611c81606461271061420d565b811080611ca457506006546001600160a01b031633148015611ca4575061271081105b611ce95760405162461bcd60e51b815260206004820152601660248201527514d85b19481a185cc8185b1c9958591e48195b99195960521b6044820152606401610afd565b6006546001600160a01b0316331415611d0457600091505090565b67011c37937e080000600e5410611d1d575050600e5490565b61251c8110611d35576703e2c284391c000091505090565b6121348110611d4d576703782dace9d9000091505090565b6119648110611d655767030d98d59a96000091505090565b6111948110611d7d576702a303fe4b53000091505090565b6109c48110611d95576702386f26fc10000091505090565b6103e88110611dad576701cdda4faccd000091505090565b67016345785d8a000091505090565b600081611dcb575060016109c9565b60968210611dec575060008181526009602052604090205460ff16156109c9565b60405163968ef8f560e01b815260048101849052602481018390527f0000000000000000000000000000000000000000000000000000000000000000906001600160a01b0382169063968ef8f590604401602060405180830381865afa158015611e5a573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611e7e91906142b5565b949350505050565b6006546001600160a01b03163314610eb75760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152606401610afd565b611ee9816122e3565b611c635760405162461bcd60e51b8152602060048201526018602482015277115490cdcc8c4e881a5b9d985b1a59081d1bdad95b88125160421b6044820152606401610afd565b600081815260046020526040902080546001600160a01b0319166001600160a01b0384169081179091558190611f6582610cf7565b6001600160a01b03167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92560405160405180910390a45050565b606060008290506000815167ffffffffffffffff811115611fc157611fc1613acf565b6040519080825280601f01601f191660200182016040528015611feb576020820181803683370190505b50905060005b82518110156120f957604183828151811061200e5761200e6141e1565b016020015160f81c1080159061203e5750605a838281518110612033576120336141e1565b016020015160f81c11155b156120a057828181518110612055576120556141e1565b602001015160f81c60f81b60f81c602061206f91906142d2565b60f81b828281518110612084576120846141e1565b60200101906001600160f81b031916908160001a9053506120e7565b8281815181106120b2576120b26141e1565b602001015160f81c60f81b8282815181106120cf576120cf6141e1565b60200101906001600160f81b031916908160001a9053505b806120f181614224565b915050611ff1565b509392505050565b60008061210d83610cf7565b9050806001600160a01b0316846001600160a01b0316148061215457506001600160a01b0380821660009081526005602090815260408083209388168352929052205460ff165b80611e7e5750836001600160a01b031661216d84610a61565b6001600160a01b031614949350505050565b826001600160a01b031661219282610cf7565b6001600160a01b0316146121b85760405162461bcd60e51b8152600401610afd906142f7565b6001600160a01b03821661221a5760405162461bcd60e51b8152602060048201526024808201527f4552433732313a207472616e7366657220746f20746865207a65726f206164646044820152637265737360e01b6064820152608401610afd565b826001600160a01b031661222d82610cf7565b6001600160a01b0316146122535760405162461bcd60e51b8152600401610afd906142f7565b600081815260046020908152604080832080546001600160a01b03199081169091556001600160a01b0387811680865260038552838620805460001901905590871680865283862080546001019055868652600290945282852080549092168417909155905184937fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef91a4505050565b6000908152600260205260409020546001600160a01b0316151590565b600680546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b600654600160a01b900460ff1615610eb75760405162461bcd60e51b815260206004820152601060248201526f14185d5cd8589b194e881c185d5cd95960821b6044820152606401610afd565b845180158015906123d157506006811115806123d15750600981111580156123d157506006546001600160a01b031633145b61240f5760405162461bcd60e51b815260206004820152600f60248201526e151c9a5899481a5b98dbdc9c9958dd608a1b6044820152606401610afd565b602086015161242190600a6045613542565b8061243c575061243c8660015b602002015160776095613542565b61247f5760405162461bcd60e51b815260206004820152601460248201527314dada5b8818dbdb1bdc881a5b98dbdc9c9958dd60621b6044820152606401610afd565b60408601516124919060466064613542565b806124a257506124a286600261242e565b6124e45760405162461bcd60e51b8152602060048201526013602482015272119d5c8818dbdb1bdc881a5b98dbdc9c9958dd606a1b6044820152606401610afd565b60608601516124f6906065606d613542565b80612507575061250786600361242e565b6125495760405162461bcd60e51b8152602060048201526013602482015272115e594818dbdb1bdc881a5b98dbdc9c9958dd606a1b6044820152606401610afd565b608086015161255b90606e6076613542565b8061256c575061256c86600461242e565b6125b05760405162461bcd60e51b8152602060048201526015602482015274141d5c1a5b0818dbdb1bdc881a5b98dbdc9c9958dd605a1b6044820152606401610afd565b84516125c0906096610106613542565b6125fd5760405162461bcd60e51b815260206004820152600e60248201526d12185a5c881a5b98dbdc9c9958dd60921b6044820152606401610afd565b602085015161261190610107610114613542565b61264f5760405162461bcd60e51b815260206004820152600f60248201526e135bdd5d1a081a5b98dbdc9c9958dd608a1b6044820152606401610afd565b604085015161266390610115610153613542565b6126a15760405162461bcd60e51b815260206004820152600f60248201526e1099585c99081a5b98dbdc9c9958dd608a1b6044820152606401610afd565b83516126b2906101546101b6613542565b6126ee5760405162461bcd60e51b815260206004820152600d60248201526c151bdc081a5b98dbdc9c9958dd609a1b6044820152606401610afd565b6020840151612702906101b7610202613542565b6127445760405162461bcd60e51b815260206004820152601360248201527213dd5d195c9dd9585c881a5b98dbdc9c9958dd606a1b6044820152606401610afd565b60408401516127589061020361022b613542565b6127965760405162461bcd60e51b815260206004820152600f60248201526e141c9a5b9d081a5b98dbdc9c9958dd608a1b6044820152606401610afd565b60608401516127aa9061022c610291613542565b6127e95760405162461bcd60e51b815260206004820152601060248201526f109bdd1d1bdb481a5b98dbdc9c9958dd60821b6044820152606401610afd565b60808401516127fd906102926102b6613542565b61283e5760405162461bcd60e51b8152602060048201526012602482015271119bdbdd1dd9585c881a5b98dbdc9c9958dd60721b6044820152606401610afd565b60a0840151612852906102b76102c2613542565b61288f5760405162461bcd60e51b815260206004820152600e60248201526d10995b1d081a5b98dbdc9c9958dd60921b6044820152606401610afd565b82516128a0906102c36102ed613542565b6128dc5760405162461bcd60e51b815260206004820152600d60248201526c12185d081a5b98dbdc9c9958dd609a1b6044820152606401610afd565b60208301516128f0906102ee61031f613542565b6129305760405162461bcd60e51b8152602060048201526011602482015270115e595dd9585c881a5b98dbdc9c9958dd607a1b6044820152606401610afd565b604083015161294490610320610329613542565b6129855760405162461bcd60e51b8152602060048201526012602482015271141a595c98da5b99c81a5b98dbdc9c9958dd60721b6044820152606401610afd565b60608301516129999061032a610335613542565b6129e55760405162461bcd60e51b815260206004820152601960248201527f5772697374206163636573736f727920696e636f7272656374000000000000006044820152606401610afd565b60808301516129f99061033661034e613542565b612a455760405162461bcd60e51b815260206004820152601960248201527f48616e6473206163636573736f727920696e636f7272656374000000000000006044820152606401610afd565b60a0830151612a599061034f610373613542565b612a9a5760405162461bcd60e51b8152602060048201526012602482015271139958daddd9585c881a5b98dbdc9c9958dd60721b6044820152606401610afd565b8151612aab906103746103cf613542565b612aed5760405162461bcd60e51b81526020600482015260136024820152721319599d081a5d195b481a5b98dbdc9c9958dd606a1b6044820152606401610afd565b6020820151612b01906103d06103ff613542565b612b445760405162461bcd60e51b8152602060048201526014602482015273149a59da1d081a5d195b481a5b98dbdc9c9958dd60621b6044820152606401610afd565b612b56818760015b6020020151611dbc565b612b9b5760405162461bcd60e51b8152602060048201526016602482015275536b696e20636f6c6f7220756e617661696c61626c6560501b6044820152606401610afd565b612ba781876002612b4c565b612beb5760405162461bcd60e51b815260206004820152601560248201527446757220636f6c6f7220756e617661696c61626c6560581b6044820152606401610afd565b612bf781876003612b4c565b612c3b5760405162461bcd60e51b815260206004820152601560248201527445796520636f6c6f7220756e617661696c61626c6560581b6044820152606401610afd565b612c4781876004612b4c565b612c935760405162461bcd60e51b815260206004820152601760248201527f507570696c20636f6c6f7220756e617661696c61626c650000000000000000006044820152606401610afd565b612c9f81866000612b4c565b612cde5760405162461bcd60e51b815260206004820152601060248201526f4861697220756e617661696c61626c6560801b6044820152606401610afd565b612cea81866001612b4c565b612d2a5760405162461bcd60e51b81526020600482015260116024820152704d6f75746820756e617661696c61626c6560781b6044820152606401610afd565b612d3681866002612b4c565b612d765760405162461bcd60e51b8152602060048201526011602482015270426561726420756e617661696c61626c6560781b6044820152606401610afd565b612d8281856000612b4c565b612dc05760405162461bcd60e51b815260206004820152600f60248201526e546f7020756e617661696c61626c6560881b6044820152606401610afd565b612dcc81856001612b4c565b612e105760405162461bcd60e51b81526020600482015260156024820152744f757465727765617220756e617661696c61626c6560581b6044820152606401610afd565b612e1c81856002612b4c565b612e5c5760405162461bcd60e51b81526020600482015260116024820152705072696e7420756e617661696c61626c6560781b6044820152606401610afd565b612e6881856003612b4c565b612ea95760405162461bcd60e51b8152602060048201526012602482015271426f74746f6d20756e617661696c61626c6560701b6044820152606401610afd565b612eb581856004612b4c565b612ef85760405162461bcd60e51b8152602060048201526014602482015273466f6f747765617220756e617661696c61626c6560601b6044820152606401610afd565b612f0481856005612b4c565b612f435760405162461bcd60e51b815260206004820152601060248201526f42656c7420756e617661696c61626c6560801b6044820152606401610afd565b612f4f81846000612b4c565b612f8d5760405162461bcd60e51b815260206004820152600f60248201526e48617420756e617661696c61626c6560881b6044820152606401610afd565b612f9981846001612b4c565b612fdb5760405162461bcd60e51b81526020600482015260136024820152724579657765617220756e617661696c61626c6560681b6044820152606401610afd565b612fe781846002612b4c565b61302a5760405162461bcd60e51b81526020600482015260146024820152735069657263696e6720756e617661696c61626c6560601b6044820152606401610afd565b61303681846003612b4c565b6130825760405162461bcd60e51b815260206004820152601b60248201527f5772697374206163636573736f727920756e617661696c61626c6500000000006044820152606401610afd565b61308e81846004612b4c565b6130da5760405162461bcd60e51b815260206004820152601a60248201527f48616e64206163636573736f727920756e617661696c61626c650000000000006044820152606401610afd565b6130e681846005612b4c565b6131295760405162461bcd60e51b81526020600482015260146024820152734e65636b7765617220756e617661696c61626c6560601b6044820152606401610afd565b61313581836000612b4c565b6131795760405162461bcd60e51b81526020600482015260156024820152744c656674206974656d20756e617661696c61626c6560581b6044820152606401610afd565b61318581836001612b4c565b6131ca5760405162461bcd60e51b81526020600482015260166024820152755269676874206974656d20756e617661696c61626c6560501b6044820152606401610afd565b505050505050565b60008181526008602052604090205460ff16156132315760405162461bcd60e51b815260206004820152601e60248201527f4e465420747261697420636f6d626f20616c72656164792065786973747300006044820152606401610afd565b6000818152600860205260409020805460ff19166001179055613258600c80546001019055565b6000613263600c5490565b9050613282604051806040016040528060008152602001606081525090565b82815260008281526007602090815260409091208251815581830151805184936132b3926001850192910190613939565b50905050610b9e6132c13390565b83613561565b816001600160a01b0316836001600160a01b031614156133295760405162461bcd60e51b815260206004820152601960248201527f4552433732313a20617070726f766520746f2063616c6c6572000000000000006044820152606401610afd565b6001600160a01b03838116600081815260056020908152604080832094871680845294825291829020805460ff191686151590811790915591519182527f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31910160405180910390a3505050565b61339e61357b565b6006805460ff60a01b191690557f5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa335b6040516001600160a01b03909116815260200160405180910390a1565b6133f684848461217f565b613402848484846135cb565b6116eb5760405162461bcd60e51b8152600401610afd9061433c565b80600b61342a84611f9e565b604051613437919061414d565b908152604051908190036020019020805491151560ff199092169190911790555050565b6060600f80546109de90614112565b60606000613477836136c1565b600101905060008167ffffffffffffffff81111561349757613497613acf565b6040519080825280601f01601f1916602001820160405280156134c1576020820181803683370190505b5090508181016020015b600019016f181899199a1a9b1b9c1cb0b131b232b360811b600a86061a8153600a85049450846134fa576120f9565b6134cb565b613507612352565b6006805460ff60a01b1916600160a01b1790557f62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a2586133ce3390565b6000831580611e7e5750828410158015611e7e57505090911115919050565b610cbd828260405180602001604052806000815250613799565b600654600160a01b900460ff16610eb75760405162461bcd60e51b815260206004820152601460248201527314185d5cd8589b194e881b9bdd081c185d5cd95960621b6044820152606401610afd565b60006001600160a01b0384163b1561169357604051630a85bd0160e11b81526001600160a01b0385169063150b7a029061360f90339089908890889060040161438e565b6020604051808303816000875af192505050801561364a575060408051601f3d908101601f19168201909252613647918101906143cb565b60015b6136a4573d808015613678576040519150601f19603f3d011682016040523d82523d6000602084013e61367d565b606091505b50805161369c5760405162461bcd60e51b8152600401610afd9061433c565b805181602001fd5b6001600160e01b031916630a85bd0160e11b149050949350505050565b60008072184f03e93ff9f4daa797ed6e38ed64bf6a1f0160401b83106137005772184f03e93ff9f4daa797ed6e38ed64bf6a1f0160401b830492506040015b6d04ee2d6d415b85acef8100000000831061372c576d04ee2d6d415b85acef8100000000830492506020015b662386f26fc10000831061374a57662386f26fc10000830492506010015b6305f5e1008310613762576305f5e100830492506008015b612710831061377657612710830492506004015b60648310613788576064830492506002015b600a83106109c95760010192915050565b6137a383836137cc565b6137b060008484846135cb565b610b9e5760405162461bcd60e51b8152600401610afd9061433c565b6001600160a01b0382166138225760405162461bcd60e51b815260206004820181905260248201527f4552433732313a206d696e7420746f20746865207a65726f20616464726573736044820152606401610afd565b61382b816122e3565b156138785760405162461bcd60e51b815260206004820152601c60248201527f4552433732313a20746f6b656e20616c7265616479206d696e746564000000006044820152606401610afd565b613881816122e3565b156138ce5760405162461bcd60e51b815260206004820152601c60248201527f4552433732313a20746f6b656e20616c7265616479206d696e746564000000006044820152606401610afd565b6001600160a01b038216600081815260036020908152604080832080546001019055848352600290915280822080546001600160a01b0319168417905551839291907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef908290a45050565b82805461394590614112565b90600052602060002090601f01602090048101928261396757600085556139ad565b82601f1061398057805160ff19168380011785556139ad565b828001600101855582156139ad579182015b828111156139ad578251825591602001919060010190613992565b506139b99291506139bd565b5090565b5b808211156139b957600081556001016139be565b6001600160e01b031981168114611c6357600080fd5b6000602082840312156139fa57600080fd5b8135611bc9816139d2565b60005b83811015613a20578181015183820152602001613a08565b838111156116eb5750506000910152565b60008151808452613a49816020860160208601613a05565b601f01601f19169290920160200192915050565b602081526000611bc96020830184613a31565b600060208284031215613a8257600080fd5b5035919050565b80356001600160a01b0381168114613aa057600080fd5b919050565b60008060408385031215613ab857600080fd5b613ac183613a89565b946020939093013593505050565b634e487b7160e01b600052604160045260246000fd5b60405160a0810167ffffffffffffffff81118282101715613b0857613b08613acf565b60405290565b600067ffffffffffffffff80841115613b2957613b29613acf565b604051601f8501601f19908116603f01168101908282118183101715613b5157613b51613acf565b81604052809350858152868686011115613b6a57600080fd5b858560208301376000602087830101525050509392505050565b600082601f830112613b9557600080fd5b611bc983833560208501613b0e565b600060208284031215613bb657600080fd5b813567ffffffffffffffff811115613bcd57600080fd5b611e7e84828501613b84565b6020808252825182820181905260009190848201906040850190845b81811015613c1557835161ffff1683529284019291840191600101613bf5565b50909695505050505050565b600080600060608486031215613c3657600080fd5b613c3f84613a89565b9250613c4d60208501613a89565b9150604084013590509250925092565b600060208284031215613c6f57600080fd5b611bc982613a89565b60006040516060810181811067ffffffffffffffff82111715613c9d57613c9d613acf565b6040529050806060830184811115613cb457600080fd5b835b81811015613cce578035835260209283019201613cb6565b50505092915050565b60006040516040810181811067ffffffffffffffff82111715613cfc57613cfc613acf565b80604052508091506040830184811115613cb457600080fd5b600082601f830112613d2657600080fd5b60405160c0810181811067ffffffffffffffff82111715613d4957613d49613acf565b6040528060c0840185811115613d5e57600080fd5b845b81811015613d78578035835260209283019201613d60565b509195945050505050565b60008060008060006102c08688031215613d9c57600080fd5b86601f870112613dab57600080fd5b613db3613ae5565b8060a0880189811115613dc557600080fd5b885b81811015613ddf578035845260209384019301613dc7565b508197508960bf8a0112613df257600080fd5b613dfc8a82613c78565b9650505050613e0f876101008801613d15565b9250613e1f876101c08801613d15565b91508661029f870112613e3157600080fd5b613e3f876102808801613cd7565b90509295509295909350565b815161ffff1681526102c081016020830151613e6d602084018261ffff169052565b506040830151613e83604084018261ffff169052565b506060830151613e99606084018261ffff169052565b506080830151613eaf608084018261ffff169052565b5060a0830151613ec560a084018261ffff169052565b5060c0830151613edb60c084018261ffff169052565b5060e0830151613ef160e084018261ffff169052565b506101008381015161ffff90811691840191909152610120808501518216908401526101408085015182169084015261016080850151821690840152610180808501518216908401526101a0808501518216908401526101c0808501518216908401526101e08085015182169084015261020080850151821690840152610220808501518216908401526102408085015182169084015261026080850151821690840152610280808501518216908401526102a09384015116929091019190915290565b8015158114611c6357600080fd5b60008060408385031215613fd657600080fd5b613fdf83613a89565b91506020830135613fef81613fb5565b809150509250929050565b6000806000806080858703121561401057600080fd5b61401985613a89565b935061402760208601613a89565b925060408501359150606085013567ffffffffffffffff81111561404a57600080fd5b8501601f8101871361405b57600080fd5b61406a87823560208401613b0e565b91505092959194509250565b6000806040838503121561408957600080fd5b82359150602083013567ffffffffffffffff8111156140a757600080fd5b6140b385828601613b84565b9150509250929050565b600080604083850312156140d057600080fd5b6140d983613a89565b91506140e760208401613a89565b90509250929050565b6000806040838503121561410357600080fd5b50508035926020909101359150565b600181811c9082168061412657607f821691505b6020821081141561414757634e487b7160e01b600052602260045260246000fd5b50919050565b6000825161415f818460208701613a05565b9190910192915050565b6020808252602d908201527f4552433732313a2063616c6c6572206973206e6f7420746f6b656e206f776e6560408201526c1c881bdc88185c1c1c9bdd9959609a1b606082015260800190565b6020808252601190820152703737b732bc34b9ba32b73a103a37b5b2b760791b604082015260600190565b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052601160045260246000fd5b60008282101561421f5761421f6141f7565b500390565b6000600019821415614238576142386141f7565b5060010190565b60006020828403121561425157600080fd5b5051919050565b60408152600061426b6040830185613a31565b828103602084015261427d8185613a31565b95945050505050565b60008351614298818460208801613a05565b8351908301906142ac818360208801613a05565b01949350505050565b6000602082840312156142c757600080fd5b8151611bc981613fb5565b600060ff821660ff84168060ff038211156142ef576142ef6141f7565b019392505050565b60208082526025908201527f4552433732313a207472616e736665722066726f6d20696e636f72726563742060408201526437bbb732b960d91b606082015260800190565b60208082526032908201527f4552433732313a207472616e7366657220746f206e6f6e20455243373231526560408201527131b2b4bb32b91034b6b83632b6b2b73a32b960711b606082015260800190565b6001600160a01b03858116825284166020820152604081018390526080606082018190526000906143c190830184613a31565b9695505050505050565b6000602082840312156143dd57600080fd5b8151611bc9816139d256fea2646970667358221220a42911da85756b5c9f225e3d04d622d164697eda1447572b7e2c232fa5af42a564736f6c634300080b0033",
  "devdoc": {
    "details": "Extends NameableCharacter and NiftyLeagueCharacter (ERC721)",
    "kind": "dev",
    "methods": {
      "approve(address,uint256)": {
        "details": "See {IERC721-approve}."
      },
      "balanceOf(address)": {
        "details": "See {IERC721-balanceOf}."
      },
      "changeName(uint256,string)": {
        "params": {
          "newName": "New name to validate and set on NFT",
          "tokenId": "ID of NFT"
        },
        "returns": {
          "_0": "New NFT name"
        }
      },
      "constructor": {
        "params": {
          "nftlAddress": "Address of verified Nifty League NFTL contract",
          "storageAddress": "Address of verified Allowed Colors Storage"
        }
      },
      "getApproved(uint256)": {
        "details": "See {IERC721-getApproved}."
      },
      "getCharacterTraits(uint256)": {
        "details": "Permissioning not added because it is only callable once.",
        "params": {
          "tokenId": "ID of NFT"
        },
        "returns": {
          "_characterTraits": "- indexed list of character traits"
        }
      },
      "getNFTPrice()": {
        "returns": {
          "_0": "Current price to mint 1 NFT"
        }
      },
      "getName(uint256)": {
        "params": {
          "tokenId": "ID of NFT"
        },
        "returns": {
          "_0": "NFT name"
        }
      },
      "getRemovedTraits()": {
        "returns": {
          "_0": "removedTraits - list of unavailable character traits"
        }
      },
      "initPoolSizes()": {
        "details": "Unable to init mapping at declaration :/"
      },
      "isApprovedForAll(address,address)": {
        "details": "See {IERC721-isApprovedForAll}."
      },
      "isAvailableAndAllowedTrait(uint256,uint256)": {
        "details": "Trait types are restricted per tribe before deploy in AllowedColorsStorage",
        "params": {
          "trait": "Trait ID",
          "tribe": "Tribe ID"
        },
        "returns": {
          "_0": "True if trait is available and allowed for tribe"
        }
      },
      "isAvailableTrait(uint256)": {
        "params": {
          "trait": "ID of trait"
        },
        "returns": {
          "_0": "True if trait has not been removed"
        }
      },
      "isNameReserved(string)": {
        "params": {
          "nameString": "Name to validate"
        },
        "returns": {
          "_0": "True if name is unique"
        }
      },
      "isUnique(uint256)": {
        "params": {
          "traitCombo": "Generated trait combo packed into uint256"
        },
        "returns": {
          "_0": "True if combo is unique and available"
        }
      },
      "name()": {
        "details": "See {IERC721Metadata-name}."
      },
      "overrideMintPrice(uint256)": {
        "details": "Minimum value of 0.08 ETH for this to be considered in getNFTPrice",
        "params": {
          "newPrice": "New price to set for remaining character sale"
        }
      },
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "ownerOf(uint256)": {
        "details": "See {IERC721-ownerOf}."
      },
      "pauseMinting()": {
        "details": "Requirements: The contract must not be paused"
      },
      "paused()": {
        "details": "Returns true if the contract is paused, and false otherwise."
      },
      "purchase(uint256[5],uint256[3],uint256[6],uint256[6],uint256[2])": {
        "details": "Order is based on character selector indexes",
        "params": {
          "accessories": "Indexed list of accessories",
          "character": "Indexed list of character traits",
          "clothing": "Indexed list of clothing options",
          "head": "Indexed list of head traits",
          "items": "Indexed list of items"
        }
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner."
      },
      "safeTransferFrom(address,address,uint256)": {
        "details": "See {IERC721-safeTransferFrom}."
      },
      "safeTransferFrom(address,address,uint256,bytes)": {
        "details": "See {IERC721-safeTransferFrom}."
      },
      "setApprovalForAll(address,bool)": {
        "details": "See {IERC721-setApprovalForAll}."
      },
      "setBaseURI(string)": {
        "params": {
          "baseURI": "New base URI for NFT metadata"
        }
      },
      "supportsInterface(bytes4)": {
        "details": "See {IERC165-supportsInterface}."
      },
      "symbol()": {
        "details": "See {IERC721Metadata-symbol}."
      },
      "tokenURI(uint256)": {
        "details": "See {IERC721Metadata-tokenURI}."
      },
      "transferFrom(address,address,uint256)": {
        "details": "See {IERC721-transferFrom}."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      },
      "unpauseMinting()": {
        "details": "Requirements: The contract must be paused"
      },
      "validateName(string)": {
        "params": {
          "newName": "Name to validate"
        },
        "returns": {
          "_0": "True if name input is valid"
        }
      }
    },
    "stateVariables": {
      "_baseTokenUri": {
        "details": "Base URI used for token metadata"
      },
      "_manualMintPrice": {
        "details": "Set if we want to override semi-fomo ramp pricing"
      },
      "_originalPoolSizes": {
        "details": "Mapping trait indexes to pool size of available traits"
      },
      "_storageAddress": {
        "details": "Available traits storage address"
      }
    },
    "title": "NiftyDegen NFT (The OG NFTs of the Nifty League on Ethereum)",
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "MAX_SUPPLY()": {
        "notice": "Max number of mintable characters"
      },
      "NAME_CHANGE_PRICE()": {
        "notice": "Cost to change character name in NFTL"
      },
      "SPECIAL_CHARACTERS()": {
        "notice": "Special characters reserved for future giveaways"
      },
      "changeName(uint256,string)": {
        "notice": "Change name of NFT payable with {NAME_CHANGE_PRICE} NFTL"
      },
      "constructor": {
        "notice": "Construct the Nifty League NFTs"
      },
      "getCharacterTraits(uint256)": {
        "notice": "Retrieve a list of character traits for a token"
      },
      "getNFTPrice()": {
        "notice": "Gets current NFT Price based on current supply"
      },
      "getName(uint256)": {
        "notice": "Retrieve name of token"
      },
      "getRemovedTraits()": {
        "notice": "Retrieve a list of removed character traits"
      },
      "initPoolSizes()": {
        "notice": "Set pool size for each trait index called on deploy"
      },
      "isAvailableAndAllowedTrait(uint256,uint256)": {
        "notice": "Check if traits is allowed for tribe and hasn't been removed yet"
      },
      "isAvailableTrait(uint256)": {
        "notice": "Check whether trait is still available"
      },
      "isNameReserved(string)": {
        "notice": "Check if name is already reserved"
      },
      "isUnique(uint256)": {
        "notice": "Check whether trait combo is unique"
      },
      "overrideMintPrice(uint256)": {
        "notice": "Fallback to set NFT price to static ether value if necessary"
      },
      "pauseMinting()": {
        "notice": "Triggers stopped state"
      },
      "purchase(uint256[5],uint256[3],uint256[6],uint256[6],uint256[2])": {
        "notice": "Validate character traits and purchase a Nifty Degen NFT"
      },
      "setBaseURI(string)": {
        "notice": "Option to set _baseUri for transfering Heroku to IPFS"
      },
      "totalSupply()": {
        "notice": "Counter for number of minted characters"
      },
      "unpauseMinting()": {
        "notice": "Returns to normal state"
      },
      "validateName(string)": {
        "notice": "Check for valid name string (Alphanumeric and spaces without leading or trailing space)"
      },
      "withdraw()": {
        "notice": "Withdraw ether from this contract (Callable by owner)"
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 324,
        "contract": "src/contracts/NiftyDegen.sol:NiftyDegen",
        "label": "_name",
        "offset": 0,
        "slot": "0",
        "type": "t_string_storage"
      },
      {
        "astId": 326,
        "contract": "src/contracts/NiftyDegen.sol:NiftyDegen",
        "label": "_symbol",
        "offset": 0,
        "slot": "1",
        "type": "t_string_storage"
      },
      {
        "astId": 330,
        "contract": "src/contracts/NiftyDegen.sol:NiftyDegen",
        "label": "_owners",
        "offset": 0,
        "slot": "2",
        "type": "t_mapping(t_uint256,t_address)"
      },
      {
        "astId": 334,
        "contract": "src/contracts/NiftyDegen.sol:NiftyDegen",
        "label": "_balances",
        "offset": 0,
        "slot": "3",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 338,
        "contract": "src/contracts/NiftyDegen.sol:NiftyDegen",
        "label": "_tokenApprovals",
        "offset": 0,
        "slot": "4",
        "type": "t_mapping(t_uint256,t_address)"
      },
      {
        "astId": 344,
        "contract": "src/contracts/NiftyDegen.sol:NiftyDegen",
        "label": "_operatorApprovals",
        "offset": 0,
        "slot": "5",
        "type": "t_mapping(t_address,t_mapping(t_address,t_bool))"
      },
      {
        "astId": 7,
        "contract": "src/contracts/NiftyDegen.sol:NiftyDegen",
        "label": "_owner",
        "offset": 0,
        "slot": "6",
        "type": "t_address"
      },
      {
        "astId": 130,
        "contract": "src/contracts/NiftyDegen.sol:NiftyDegen",
        "label": "_paused",
        "offset": 20,
        "slot": "6",
        "type": "t_bool"
      },
      {
        "astId": 4851,
        "contract": "src/contracts/NiftyDegen.sol:NiftyDegen",
        "label": "_characters",
        "offset": 0,
        "slot": "7",
        "type": "t_mapping(t_uint256,t_struct(Character)4800_storage)"
      },
      {
        "astId": 4860,
        "contract": "src/contracts/NiftyDegen.sol:NiftyDegen",
        "label": "_existMap",
        "offset": 0,
        "slot": "8",
        "type": "t_mapping(t_uint256,t_bool)"
      },
      {
        "astId": 4865,
        "contract": "src/contracts/NiftyDegen.sol:NiftyDegen",
        "label": "_removedTraitsMap",
        "offset": 0,
        "slot": "9",
        "type": "t_mapping(t_uint256,t_bool)"
      },
      {
        "astId": 4869,
        "contract": "src/contracts/NiftyDegen.sol:NiftyDegen",
        "label": "removedTraits",
        "offset": 0,
        "slot": "10",
        "type": "t_array(t_uint16)dyn_storage"
      },
      {
        "astId": 3182,
        "contract": "src/contracts/NiftyDegen.sol:NiftyDegen",
        "label": "_nameReserved",
        "offset": 0,
        "slot": "11",
        "type": "t_mapping(t_string_memory_ptr,t_bool)"
      },
      {
        "astId": 3586,
        "contract": "src/contracts/NiftyDegen.sol:NiftyDegen",
        "label": "totalSupply",
        "offset": 0,
        "slot": "12",
        "type": "t_struct(Counter)1752_storage"
      },
      {
        "astId": 3602,
        "contract": "src/contracts/NiftyDegen.sol:NiftyDegen",
        "label": "_originalPoolSizes",
        "offset": 0,
        "slot": "13",
        "type": "t_mapping(t_uint256,t_uint256)"
      },
      {
        "astId": 3605,
        "contract": "src/contracts/NiftyDegen.sol:NiftyDegen",
        "label": "_manualMintPrice",
        "offset": 0,
        "slot": "14",
        "type": "t_uint256"
      },
      {
        "astId": 3609,
        "contract": "src/contracts/NiftyDegen.sol:NiftyDegen",
        "label": "_baseTokenUri",
        "offset": 0,
        "slot": "15",
        "type": "t_string_storage"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_uint16)dyn_storage": {
        "base": "t_uint16",
        "encoding": "dynamic_array",
        "label": "uint16[]",
        "numberOfBytes": "32"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_address,t_mapping(t_address,t_bool))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(address => bool))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_bool)"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_string_memory_ptr,t_bool)": {
        "encoding": "mapping",
        "key": "t_string_memory_ptr",
        "label": "mapping(string => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_uint256,t_address)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => address)",
        "numberOfBytes": "32",
        "value": "t_address"
      },
      "t_mapping(t_uint256,t_bool)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_uint256,t_struct(Character)4800_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct NiftyLeagueCharacter.Character)",
        "numberOfBytes": "32",
        "value": "t_struct(Character)4800_storage"
      },
      "t_mapping(t_uint256,t_uint256)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_string_memory_ptr": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_struct(Character)4800_storage": {
        "encoding": "inplace",
        "label": "struct NiftyLeagueCharacter.Character",
        "members": [
          {
            "astId": 4797,
            "contract": "src/contracts/NiftyDegen.sol:NiftyDegen",
            "label": "traits",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 4799,
            "contract": "src/contracts/NiftyDegen.sol:NiftyDegen",
            "label": "name",
            "offset": 0,
            "slot": "1",
            "type": "t_string_storage"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_struct(Counter)1752_storage": {
        "encoding": "inplace",
        "label": "struct Counters.Counter",
        "members": [
          {
            "astId": 1751,
            "contract": "src/contracts/NiftyDegen.sol:NiftyDegen",
            "label": "_value",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "32"
      },
      "t_uint16": {
        "encoding": "inplace",
        "label": "uint16",
        "numberOfBytes": "2"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}