{
  "address": "0x04301173892453559083C92B62a12A23aD55E646",
  "abi": [
    {
      "inputs": [],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tribe",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "color",
          "type": "uint256"
        }
      ],
      "name": "isAllowedColor",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tribe",
          "type": "uint256"
        },
        {
          "internalType": "uint256[]",
          "name": "colors",
          "type": "uint256[]"
        },
        {
          "internalType": "bool",
          "name": "allowed",
          "type": "bool"
        }
      ],
      "name": "setAllowedColorsOnTribe",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x7d3f622c07bf9088641371385c259f6aaad30965fa5e9d0189397e8277db264c",
  "receipt": {
    "to": null,
    "from": "0x6C287e19065661Ca590A11CF0b419d1434991B67",
    "contractAddress": "0x04301173892453559083C92B62a12A23aD55E646",
    "transactionIndex": 31,
    "gasUsed": "339294",
    "logsBloom": "0x
    "blockHash": "0xa8f61423f44a532f3510043641b91077e3037bd6cd297e5b5d37f13492897eab",
    "transactionHash": "0x7d3f622c07bf9088641371385c259f6aaad30965fa5e9d0189397e8277db264c",
    "logs": [
      {
        "transactionIndex": 31,
        "blockNumber": 5541373,
        "transactionHash": "0x7d3f622c07bf9088641371385c259f6aaad30965fa5e9d0189397e8277db264c",
        "address": "0x04301173892453559083C92B62a12A23aD55E646",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x0000000000000000000000006c287e19065661ca590a11cf0b419d1434991b67"
        ],
        "data": "0x",
        "logIndex": 112,
        "blockHash": "0xa8f61423f44a532f3510043641b91077e3037bd6cd297e5b5d37f13492897eab"
      }
    ],
    "blockNumber": 5541373,
    "cumulativeGasUsed": "4471820",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "460b44b6c766dbc9e8edac432bb9f7aa",
  "metadata": "{\"compiler\":{\"version\":\"0.8.11+commit.d7f03943\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tribe\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"color\",\"type\":\"uint256\"}],\"name\":\"isAllowedColor\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tribe\",\"type\":\"uint256\"},{\"internalType\":\"uint256[]\",\"name\":\"colors\",\"type\":\"uint256[]\"},{\"internalType\":\"bool\",\"name\":\"allowed\",\"type\":\"bool\"}],\"name\":\"setAllowedColorsOnTribe\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"Color indexes need to be restricted per tribe prior to NFT deploy\",\"kind\":\"dev\",\"methods\":{\"isAllowedColor(uint256,uint256)\":{\"params\":{\"color\":\"Trait ID\",\"tribe\":\"Tribe ID\"},\"returns\":{\"_0\":\"True if color is allowed for tribe\"}},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner.\"},\"setAllowedColorsOnTribe(uint256,uint256[],bool)\":{\"params\":{\"allowed\":\"Bool if the color list should be made allowed or not\",\"colors\":\"List of colors to set for tribe\",\"tribe\":\"Tribe ID 1-10\"}},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"stateVariables\":{\"_tribeColorAllowed\":{\"details\":\"Mapping if color is allowed for selected tribe\"}},\"title\":\"AllowedColorsStorage\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"isAllowedColor(uint256,uint256)\":{\"notice\":\"Check if color is allowed for a tribe\"},\"setAllowedColorsOnTribe(uint256,uint256[],bool)\":{\"notice\":\"Set allowed on a given a list of colors\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"src/contracts/AllowedColorsStorage.sol\":\"AllowedColorsStorage\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby disabling any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0xba43b97fba0d32eb4254f6a5a297b39a19a247082a02d6e69349e071e2946218\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.4) (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    function _contextSuffixLength() internal view virtual returns (uint256) {\\n        return 0;\\n    }\\n}\\n\",\"keccak256\":\"0xa92e4fa126feb6907daa0513ddd816b2eb91f30a808de54f63c17d0e162c3439\",\"license\":\"MIT\"},\"src/contracts/AllowedColorsStorage.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.11;\\n\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\n\\n/**\\n * @title AllowedColorsStorage\\n * @dev Color indexes need to be restricted per tribe prior to NFT deploy\\n */\\ncontract AllowedColorsStorage is Ownable {\\n    /// @dev Mapping if color is allowed for selected tribe\\n    mapping(uint256 => mapping(uint256 => bool)) private _tribeColorAllowed;\\n\\n    constructor() {}\\n\\n    /**\\n     * @notice Set allowed on a given a list of colors\\n     * @param tribe Tribe ID 1-10\\n     * @param colors List of colors to set for tribe\\n     * @param allowed Bool if the color list should be made allowed or not\\n     */\\n    function setAllowedColorsOnTribe(uint256 tribe, uint256[] memory colors, bool allowed) external onlyOwner {\\n        require(tribe > 0 && tribe < 10, \\\"Invalid tribe provided\\\");\\n        for (uint256 i = 0; i < colors.length; i++) {\\n            _toggleColorAllowed(tribe, colors[i], allowed);\\n        }\\n    }\\n\\n    /**\\n     * @notice Toggle color allowed on and off for a tribe\\n     * @param tribe Tribe ID\\n     * @param color Trait ID\\n     * @param allowed Bool if the color should be made allowed or not\\n     * @dev Defaults to false if never set\\n     */\\n    function _toggleColorAllowed(uint256 tribe, uint256 color, bool allowed) private {\\n        _tribeColorAllowed[tribe][color] = allowed;\\n    }\\n\\n    /**\\n     * @notice Check if color is allowed for a tribe\\n     * @param tribe Tribe ID\\n     * @param color Trait ID\\n     * @return True if color is allowed for tribe\\n     */\\n    function isAllowedColor(uint256 tribe, uint256 color) public view returns (bool) {\\n        return _tribeColorAllowed[tribe][color];\\n    }\\n}\\n\",\"keccak256\":\"0xdf219b19e354b51e1bfef331917213b43e4d28d1aeb224f4353db68692ab6788\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b5061001a3361001f565b61006f565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b6104b88061007e6000396000f3fe608060405234801561001057600080fd5b50600436106100575760003560e01c8063715018a61461005c5780637d6f971f146100665780638da5cb5b14610079578063968ef8f514610099578063f2fde38b146100d7575b600080fd5b6100646100ea565b005b610064610074366004610317565b6100fe565b6000546040516001600160a01b0390911681526020015b60405180910390f35b6100c76100a73660046103f1565b600091825260016020908152604080842092845291905290205460ff1690565b6040519015158152602001610090565b6100646100e5366004610413565b6101c9565b6100f2610242565b6100fc600061029c565b565b610106610242565b6000831180156101165750600a83105b6101605760405162461bcd60e51b8152602060048201526016602482015275125b9d985b1a59081d1c9a5899481c1c9bdd9a59195960521b60448201526064015b60405180910390fd5b60005b82518110156101c3576101b18484838151811061018257610182610443565b602090810291909101810151600092835260018252604080842091845291529020805460ff1916841515179055565b806101bb81610459565b915050610163565b50505050565b6101d1610242565b6001600160a01b0381166102365760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b6064820152608401610157565b61023f8161029c565b50565b6000546001600160a01b031633146100fc5760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152606401610157565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b634e487b7160e01b600052604160045260246000fd5b8035801515811461031257600080fd5b919050565b60008060006060848603121561032c57600080fd5b8335925060208085013567ffffffffffffffff8082111561034c57600080fd5b818701915087601f83011261036057600080fd5b813581811115610372576103726102ec565b8060051b604051601f19603f83011681018181108582111715610397576103976102ec565b60405291825284820192508381018501918a8311156103b557600080fd5b938501935b828510156103d3578435845293850193928501926103ba565b8097505050505050506103e860408501610302565b90509250925092565b6000806040838503121561040457600080fd5b50508035926020909101359150565b60006020828403121561042557600080fd5b81356001600160a01b038116811461043c57600080fd5b9392505050565b634e487b7160e01b600052603260045260246000fd5b600060001982141561047b57634e487b7160e01b600052601160045260246000fd5b506001019056fea2646970667358221220387783aaf31524d99aed424c63dcd867480898f9a91b6f2538c26c6b213ba01364736f6c634300080b0033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106100575760003560e01c8063715018a61461005c5780637d6f971f146100665780638da5cb5b14610079578063968ef8f514610099578063f2fde38b146100d7575b600080fd5b6100646100ea565b005b610064610074366004610317565b6100fe565b6000546040516001600160a01b0390911681526020015b60405180910390f35b6100c76100a73660046103f1565b600091825260016020908152604080842092845291905290205460ff1690565b6040519015158152602001610090565b6100646100e5366004610413565b6101c9565b6100f2610242565b6100fc600061029c565b565b610106610242565b6000831180156101165750600a83105b6101605760405162461bcd60e51b8152602060048201526016602482015275125b9d985b1a59081d1c9a5899481c1c9bdd9a59195960521b60448201526064015b60405180910390fd5b60005b82518110156101c3576101b18484838151811061018257610182610443565b602090810291909101810151600092835260018252604080842091845291529020805460ff1916841515179055565b806101bb81610459565b915050610163565b50505050565b6101d1610242565b6001600160a01b0381166102365760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b6064820152608401610157565b61023f8161029c565b50565b6000546001600160a01b031633146100fc5760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152606401610157565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b634e487b7160e01b600052604160045260246000fd5b8035801515811461031257600080fd5b919050565b60008060006060848603121561032c57600080fd5b8335925060208085013567ffffffffffffffff8082111561034c57600080fd5b818701915087601f83011261036057600080fd5b813581811115610372576103726102ec565b8060051b604051601f19603f83011681018181108582111715610397576103976102ec565b60405291825284820192508381018501918a8311156103b557600080fd5b938501935b828510156103d3578435845293850193928501926103ba565b8097505050505050506103e860408501610302565b90509250925092565b6000806040838503121561040457600080fd5b50508035926020909101359150565b60006020828403121561042557600080fd5b81356001600160a01b038116811461043c57600080fd5b9392505050565b634e487b7160e01b600052603260045260246000fd5b600060001982141561047b57634e487b7160e01b600052601160045260246000fd5b506001019056fea2646970667358221220387783aaf31524d99aed424c63dcd867480898f9a91b6f2538c26c6b213ba01364736f6c634300080b0033",
  "devdoc": {
    "details": "Color indexes need to be restricted per tribe prior to NFT deploy",
    "kind": "dev",
    "methods": {
      "isAllowedColor(uint256,uint256)": {
        "params": {
          "color": "Trait ID",
          "tribe": "Tribe ID"
        },
        "returns": {
          "_0": "True if color is allowed for tribe"
        }
      },
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner."
      },
      "setAllowedColorsOnTribe(uint256,uint256[],bool)": {
        "params": {
          "allowed": "Bool if the color list should be made allowed or not",
          "colors": "List of colors to set for tribe",
          "tribe": "Tribe ID 1-10"
        }
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    },
    "stateVariables": {
      "_tribeColorAllowed": {
        "details": "Mapping if color is allowed for selected tribe"
      }
    },
    "title": "AllowedColorsStorage",
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "isAllowedColor(uint256,uint256)": {
        "notice": "Check if color is allowed for a tribe"
      },
      "setAllowedColorsOnTribe(uint256,uint256[],bool)": {
        "notice": "Set allowed on a given a list of colors"
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 7453,
        "contract": "src/contracts/AllowedColorsStorage.sol:AllowedColorsStorage",
        "label": "_owner",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 15004,
        "contract": "src/contracts/AllowedColorsStorage.sol:AllowedColorsStorage",
        "label": "_tribeColorAllowed",
        "offset": 0,
        "slot": "1",
        "type": "t_mapping(t_uint256,t_mapping(t_uint256,t_bool))"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_mapping(t_uint256,t_bool)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_uint256,t_mapping(t_uint256,t_bool))": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => mapping(uint256 => bool))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_uint256,t_bool)"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}