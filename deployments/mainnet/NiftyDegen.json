{
  "metadata": "{\"compiler\":{\"version\":\"0.8.4\"},\"sources\":{\"contracts/NiftyDegen.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts/utils/Counters.sol\\\";\\nimport \\\"./NameableCharacter.sol\\\";\\nimport \\\"./AllowedColorsStorage.sol\\\";\\n\\nimport \\\"hardhat/console.sol\\\";\\n\\n/**\\n * @title NiftyDegen NFT (The OG NFTs of the Nifty League on Ethereum)\\n * @dev Extends NameableCharacter and NiftyLeagueCharacter (ERC721)\\n */\\ncontract NiftyDegen is NameableCharacter {\\n    using Counters for Counters.Counter;\\n\\n    /// @notice Counter for number of minted characters\\n    Counters.Counter public totalSupply;\\n\\n    /// @notice Max number of mintable characters\\n    uint256 public constant MAX_SUPPLY = 10000;\\n\\n    /// @notice Special characters reserved for future giveaways\\n    uint256 public constant SPECIAL_CHARACTERS = 100;\\n\\n    /// @dev Available traits storage address\\n    address internal immutable _storageAddress;\\n\\n    /// @dev Mapping trait indexes to pool size of available traits\\n    mapping(uint256 => uint256) internal _originalPoolSizes;\\n\\n    /// @dev Set if we want to override semi-fomo ramp pricing\\n    uint256 private _manualMintPrice;\\n\\n    /// @dev Base URI used for token metadata\\n    string private _baseTokenUri = \\\"\\\";\\n\\n    /**\\n     * @notice Construct the Nifty League NFTs\\n     * @param nftlAddress Address of verified Nifty League NFTL contract\\n     * @param storageAddress Address of verified Allowed Colors Storage\\n     */\\n    constructor(address nftlAddress, address storageAddress) NiftyLeagueCharacter(nftlAddress, \\\"NiftyDegen\\\", \\\"DEGEN\\\") {\\n        _storageAddress = storageAddress;\\n    }\\n\\n    // External functions\\n\\n    /// @dev Temporary function to mint NFTs\\n    function mintDegenWithCharacterTraits(CharacterTraits memory _characterTraits) external onlyOwner {\\n        // set character traits\\n        uint256[5] memory character;\\n        uint256[3] memory head;\\n        uint256[6] memory clothing;\\n        uint256[6] memory accessories;\\n        uint256[2] memory items;\\n\\n        character[0] = _characterTraits.tribe;\\n        character[1] = _characterTraits.skinColor;\\n        character[2] = _characterTraits.furColor;\\n        character[3] = _characterTraits.eyeColor;\\n        character[4] = _characterTraits.pupilColor;\\n\\n        head[0] = _characterTraits.hair;\\n        head[1] = _characterTraits.mouth;\\n        head[2] = _characterTraits.beard;\\n\\n        clothing[0] = _characterTraits.top;\\n        clothing[1] = _characterTraits.outerwear;\\n        clothing[2] = _characterTraits.print;\\n        clothing[3] = _characterTraits.bottom;\\n        clothing[4] = _characterTraits.footwear;\\n        clothing[5] = _characterTraits.belt;\\n\\n        accessories[0] = _characterTraits.hat;\\n        accessories[1] = _characterTraits.eyewear;\\n        accessories[2] = _characterTraits.piercing;\\n        accessories[3] = _characterTraits.wrist;\\n        accessories[4] = _characterTraits.hands;\\n        accessories[5] = _characterTraits.neckwear;\\n\\n        items[0] = _characterTraits.leftItem;\\n        items[1] = _characterTraits.rightItem;\\n\\n        uint256 traitCombo = _generateTraitCombo(character, head, clothing, accessories, items);\\n        _storeNewCharacter(traitCombo);\\n    }\\n\\n    /**\\n     * @notice Validate character traits and purchase a Nifty Degen NFT\\n     * @param character Indexed list of character traits\\n     * @param head Indexed list of head traits\\n     * @param clothing Indexed list of clothing options\\n     * @param accessories Indexed list of accessories\\n     * @param items Indexed list of items\\n     * @dev Order is based on character selector indexes\\n     */\\n    function purchase(\\n        uint256[5] memory character,\\n        uint256[3] memory head,\\n        uint256[6] memory clothing,\\n        uint256[6] memory accessories,\\n        uint256[2] memory items\\n    ) external payable whenNotPaused {\\n        uint256 currentSupply = totalSupply.current();\\n        require(currentSupply >= 3 || _msgSender() == owner(), \\\"Sale has not started\\\");\\n        require(msg.value == getNFTPrice(), \\\"Ether value incorrect\\\");\\n        _validateTraits(character, head, clothing, accessories, items);\\n        uint256 traitCombo = _generateTraitCombo(character, head, clothing, accessories, items);\\n        _storeNewCharacter(traitCombo);\\n    }\\n\\n    /**\\n     * @notice Set pool size for each trait index called on deploy\\n     * @dev Unable to init mapping at declaration :/\\n     */\\n    function initPoolSizes() external onlyOwner {\\n        _originalPoolSizes[5] = 113;\\n        _originalPoolSizes[6] = 14;\\n        _originalPoolSizes[7] = 63;\\n        _originalPoolSizes[8] = 99;\\n        _originalPoolSizes[9] = 76;\\n        _originalPoolSizes[10] = 41;\\n        _originalPoolSizes[11] = 101;\\n        _originalPoolSizes[12] = 37;\\n        _originalPoolSizes[13] = 12;\\n        _originalPoolSizes[14] = 43;\\n        _originalPoolSizes[15] = 50;\\n        _originalPoolSizes[16] = 10;\\n        _originalPoolSizes[17] = 12;\\n        _originalPoolSizes[18] = 25;\\n        _originalPoolSizes[19] = 37;\\n        _originalPoolSizes[20] = 92;\\n        _originalPoolSizes[21] = 48;\\n    }\\n\\n    /**\\n     * @notice Fallback to set NFT price to static ether value if necessary\\n     * @param newPrice New price to set for remaining character sale\\n     * @dev Minimum value of 0.08 ETH for this to be considered in getNFTPrice\\n     */\\n    function overrideMintPrice(uint256 newPrice) external onlyOwner {\\n        _manualMintPrice = newPrice;\\n    }\\n\\n    /**\\n     * @notice Option to set _baseUri for transfering Heroku to IPFS\\n     * @param baseURI New base URI for NFT metadata\\n     */\\n    function setBaseURI(string memory baseURI) public onlyOwner {\\n        _baseTokenUri = baseURI;\\n    }\\n\\n    // Public functions\\n\\n    /**\\n     * @notice Gets current NFT Price based on current supply\\n     * @return Current price to mint 1 NFT\\n     */\\n    function getNFTPrice() public view returns (uint256) {\\n        uint256 currentSupply = totalSupply.current();\\n        require(\\n            currentSupply < MAX_SUPPLY - SPECIAL_CHARACTERS || (_msgSender() == owner() && currentSupply < MAX_SUPPLY),\\n            \\\"Sale has already ended\\\"\\n        );\\n        // 1 - 3 free for core team members, 9901 - 10000 free special community giveaway characters\\n        if (currentSupply < 3 || currentSupply >= 9900) return 0;\\n        // fallback option to override price floors only if necessary. Minimum value of 0.08 ETH\\n        if (_manualMintPrice >= 80000000000000000) return _manualMintPrice;\\n        if (currentSupply >= 9500) return 280000000000000000; // 9500 - 9900 0.28 ETH\\n        if (currentSupply >= 8500) return 250000000000000000; // 8501 - 9500 0.25 ETH\\n        if (currentSupply >= 6500) return 220000000000000000; // 6501 - 8500 0.22 ETH\\n        if (currentSupply >= 4500) return 190000000000000000; // 4501 - 6500 0.18 ETH\\n        if (currentSupply >= 2500) return 160000000000000000; // 2501 - 4500 0.15 ETH\\n        if (currentSupply >= 1000) return 130000000000000000; // 1001 - 2500 0.13 ETH\\n        return 100000000000000000; // 4 - 1000 0.1 ETH\\n    }\\n\\n    /**\\n     * @notice Check if traits is allowed for tribe and hasn't been removed yet\\n     * @param tribe Tribe ID\\n     * @param trait Trait ID\\n     * @dev Trait types are restricted per tribe before deploy in AllowedColorsStorage\\n     * @return True if trait is available and allowed for tribe\\n     */\\n    function isAvailableAndAllowedTrait(uint256 tribe, uint256 trait) public view returns (bool) {\\n        if (trait == EMPTY_TRAIT) return true;\\n        if (trait >= 150) return isAvailableTrait(trait);\\n        AllowedColorsStorage colorsStorage = AllowedColorsStorage(_storageAddress);\\n        return colorsStorage.isAllowedColor(tribe, trait);\\n    }\\n\\n    // Internal functions\\n\\n    /**\\n     * @notice Base URI for computing {tokenURI}. Overrides ERC721 default\\n     * @return Base token URI linked to IPFS metadata\\n     */\\n    function _baseURI() internal view virtual override returns (string memory) {\\n        return _baseTokenUri;\\n    }\\n\\n    // Private functions\\n\\n    /**\\n     * @notice Validate character traits\\n     * @param char Indexed list of character traits\\n     * @param head Indexed list of head traits\\n     * @param cloth Indexed list of clothing options\\n     * @param acc Indexed list of accessories\\n     * @param items Indexed list of items\\n     */\\n    function _validateTraits(\\n        uint256[5] memory char,\\n        uint256[3] memory head,\\n        uint256[6] memory cloth,\\n        uint256[6] memory acc,\\n        uint256[2] memory items\\n    ) private view {\\n        uint256 tribe = char[0];\\n        require(tribe > 0 && (tribe <= 6 || (tribe <= 9 && _msgSender() == owner())), \\\"Tribe incorrect\\\");\\n        require(_isTraitInRange(char[1], 10, 69) || _isTraitInRange(char[1], 119, 149), \\\"Skin color incorrect\\\");\\n        require(_isTraitInRange(char[2], 70, 100) || _isTraitInRange(char[2], 119, 149), \\\"Fur color incorrect\\\");\\n        require(_isTraitInRange(char[3], 101, 109) || _isTraitInRange(char[3], 119, 149), \\\"Eye color incorrect\\\");\\n        require(_isTraitInRange(char[4], 110, 118) || _isTraitInRange(char[4], 119, 149), \\\"Pupil color incorrect\\\");\\n        require(_isTraitInRange(head[0], 150, 262), \\\"Hair incorrect\\\");\\n        require(_isTraitInRange(head[1], 263, 276), \\\"Mouth incorrect\\\");\\n        require(_isTraitInRange(head[2], 277, 339), \\\"Beard incorrect\\\");\\n        require(_isTraitInRange(cloth[0], 340, 438), \\\"Top incorrect\\\");\\n        require(_isTraitInRange(cloth[1], 439, 514), \\\"Outerwear incorrect\\\");\\n        require(_isTraitInRange(cloth[2], 515, 555), \\\"Print incorrect\\\");\\n        require(_isTraitInRange(cloth[3], 556, 657), \\\"Bottom incorrect\\\");\\n        require(_isTraitInRange(cloth[4], 658, 694), \\\"Footwear incorrect\\\");\\n        require(_isTraitInRange(cloth[5], 695, 706), \\\"Belt incorrect\\\");\\n        require(_isTraitInRange(acc[0], 707, 749), \\\"Hat incorrect\\\");\\n        require(_isTraitInRange(acc[1], 750, 799), \\\"Eyewear incorrect\\\");\\n        require(_isTraitInRange(acc[2], 800, 809), \\\"Piercing incorrect\\\");\\n        require(_isTraitInRange(acc[3], 810, 821), \\\"Wrist accessory incorrect\\\");\\n        require(_isTraitInRange(acc[4], 822, 846), \\\"Hands accessory incorrect\\\");\\n        require(_isTraitInRange(acc[5], 847, 883), \\\"Neckwear incorrect\\\");\\n        require(_isTraitInRange(items[0], 884, 975), \\\"Left item incorrect\\\");\\n        require(_isTraitInRange(items[1], 976, 1023), \\\"Right item incorrect\\\");\\n\\n        require(isAvailableAndAllowedTrait(tribe, char[1]), \\\"Skin color unavailable\\\");\\n        require(isAvailableAndAllowedTrait(tribe, char[2]), \\\"Fur color unavailable\\\");\\n        require(isAvailableAndAllowedTrait(tribe, char[3]), \\\"Eye color unavailable\\\");\\n        require(isAvailableAndAllowedTrait(tribe, char[4]), \\\"Pupil color unavailable\\\");\\n        require(isAvailableAndAllowedTrait(tribe, head[0]), \\\"Hair unavailable\\\");\\n        require(isAvailableAndAllowedTrait(tribe, head[1]), \\\"Mouth unavailable\\\");\\n        require(isAvailableAndAllowedTrait(tribe, head[2]), \\\"Beard unavailable\\\");\\n        require(isAvailableAndAllowedTrait(tribe, cloth[0]), \\\"Top unavailable\\\");\\n        require(isAvailableAndAllowedTrait(tribe, cloth[1]), \\\"Outerwear unavailable\\\");\\n        require(isAvailableAndAllowedTrait(tribe, cloth[2]), \\\"Print unavailable\\\");\\n        require(isAvailableAndAllowedTrait(tribe, cloth[3]), \\\"Bottom unavailable\\\");\\n        require(isAvailableAndAllowedTrait(tribe, cloth[4]), \\\"Footwear unavailable\\\");\\n        require(isAvailableAndAllowedTrait(tribe, cloth[5]), \\\"Belt unavailable\\\");\\n        require(isAvailableAndAllowedTrait(tribe, acc[0]), \\\"Hat unavailable\\\");\\n        require(isAvailableAndAllowedTrait(tribe, acc[1]), \\\"Eyewear unavailable\\\");\\n        require(isAvailableAndAllowedTrait(tribe, acc[2]), \\\"Piercing unavailable\\\");\\n        require(isAvailableAndAllowedTrait(tribe, acc[3]), \\\"Wrist accessory unavailable\\\");\\n        require(isAvailableAndAllowedTrait(tribe, acc[4]), \\\"Hand accessory unavailable\\\");\\n        require(isAvailableAndAllowedTrait(tribe, acc[5]), \\\"Neckwear unavailable\\\");\\n        require(isAvailableAndAllowedTrait(tribe, items[0]), \\\"Left item unavailable\\\");\\n        require(isAvailableAndAllowedTrait(tribe, items[1]), \\\"Right item unavailable\\\");\\n    }\\n\\n    /**\\n     * @notice Mints NFT if unique and attempts to remove a random trait\\n     * @param traitCombo Trait combo provided from _generateTraitCombo\\n     */\\n    function _storeNewCharacter(uint256 traitCombo) private {\\n        require(isUnique(traitCombo), \\\"NFT trait combo already exists\\\");\\n        _existMap[traitCombo] = true;\\n        totalSupply.increment();\\n        uint256 newCharId = totalSupply.current();\\n        Character memory newChar;\\n        newChar.traits = traitCombo;\\n        _characters[newCharId] = newChar;\\n        _removeRandomTrait(newCharId, traitCombo);\\n        _safeMint(_msgSender(), newCharId);\\n    }\\n\\n    /**\\n     * @notice Attempts to remove a random trait from availability\\n     * @param newCharId ID of newly generated NFT\\n     * @param traitCombo Trait combo provided from _generateTraitCombo\\n     * @dev Any trait id besides 0, tribe ids, or body/eye colors can be removed\\n     */\\n    function _removeRandomTrait(uint256 newCharId, uint256 traitCombo) private {\\n        uint256 numRemoved = removedTraits.length;\\n        if (\\n            (numRemoved < 100 && newCharId % 7 == 0) ||\\n            (numRemoved >= 100 && numRemoved < 200 && newCharId % 9 == 0) ||\\n            (numRemoved >= 200 && numRemoved < 300 && newCharId % 11 == 0) ||\\n            (numRemoved >= 300 && numRemoved < 400 && newCharId % 13 == 0)\\n        ) {\\n            uint256 randomIndex = _rngIndex(newCharId);\\n            uint16 randomTrait = _unpackUint10(traitCombo >> (randomIndex * 10));\\n            if (randomTrait != 0) {\\n                uint256 poolSize = _originalPoolSizes[randomIndex];\\n                bool skip = _rngSkip(poolSize);\\n                if (!skip) {\\n                    removedTraits.push(randomTrait);\\n                    _removedTraitsMap[randomTrait] = true;\\n                }\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @notice Simulate randomness for token index to attempt to remove excluding tribes and colors\\n     * @param tokenId ID of newly generated NFT\\n     * @dev Randomness can be anticipated and exploited but is not crucial to NFT sale\\n     * @return Number from 5-21\\n     */\\n    function _rngIndex(uint256 tokenId) private view returns (uint256) {\\n        uint256 randomHash = uint256(keccak256(abi.encodePacked(tokenId, block.timestamp, block.difficulty)));\\n        return (randomHash % 17) + 5;\\n    }\\n\\n    /**\\n     * @notice Simulate randomness to decide to skip removing trait based on pool size\\n     * @param poolSize Number of trait options for a specific trait type\\n     * @dev Randomness can be anticipated and exploited but is not crucial to NFT sale\\n     * @return True if should skip this trait removal\\n     */\\n    function _rngSkip(uint256 poolSize) private view returns (bool) {\\n        uint256 randomHash = uint256(keccak256(abi.encodePacked(poolSize, block.timestamp, block.difficulty)));\\n        int256 odds = 70 - int256(randomHash % 61);\\n        return odds < int256(500 / poolSize);\\n    }\\n\\n    /**\\n     * @notice Checks whether trait id is in range of lower/upper bounds\\n     * @param lower lower range-bound\\n     * @param upper upper range-bound\\n     * @return True if in range\\n     */\\n    function _isTraitInRange(\\n        uint256 trait,\\n        uint256 lower,\\n        uint256 upper\\n    ) private pure returns (bool) {\\n        return trait == EMPTY_TRAIT || (trait >= lower && trait <= upper);\\n    }\\n}\\n\"},\"@openzeppelin/contracts/utils/Counters.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Counters.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title Counters\\n * @author Matt Condon (@shrugs)\\n * @dev Provides counters that can only be incremented, decremented or reset. This can be used e.g. to track the number\\n * of elements in a mapping, issuing ERC721 ids, or counting request ids.\\n *\\n * Include with `using Counters for Counters.Counter;`\\n */\\nlibrary Counters {\\n    struct Counter {\\n        // This variable should never be directly accessed by users of the library: interactions must be restricted to\\n        // the library's function. As of Solidity v0.5.2, this cannot be enforced, though there is a proposal to add\\n        // this feature: see https://github.com/ethereum/solidity/issues/4637\\n        uint256 _value; // default: 0\\n    }\\n\\n    function current(Counter storage counter) internal view returns (uint256) {\\n        return counter._value;\\n    }\\n\\n    function increment(Counter storage counter) internal {\\n        unchecked {\\n            counter._value += 1;\\n        }\\n    }\\n\\n    function decrement(Counter storage counter) internal {\\n        uint256 value = counter._value;\\n        require(value > 0, \\\"Counter: decrement overflow\\\");\\n        unchecked {\\n            counter._value = value - 1;\\n        }\\n    }\\n\\n    function reset(Counter storage counter) internal {\\n        counter._value = 0;\\n    }\\n}\\n\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\"},\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\"},\"@openzeppelin/contracts/security/Pausable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (security/Pausable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which allows children to implement an emergency stop\\n * mechanism that can be triggered by an authorized account.\\n *\\n * This module is used through inheritance. It will make available the\\n * modifiers `whenNotPaused` and `whenPaused`, which can be applied to\\n * the functions of your contract. Note that they will not be pausable by\\n * simply including this module, only once the modifiers are put in place.\\n */\\nabstract contract Pausable is Context {\\n    /**\\n     * @dev Emitted when the pause is triggered by `account`.\\n     */\\n    event Paused(address account);\\n\\n    /**\\n     * @dev Emitted when the pause is lifted by `account`.\\n     */\\n    event Unpaused(address account);\\n\\n    bool private _paused;\\n\\n    /**\\n     * @dev Initializes the contract in unpaused state.\\n     */\\n    constructor() {\\n        _paused = false;\\n    }\\n\\n    /**\\n     * @dev Returns true if the contract is paused, and false otherwise.\\n     */\\n    function paused() public view virtual returns (bool) {\\n        return _paused;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is not paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    modifier whenNotPaused() {\\n        require(!paused(), \\\"Pausable: paused\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    modifier whenPaused() {\\n        require(paused(), \\\"Pausable: not paused\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Triggers stopped state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    function _pause() internal virtual whenNotPaused {\\n        _paused = true;\\n        emit Paused(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns to normal state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    function _unpause() internal virtual whenPaused {\\n        _paused = false;\\n        emit Unpaused(_msgSender());\\n    }\\n}\\n\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\"},\"@openzeppelin/contracts/token/ERC721/IERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/IERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721 is IERC165 {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be have been allowed to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool _approved) external;\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external;\\n}\\n\"},\"@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/IERC721Receiver.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title ERC721 token receiver interface\\n * @dev Interface for any contract that wants to support safeTransfers\\n * from ERC721 asset contracts.\\n */\\ninterface IERC721Receiver {\\n    /**\\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\\n     * by `operator` from `from`, this function is called.\\n     *\\n     * It must return its Solidity selector to confirm the token transfer.\\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.\\n     *\\n     * The selector can be obtained in Solidity with `IERC721.onERC721Received.selector`.\\n     */\\n    function onERC721Received(\\n        address operator,\\n        address from,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n}\\n\"},\"@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/extensions/IERC721Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC721.sol\\\";\\n\\n/**\\n * @title ERC-721 Non-Fungible Token Standard, optional metadata extension\\n * @dev See https://eips.ethereum.org/EIPS/eip-721\\n */\\ninterface IERC721Metadata is IERC721 {\\n    /**\\n     * @dev Returns the token collection name.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the token collection symbol.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the Uniform Resource Identifier (URI) for `tokenId` token.\\n     */\\n    function tokenURI(uint256 tokenId) external view returns (string memory);\\n}\\n\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Address.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        assembly {\\n            size := extcodesize(account)\\n        }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\"},\"@openzeppelin/contracts/utils/Strings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _HEX_SYMBOLS = \\\"0123456789abcdef\\\";\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        // Inspired by OraclizeAPI's implementation - MIT licence\\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\\n\\n        if (value == 0) {\\n            return \\\"0\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 digits;\\n        while (temp != 0) {\\n            digits++;\\n            temp /= 10;\\n        }\\n        bytes memory buffer = new bytes(digits);\\n        while (value != 0) {\\n            digits -= 1;\\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\\n            value /= 10;\\n        }\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        if (value == 0) {\\n            return \\\"0x00\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 length = 0;\\n        while (temp != 0) {\\n            length++;\\n            temp >>= 8;\\n        }\\n        return toHexString(value, length);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n}\\n\"},\"@openzeppelin/contracts/utils/introspection/ERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165 is IERC165 {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\"},\"@openzeppelin/contracts/token/ERC721/ERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/ERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC721.sol\\\";\\nimport \\\"./IERC721Receiver.sol\\\";\\nimport \\\"./extensions/IERC721Metadata.sol\\\";\\nimport \\\"../../utils/Address.sol\\\";\\nimport \\\"../../utils/Context.sol\\\";\\nimport \\\"../../utils/Strings.sol\\\";\\nimport \\\"../../utils/introspection/ERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of https://eips.ethereum.org/EIPS/eip-721[ERC721] Non-Fungible Token Standard, including\\n * the Metadata extension, but not including the Enumerable extension, which is available separately as\\n * {ERC721Enumerable}.\\n */\\ncontract ERC721 is Context, ERC165, IERC721, IERC721Metadata {\\n    using Address for address;\\n    using Strings for uint256;\\n\\n    // Token name\\n    string private _name;\\n\\n    // Token symbol\\n    string private _symbol;\\n\\n    // Mapping from token ID to owner address\\n    mapping(uint256 => address) private _owners;\\n\\n    // Mapping owner address to token count\\n    mapping(address => uint256) private _balances;\\n\\n    // Mapping from token ID to approved address\\n    mapping(uint256 => address) private _tokenApprovals;\\n\\n    // Mapping from owner to operator approvals\\n    mapping(address => mapping(address => bool)) private _operatorApprovals;\\n\\n    /**\\n     * @dev Initializes the contract by setting a `name` and a `symbol` to the token collection.\\n     */\\n    constructor(string memory name_, string memory symbol_) {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165, IERC165) returns (bool) {\\n        return\\n            interfaceId == type(IERC721).interfaceId ||\\n            interfaceId == type(IERC721Metadata).interfaceId ||\\n            super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-balanceOf}.\\n     */\\n    function balanceOf(address owner) public view virtual override returns (uint256) {\\n        require(owner != address(0), \\\"ERC721: balance query for the zero address\\\");\\n        return _balances[owner];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-ownerOf}.\\n     */\\n    function ownerOf(uint256 tokenId) public view virtual override returns (address) {\\n        address owner = _owners[tokenId];\\n        require(owner != address(0), \\\"ERC721: owner query for nonexistent token\\\");\\n        return owner;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-name}.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-symbol}.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-tokenURI}.\\n     */\\n    function tokenURI(uint256 tokenId) public view virtual override returns (string memory) {\\n        require(_exists(tokenId), \\\"ERC721Metadata: URI query for nonexistent token\\\");\\n\\n        string memory baseURI = _baseURI();\\n        return bytes(baseURI).length > 0 ? string(abi.encodePacked(baseURI, tokenId.toString())) : \\\"\\\";\\n    }\\n\\n    /**\\n     * @dev Base URI for computing {tokenURI}. If set, the resulting URI for each\\n     * token will be the concatenation of the `baseURI` and the `tokenId`. Empty\\n     * by default, can be overriden in child contracts.\\n     */\\n    function _baseURI() internal view virtual returns (string memory) {\\n        return \\\"\\\";\\n    }\\n\\n    /**\\n     * @dev See {IERC721-approve}.\\n     */\\n    function approve(address to, uint256 tokenId) public virtual override {\\n        address owner = ERC721.ownerOf(tokenId);\\n        require(to != owner, \\\"ERC721: approval to current owner\\\");\\n\\n        require(\\n            _msgSender() == owner || isApprovedForAll(owner, _msgSender()),\\n            \\\"ERC721: approve caller is not owner nor approved for all\\\"\\n        );\\n\\n        _approve(to, tokenId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-getApproved}.\\n     */\\n    function getApproved(uint256 tokenId) public view virtual override returns (address) {\\n        require(_exists(tokenId), \\\"ERC721: approved query for nonexistent token\\\");\\n\\n        return _tokenApprovals[tokenId];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-setApprovalForAll}.\\n     */\\n    function setApprovalForAll(address operator, bool approved) public virtual override {\\n        _setApprovalForAll(_msgSender(), operator, approved);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-isApprovedForAll}.\\n     */\\n    function isApprovedForAll(address owner, address operator) public view virtual override returns (bool) {\\n        return _operatorApprovals[owner][operator];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-transferFrom}.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) public virtual override {\\n        //solhint-disable-next-line max-line-length\\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \\\"ERC721: transfer caller is not owner nor approved\\\");\\n\\n        _transfer(from, to, tokenId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) public virtual override {\\n        safeTransferFrom(from, to, tokenId, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev See {IERC721-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory _data\\n    ) public virtual override {\\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \\\"ERC721: transfer caller is not owner nor approved\\\");\\n        _safeTransfer(from, to, tokenId, _data);\\n    }\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * `_data` is additional data, it has no specified format and it is sent in call to `to`.\\n     *\\n     * This internal function is equivalent to {safeTransferFrom}, and can be used to e.g.\\n     * implement alternative mechanisms to perform token transfer, such as signature-based.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _safeTransfer(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory _data\\n    ) internal virtual {\\n        _transfer(from, to, tokenId);\\n        require(_checkOnERC721Received(from, to, tokenId, _data), \\\"ERC721: transfer to non ERC721Receiver implementer\\\");\\n    }\\n\\n    /**\\n     * @dev Returns whether `tokenId` exists.\\n     *\\n     * Tokens can be managed by their owner or approved accounts via {approve} or {setApprovalForAll}.\\n     *\\n     * Tokens start existing when they are minted (`_mint`),\\n     * and stop existing when they are burned (`_burn`).\\n     */\\n    function _exists(uint256 tokenId) internal view virtual returns (bool) {\\n        return _owners[tokenId] != address(0);\\n    }\\n\\n    /**\\n     * @dev Returns whether `spender` is allowed to manage `tokenId`.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function _isApprovedOrOwner(address spender, uint256 tokenId) internal view virtual returns (bool) {\\n        require(_exists(tokenId), \\\"ERC721: operator query for nonexistent token\\\");\\n        address owner = ERC721.ownerOf(tokenId);\\n        return (spender == owner || getApproved(tokenId) == spender || isApprovedForAll(owner, spender));\\n    }\\n\\n    /**\\n     * @dev Safely mints `tokenId` and transfers it to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must not exist.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _safeMint(address to, uint256 tokenId) internal virtual {\\n        _safeMint(to, tokenId, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-ERC721-_safeMint-address-uint256-}[`_safeMint`], with an additional `data` parameter which is\\n     * forwarded in {IERC721Receiver-onERC721Received} to contract recipients.\\n     */\\n    function _safeMint(\\n        address to,\\n        uint256 tokenId,\\n        bytes memory _data\\n    ) internal virtual {\\n        _mint(to, tokenId);\\n        require(\\n            _checkOnERC721Received(address(0), to, tokenId, _data),\\n            \\\"ERC721: transfer to non ERC721Receiver implementer\\\"\\n        );\\n    }\\n\\n    /**\\n     * @dev Mints `tokenId` and transfers it to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {_safeMint} whenever possible\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must not exist.\\n     * - `to` cannot be the zero address.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _mint(address to, uint256 tokenId) internal virtual {\\n        require(to != address(0), \\\"ERC721: mint to the zero address\\\");\\n        require(!_exists(tokenId), \\\"ERC721: token already minted\\\");\\n\\n        _beforeTokenTransfer(address(0), to, tokenId);\\n\\n        _balances[to] += 1;\\n        _owners[tokenId] = to;\\n\\n        emit Transfer(address(0), to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Destroys `tokenId`.\\n     * The approval is cleared when the token is burned.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _burn(uint256 tokenId) internal virtual {\\n        address owner = ERC721.ownerOf(tokenId);\\n\\n        _beforeTokenTransfer(owner, address(0), tokenId);\\n\\n        // Clear approvals\\n        _approve(address(0), tokenId);\\n\\n        _balances[owner] -= 1;\\n        delete _owners[tokenId];\\n\\n        emit Transfer(owner, address(0), tokenId);\\n    }\\n\\n    /**\\n     * @dev Transfers `tokenId` from `from` to `to`.\\n     *  As opposed to {transferFrom}, this imposes no restrictions on msg.sender.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _transfer(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) internal virtual {\\n        require(ERC721.ownerOf(tokenId) == from, \\\"ERC721: transfer of token that is not own\\\");\\n        require(to != address(0), \\\"ERC721: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(from, to, tokenId);\\n\\n        // Clear approvals from the previous owner\\n        _approve(address(0), tokenId);\\n\\n        _balances[from] -= 1;\\n        _balances[to] += 1;\\n        _owners[tokenId] = to;\\n\\n        emit Transfer(from, to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Approve `to` to operate on `tokenId`\\n     *\\n     * Emits a {Approval} event.\\n     */\\n    function _approve(address to, uint256 tokenId) internal virtual {\\n        _tokenApprovals[tokenId] = to;\\n        emit Approval(ERC721.ownerOf(tokenId), to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Approve `operator` to operate on all of `owner` tokens\\n     *\\n     * Emits a {ApprovalForAll} event.\\n     */\\n    function _setApprovalForAll(\\n        address owner,\\n        address operator,\\n        bool approved\\n    ) internal virtual {\\n        require(owner != operator, \\\"ERC721: approve to caller\\\");\\n        _operatorApprovals[owner][operator] = approved;\\n        emit ApprovalForAll(owner, operator, approved);\\n    }\\n\\n    /**\\n     * @dev Internal function to invoke {IERC721Receiver-onERC721Received} on a target address.\\n     * The call is not executed if the target address is not a contract.\\n     *\\n     * @param from address representing the previous owner of the given token ID\\n     * @param to target address that will receive the tokens\\n     * @param tokenId uint256 ID of the token to be transferred\\n     * @param _data bytes optional data to send along with the call\\n     * @return bool whether the call correctly returned the expected magic value\\n     */\\n    function _checkOnERC721Received(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory _data\\n    ) private returns (bool) {\\n        if (to.isContract()) {\\n            try IERC721Receiver(to).onERC721Received(_msgSender(), from, tokenId, _data) returns (bytes4 retval) {\\n                return retval == IERC721Receiver.onERC721Received.selector;\\n            } catch (bytes memory reason) {\\n                if (reason.length == 0) {\\n                    revert(\\\"ERC721: transfer to non ERC721Receiver implementer\\\");\\n                } else {\\n                    assembly {\\n                        revert(add(32, reason), mload(reason))\\n                    }\\n                }\\n            }\\n        } else {\\n            return true;\\n        }\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any token transfer. This includes minting\\n     * and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - When `from` and `to` are both non-zero, ``from``'s `tokenId` will be\\n     * transferred to `to`.\\n     * - When `from` is zero, `tokenId` will be minted for `to`.\\n     * - When `to` is zero, ``from``'s `tokenId` will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) internal virtual {}\\n}\\n\"},\"contracts/NiftyLeagueCharacter.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"@openzeppelin/contracts/security/Pausable.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC721/ERC721.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/Counters.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/Strings.sol\\\";\\n\\n/**\\n * @title NiftyLeagueCharacter (Base NFT for Nifty League characters)\\n * @dev Extends standard ERC721 contract from OpenZeppelin\\n */\\ncontract NiftyLeagueCharacter is ERC721, Ownable, Pausable {\\n    using Strings for string;\\n\\n    struct Character {\\n        uint256 traits;\\n        string name;\\n    }\\n    struct CharacterTraits {\\n        // character\\n        uint16 tribe;\\n        uint16 skinColor;\\n        uint16 furColor;\\n        uint16 eyeColor;\\n        uint16 pupilColor;\\n        //  head\\n        uint16 hair;\\n        uint16 mouth;\\n        uint16 beard;\\n        //  clothing\\n        uint16 top;\\n        uint16 outerwear;\\n        uint16 print;\\n        uint16 bottom;\\n        uint16 footwear;\\n        uint16 belt;\\n        //  accessories\\n        uint16 hat;\\n        uint16 eyewear;\\n        uint16 piercing;\\n        uint16 wrist;\\n        uint16 hands;\\n        uint16 neckwear;\\n        //  items\\n        uint16 leftItem;\\n        uint16 rightItem;\\n    }\\n    /// @dev Mapping of created character structs from token ID\\n    mapping(uint256 => Character) internal _characters;\\n\\n    /// @dev Expected uint if no specific trait is selected\\n    uint256 internal constant EMPTY_TRAIT = 0;\\n\\n    /// @dev Mapping if character trait combination exist\\n    mapping(uint256 => bool) internal _existMap;\\n\\n    /// @dev Mapping if character trait has been removed\\n    mapping(uint256 => bool) internal _removedTraitsMap;\\n\\n    /// @dev Array initialized in order to return removed trait list\\n    uint16[] internal removedTraits;\\n\\n    /// @dev Nifty League NFTL token address\\n    address internal immutable _nftlAddress;\\n\\n    /**\\n     * @notice Construct the Nifty League NFTs\\n     * @param nftlAddress Address of verified Nifty League NFTL contract\\n     */\\n    constructor(\\n        address nftlAddress,\\n        string memory name,\\n        string memory symbol\\n    ) ERC721(name, symbol) {\\n        _nftlAddress = nftlAddress;\\n    }\\n\\n    // External functions\\n\\n    /**\\n     * @notice Triggers stopped state\\n     * @dev Requirements: The contract must not be paused\\n     */\\n    function pauseMinting() external onlyOwner {\\n        _pause();\\n    }\\n\\n    /**\\n     * @notice Returns to normal state\\n     * @dev Requirements: The contract must be paused\\n     */\\n    function unpauseMinting() external onlyOwner {\\n        _unpause();\\n    }\\n\\n    /**\\n     * @notice Withdraw ether from this contract (Callable by owner)\\n     */\\n    function withdraw() external onlyOwner {\\n        uint256 balance = address(this).balance;\\n        payable(_msgSender()).transfer(balance);\\n    }\\n\\n    /**\\n     * @notice Retrieve a list of removed character traits\\n     * @return removedTraits - list of unavailable character traits\\n     */\\n    function getRemovedTraits() external view returns (uint16[] memory) {\\n        return removedTraits;\\n    }\\n\\n    /**\\n     * @notice Retrieve a list of character traits for a token\\n     * @param tokenId ID of NFT\\n     * @dev Permissioning not added because it is only callable once.\\n     * @return _characterTraits - indexed list of character traits\\n     */\\n    function getCharacterTraits(uint256 tokenId) external view returns (CharacterTraits memory _characterTraits) {\\n        require(_exists(tokenId), \\\"nonexistent token\\\");\\n        Character memory character = _characters[tokenId];\\n        _characterTraits.tribe = _unpackUint10(character.traits);\\n        _characterTraits.skinColor = _unpackUint10(character.traits >> 10);\\n        _characterTraits.furColor = _unpackUint10(character.traits >> 20);\\n        _characterTraits.eyeColor = _unpackUint10(character.traits >> 30);\\n        _characterTraits.pupilColor = _unpackUint10(character.traits >> 40);\\n        _characterTraits.hair = _unpackUint10(character.traits >> 50);\\n        _characterTraits.mouth = _unpackUint10(character.traits >> 60);\\n        _characterTraits.beard = _unpackUint10(character.traits >> 70);\\n        _characterTraits.top = _unpackUint10(character.traits >> 80);\\n        _characterTraits.outerwear = _unpackUint10(character.traits >> 90);\\n        _characterTraits.print = _unpackUint10(character.traits >> 100);\\n        _characterTraits.bottom = _unpackUint10(character.traits >> 110);\\n        _characterTraits.footwear = _unpackUint10(character.traits >> 120);\\n        _characterTraits.belt = _unpackUint10(character.traits >> 130);\\n        _characterTraits.hat = _unpackUint10(character.traits >> 140);\\n        _characterTraits.eyewear = _unpackUint10(character.traits >> 150);\\n        _characterTraits.piercing = _unpackUint10(character.traits >> 160);\\n        _characterTraits.wrist = _unpackUint10(character.traits >> 170);\\n        _characterTraits.hands = _unpackUint10(character.traits >> 180);\\n        _characterTraits.neckwear = _unpackUint10(character.traits >> 190);\\n        _characterTraits.leftItem = _unpackUint10(character.traits >> 200);\\n        _characterTraits.rightItem = _unpackUint10(character.traits >> 210);\\n    }\\n\\n    // Public functions\\n\\n    /**\\n     * @notice Check whether trait combo is unique\\n     * @param traitCombo Generated trait combo packed into uint256\\n     * @return True if combo is unique and available\\n     */\\n    function isUnique(uint256 traitCombo) public view returns (bool) {\\n        return !_existMap[traitCombo];\\n    }\\n\\n    /**\\n     * @notice Check whether trait is still available\\n     * @param trait ID of trait\\n     * @return True if trait has not been removed\\n     */\\n    function isAvailableTrait(uint256 trait) public view returns (bool) {\\n        return !_removedTraitsMap[trait];\\n    }\\n\\n    // Internal functions\\n\\n    /**\\n     * @notice Unpack trait id from trait list\\n     * @param traits Section within trait combo\\n     * @return Trait ID\\n     */\\n    function _unpackUint10(uint256 traits) internal pure returns (uint16) {\\n        return uint16(traits) & 0x03FF;\\n    }\\n\\n    /**\\n     * @notice Generates uint256 bitwise trait combo\\n     * @param character Indexed list of character traits\\n     * @param head Indexed list of head traits\\n     * @param clothing Indexed list of clothing options\\n     * @param accessories Indexed list of accessories\\n     * @param items Indexed list of items\\n     * @dev Each trait is stored in 10 bits\\n     * @return Trait combo packed into uint256\\n     */\\n    function _generateTraitCombo(\\n        uint256[5] memory character,\\n        uint256[3] memory head,\\n        uint256[6] memory clothing,\\n        uint256[6] memory accessories,\\n        uint256[2] memory items\\n    ) internal pure returns (uint256) {\\n        uint256 traits = character[0];\\n        traits |= character[1] << 10;\\n        traits |= character[2] << 20;\\n        traits |= character[3] << 30;\\n        traits |= character[4] << 40;\\n        traits |= head[0] << 50;\\n        traits |= head[1] << 60;\\n        traits |= head[2] << 70;\\n        traits |= clothing[0] << 80;\\n        traits |= clothing[1] << 90;\\n        traits |= clothing[2] << 100;\\n        traits |= clothing[3] << 110;\\n        traits |= clothing[4] << 120;\\n        traits |= clothing[5] << 130;\\n        traits |= accessories[0] << 140;\\n        traits |= accessories[1] << 150;\\n        traits |= accessories[2] << 160;\\n        traits |= accessories[3] << 170;\\n        traits |= accessories[4] << 180;\\n        traits |= accessories[5] << 190;\\n        traits |= items[0] << 200;\\n        traits |= items[1] << 210;\\n        return traits;\\n    }\\n}\\n\"},\"contracts/NameableCharacter.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"./NiftyLeagueCharacter.sol\\\";\\n\\ninterface INFTL is IERC20 {\\n    function burnFrom(address account, uint256 amount) external;\\n}\\n\\n/**\\n * @title NameableCharacter (Extendable to allow name changes on NFTs)\\n * @dev Extends NiftyLeagueCharacter (ERC721)\\n */\\nabstract contract NameableCharacter is NiftyLeagueCharacter {\\n    /// @notice Cost to change character name in NFTL\\n    uint256 public constant NAME_CHANGE_PRICE = 1000e18; // 1000 NFTL\\n\\n    /// @dev Mapping if name string is already used\\n    mapping(string => bool) private _nameReserved;\\n\\n    event NameUpdated(uint256 indexed tokenId, string previousName, string newName);\\n\\n    // External functions\\n\\n    /**\\n     * @notice Retrieve name of token\\n     * @param tokenId ID of NFT\\n     * @return NFT name\\n     */\\n    function getName(uint256 tokenId) external view returns (string memory) {\\n        require(_exists(tokenId), \\\"nonexistent token\\\");\\n        return _characters[tokenId].name;\\n    }\\n\\n    /**\\n     * @notice Change name of NFT payable with {NAME_CHANGE_PRICE} NFTL\\n     * @param tokenId ID of NFT\\n     * @param newName New name to validate and set on NFT\\n     * @return New NFT name\\n     */\\n    function changeName(uint256 tokenId, string memory newName) external returns (string memory) {\\n        require(_exists(tokenId), \\\"nonexistent token\\\");\\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \\\"Caller is not owner nor approved\\\");\\n        string memory prevName = _characters[tokenId].name;\\n        require(sha256(bytes(newName)) != sha256(bytes(prevName)), \\\"New name and old name are equal\\\");\\n        require(validateName(newName), \\\"Name is not allowed\\\");\\n        require(!isNameReserved(newName), \\\"Name already reserved\\\");\\n\\n        INFTL(_nftlAddress).burnFrom(_msgSender(), NAME_CHANGE_PRICE);\\n        if (bytes(_characters[tokenId].name).length > 0) {\\n            _toggleReserveName(_characters[tokenId].name, false);\\n        }\\n        _toggleReserveName(newName, true);\\n        _characters[tokenId].name = newName;\\n        emit NameUpdated(tokenId, prevName, newName);\\n        return newName;\\n    }\\n\\n    // Public functions\\n\\n    /**\\n     * @notice Check if name is already reserved\\n     * @param nameString Name to validate\\n     * @return True if name is unique\\n     */\\n    function isNameReserved(string memory nameString) public view returns (bool) {\\n        return _nameReserved[_toLower(nameString)];\\n    }\\n\\n    /**\\n     * @notice Check for valid name string (Alphanumeric and spaces without leading or trailing space)\\n     * @param newName Name to validate\\n     * @return True if name input is valid\\n     */\\n    function validateName(string memory newName) public pure returns (bool) {\\n        bytes memory byteName = bytes(newName);\\n        if (byteName.length < 1 || byteName.length > 32) return false; // name cannot be longer than 32 characters\\n        if (byteName[0] == 0x20 || byteName[byteName.length - 1] == 0x20) return false; // reject leading and trailing space\\n\\n        bytes1 lastChar = byteName[0];\\n        for (uint256 i; i < byteName.length; i++) {\\n            bytes1 currentChar = byteName[i];\\n            if (currentChar == 0x20 && lastChar == 0x20) return false; // reject double spaces\\n            if (\\n                !(currentChar >= 0x30 && currentChar <= 0x39) && //0-9\\n                !(currentChar >= 0x41 && currentChar <= 0x5A) && //A-Z\\n                !(currentChar >= 0x61 && currentChar <= 0x7A) && //a-z\\n                !(currentChar == 0x20) //space\\n            ) return false;\\n            lastChar = currentChar;\\n        }\\n        return true;\\n    }\\n\\n    // Private functions\\n\\n    /**\\n     * @notice Reserves the name if isReserve is set to true, de-reserves if set to false\\n     * @param str NFT name string\\n     * @param isReserved Bool if name should be reserved or not\\n     */\\n    function _toggleReserveName(string memory str, bool isReserved) private {\\n        _nameReserved[_toLower(str)] = isReserved;\\n    }\\n\\n    /**\\n     * @notice Converts strings to lowercase\\n     * @param str Any string\\n     * @return String to lower case\\n     */\\n    function _toLower(string memory str) private pure returns (string memory) {\\n        bytes memory bStr = bytes(str);\\n        bytes memory bLower = new bytes(bStr.length);\\n        for (uint256 i = 0; i < bStr.length; i++) {\\n            if ((uint8(bStr[i]) >= 65) && (uint8(bStr[i]) <= 90)) {\\n                bLower[i] = bytes1(uint8(bStr[i]) + 32);\\n            } else {\\n                bLower[i] = bStr[i];\\n            }\\n        }\\n        return string(bLower);\\n    }\\n}\\n\"},\"contracts/AllowedColorsStorage.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\n\\n/**\\n * @title AllowedColorsStorage\\n * @dev Color indexes need to be restricted per tribe prior to NFT deploy\\n */\\ncontract AllowedColorsStorage is Ownable {\\n    /// @dev Mapping if color is allowed for selected tribe\\n    mapping(uint256 => mapping(uint256 => bool)) private _tribeColorAllowed;\\n\\n    constructor() {}\\n\\n    /**\\n     * @notice Set allowed on a given a list of colors\\n     * @param tribe Tribe ID 1-10\\n     * @param colors List of colors to set for tribe\\n     * @param allowed Bool if the color list should be made allowed or not\\n     */\\n    function setAllowedColorsOnTribe(\\n        uint256 tribe,\\n        uint256[] memory colors,\\n        bool allowed\\n    ) external onlyOwner {\\n        require(tribe > 0 && tribe < 10, \\\"Invalid tribe provided\\\");\\n        for (uint256 i = 0; i < colors.length; i++) {\\n            _toggleColorAllowed(tribe, colors[i], allowed);\\n        }\\n    }\\n\\n    /**\\n     * @notice Toggle color allowed on and off for a tribe\\n     * @param tribe Tribe ID\\n     * @param color Trait ID\\n     * @param allowed Bool if the color should be made allowed or not\\n     * @dev Defaults to false if never set\\n     */\\n    function _toggleColorAllowed(\\n        uint256 tribe,\\n        uint256 color,\\n        bool allowed\\n    ) private {\\n        _tribeColorAllowed[tribe][color] = allowed;\\n    }\\n\\n    /**\\n     * @notice Check if color is allowed for a tribe\\n     * @param tribe Tribe ID\\n     * @param color Trait ID\\n     * @return True if color is allowed for tribe\\n     */\\n    function isAllowedColor(uint256 tribe, uint256 color) public view returns (bool) {\\n        return _tribeColorAllowed[tribe][color];\\n    }\\n}\\n\"},\"hardhat/console.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >= 0.4.22 <0.9.0;\\n\\nlibrary console {\\n\\taddress constant CONSOLE_ADDRESS = address(0x000000000000000000636F6e736F6c652e6c6f67);\\n\\n\\tfunction _sendLogPayload(bytes memory payload) private view {\\n\\t\\tuint256 payloadLength = payload.length;\\n\\t\\taddress consoleAddress = CONSOLE_ADDRESS;\\n\\t\\tassembly {\\n\\t\\t\\tlet payloadStart := add(payload, 32)\\n\\t\\t\\tlet r := staticcall(gas(), consoleAddress, payloadStart, payloadLength, 0, 0)\\n\\t\\t}\\n\\t}\\n\\n\\tfunction log() internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log()\\\"));\\n\\t}\\n\\n\\tfunction logInt(int p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(int)\\\", p0));\\n\\t}\\n\\n\\tfunction logUint(uint p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint)\\\", p0));\\n\\t}\\n\\n\\tfunction logString(string memory p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string)\\\", p0));\\n\\t}\\n\\n\\tfunction logBool(bool p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool)\\\", p0));\\n\\t}\\n\\n\\tfunction logAddress(address p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes(bytes memory p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes1(bytes1 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes1)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes2(bytes2 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes2)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes3(bytes3 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes3)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes4(bytes4 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes4)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes5(bytes5 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes5)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes6(bytes6 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes6)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes7(bytes7 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes7)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes8(bytes8 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes8)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes9(bytes9 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes9)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes10(bytes10 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes10)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes11(bytes11 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes11)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes12(bytes12 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes12)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes13(bytes13 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes13)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes14(bytes14 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes14)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes15(bytes15 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes15)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes16(bytes16 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes16)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes17(bytes17 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes17)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes18(bytes18 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes18)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes19(bytes19 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes19)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes20(bytes20 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes20)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes21(bytes21 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes21)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes22(bytes22 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes22)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes23(bytes23 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes23)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes24(bytes24 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes24)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes25(bytes25 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes25)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes26(bytes26 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes26)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes27(bytes27 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes27)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes28(bytes28 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes28)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes29(bytes29 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes29)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes30(bytes30 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes30)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes31(bytes31 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes31)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes32(bytes32 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes32)\\\", p0));\\n\\t}\\n\\n\\tfunction log(uint p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint)\\\", p0));\\n\\t}\\n\\n\\tfunction log(string memory p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string)\\\", p0));\\n\\t}\\n\\n\\tfunction log(bool p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool)\\\", p0));\\n\\t}\\n\\n\\tfunction log(address p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address)\\\", p0));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(address p0, address p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n}\\n\"}}}",
  "address": "0x986aea67C7d6A15036e18678065eb663Fc5BE883",
  "bytecode": "0x60e06040819052600060c08190526200001b91600f9162000151565b503480156200002957600080fd5b5060405162004a4738038062004a478339810160408190526200004c9162000214565b604080518082018252600a8152692734b33a3ca232b3b2b760b11b6020808301918252835180850190945260058452642222a3a2a760d91b90840152815185939183918391620000a0916000919062000151565b508051620000b690600190602084019062000151565b505050620000d3620000cd620000fb60201b60201c565b620000ff565b50506006805460ff60a01b191690556001600160a01b039081166080521660a0525062000289565b3390565b600680546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b8280546200015f906200024c565b90600052602060002090601f016020900481019282620001835760008555620001ce565b82601f106200019e57805160ff1916838001178555620001ce565b82800160010185558215620001ce579182015b82811115620001ce578251825591602001919060010190620001b1565b50620001dc929150620001e0565b5090565b5b80821115620001dc5760008155600101620001e1565b80516001600160a01b03811681146200020f57600080fd5b919050565b600080604083850312156200022857600080fd5b6200023383620001f7565b91506200024360208401620001f7565b90509250929050565b600181811c908216806200026157607f821691505b602082108114156200028357634e487b7160e01b600052602260045260246000fd5b50919050565b60805160a051614798620002af6000396000611e0c0152600061199b01526147986000f3fe6080604052600436106102255760003560e01c806370a0823111610123578063b88d4fde116100ab578063e13cae401161006f578063e13cae4014610652578063e985e9c514610667578063f2fde38b146106b0578063fb107a4f146106d0578063ff88dea9146106e557600080fd5b8063b88d4fde146105bd578063c39cbef1146105dd578063c87b56dd146105fd578063d92559ad1461061d578063da8fbf2a1461063d57600080fd5b806395d89b41116100f257806395d89b41146105265780639b046ed31461053b5780639ffdb65a14610568578063a22cb46514610588578063ae200322146105a857600080fd5b806370a08231146104c0578063715018a6146104e057806372c9f580146104f55780638da5cb5b1461050857600080fd5b806318160ddd116101b157806354b6f1611161017557806354b6f1611461042457806355f804b3146104415780635c975abb146104615780636352211e146104805780636b8ff574146104a057600080fd5b806318160ddd1461039457806323b872dd146103b957806332cb6b0c146103d95780633ccfd60b146103ef57806342842e0e1461040457600080fd5b8063081812fc116101f8578063081812fc146102c9578063095ea7b31461030157806315b56d10146103215780631656efc61461034157806317bed2c51461037257600080fd5b80630194cf121461022a57806301ffc9a71461024157806306fdde03146102765780630750d2fb14610298575b600080fd5b34801561023657600080fd5b5061023f610705565b005b34801561024d57600080fd5b5061026161025c366004613cae565b61097d565b60405190151581526020015b60405180910390f35b34801561028257600080fd5b5061028b6109cf565b60405161026d9190613d23565b3480156102a457600080fd5b506102616102b3366004613d36565b60009081526008602052604090205460ff161590565b3480156102d557600080fd5b506102e96102e4366004613d36565b610a61565b6040516001600160a01b03909116815260200161026d565b34801561030d57600080fd5b5061023f61031c366004613d6b565b610a88565b34801561032d57600080fd5b5061026161033c366004613e6a565b610ba3565b34801561034d57600080fd5b5061026161035c366004613d36565b60009081526009602052604090205460ff161590565b34801561037e57600080fd5b50610387610bd6565b60405161026d9190613e9f565b3480156103a057600080fd5b50600c546103ab9081565b60405190815260200161026d565b3480156103c557600080fd5b5061023f6103d4366004613ee7565b610c55565b3480156103e557600080fd5b506103ab61271081565b3480156103fb57600080fd5b5061023f610c86565b34801561041057600080fd5b5061023f61041f366004613ee7565b610cc1565b34801561043057600080fd5b506103ab683635c9adc5dea0000081565b34801561044d57600080fd5b5061023f61045c366004613e6a565b610cdc565b34801561046d57600080fd5b50600654600160a01b900460ff16610261565b34801561048c57600080fd5b506102e961049b366004613d36565b610cf7565b3480156104ac57600080fd5b5061028b6104bb366004613d36565b610d57565b3480156104cc57600080fd5b506103ab6104db366004613f23565b610e1f565b3480156104ec57600080fd5b5061023f610ea5565b61023f610503366004614049565b610eb9565b34801561051457600080fd5b506006546001600160a01b03166102e9565b34801561053257600080fd5b5061028b6110cb565b34801561054757600080fd5b5061055b610556366004613d36565b6110da565b60405161026d9190614111565b34801561057457600080fd5b50610261610583366004613e6a565b61149d565b34801561059457600080fd5b5061023f6105a3366004614289565b61169e565b3480156105b457600080fd5b5061023f6116a9565b3480156105c957600080fd5b5061023f6105d83660046142c0565b6116b9565b3480156105e957600080fd5b5061028b6105f836600461433c565b6116f1565b34801561060957600080fd5b5061028b610618366004613d36565b611b69565b34801561062957600080fd5b5061023f610638366004613d36565b611bd0565b34801561064957600080fd5b5061023f611bdd565b34801561065e57600080fd5b506103ab606481565b34801561067357600080fd5b50610261610682366004614383565b6001600160a01b03918216600090815260056020908152604080832093909416825291909152205460ff1690565b3480156106bc57600080fd5b5061023f6106cb366004613f23565b611bed565b3480156106dc57600080fd5b506103ab611c66565b3480156106f157600080fd5b506102616107003660046143b6565b611dbf565b61070d611e89565b600d60205260717fa5049387d9cb649c59f4bda666105ba636c2a103d8e2b232ba4d125737cd214955600e7fa48544818c2c710afa9849c61ec9c60e8acdb3eaa2885f33b37e118cc8fd04ac55603f7fb91432bedff11256dbe14161d3606a2657bc9dacf8742f6b817d871dd53fb9765560637f0b705463cf5f7356780ee6e96132d37412c1b5816a4d207b8dcd42c34976745755604c7f7b6f1ece0cbe5122a575776770f0494c2d57ed2a50e36c2ba0d811d70ee03b645560297fba9d637f252776d5e1b3534bbd7554a1265a4ef0539d9ca50abe118598a6973c5560657f52c2086a203f40e709b1346663401f6c737b2fce5878601fcf875b047fed5fb65560257fe399baa2fabbab2a0309615b124a802277bab50ec0ca3452a00889e216c4b902819055600c7fe0af3347aa7e5af384208c9d29458f902f0ceddbc90963608afa77235658b360819055602b7f154ef5b709dcdc8b49a2af6408b8a1af209c39b5fa796f03680257c97692546e5560327f52fb6a28cb3c239105f8f829bc7376f939b6bfb040c470bdc2bda0af2e784b9455600a7f01a49be1e7ea084651fd665847100d28826db0b17160863a99534933cbbd2dce557f6fbf3b49b523bc27464b7dbfa6311951351b1d3efd07aa2ee4d1ce319801a0ce5560197f0a206051e911305809ddd48cf2baa7ead2c7fb038e505e1d02f9e6c2ce72930c557f1341e158d1184a2eb4edb96b016176e1c5ad075baae6651557fb93ae3925007a55605c7fdd2af3330d298808a303a10bc360333536e7697099bb3fe7200b0c272de6655855601560005260307f35c0ef8c6f7488ebe28ad34a3af68b3aa3aea0693e227054e9ec90bd504f66d255565b60006001600160e01b031982166380ac58cd60e01b14806109ae57506001600160e01b03198216635b5e139f60e01b145b806109c957506301ffc9a760e01b6001600160e01b03198316145b92915050565b6060600080546109de906143d8565b80601f0160208091040260200160405190810160405280929190818152602001828054610a0a906143d8565b8015610a575780601f10610a2c57610100808354040283529160200191610a57565b820191906000526020600020905b815481529060010190602001808311610a3a57829003601f168201915b5050505050905090565b6000610a6c82611ee3565b506000908152600460205260409020546001600160a01b031690565b6000610a9382610cf7565b9050806001600160a01b0316836001600160a01b03161415610b065760405162461bcd60e51b815260206004820152602160248201527f4552433732313a20617070726f76616c20746f2063757272656e74206f776e656044820152603960f91b60648201526084015b60405180910390fd5b336001600160a01b0382161480610b225750610b228133610682565b610b945760405162461bcd60e51b815260206004820152603d60248201527f4552433732313a20617070726f76652063616c6c6572206973206e6f7420746f60448201527f6b656e206f776e6572206f7220617070726f76656420666f7220616c6c0000006064820152608401610afd565b610b9e8383611f33565b505050565b6000600b610bb083611fa1565b604051610bbd9190614413565b9081526040519081900360200190205460ff1692915050565b6060600a805480602002602001604051908101604052809291908181526020018280548015610a5757602002820191906000526020600020906000905b82829054906101000a900461ffff1661ffff1681526020019060020190602082600101049283019260010382029150808411610c135790505050505050905090565b610c5f3382612104565b610c7b5760405162461bcd60e51b8152600401610afd9061442f565b610b9e838383612182565b610c8e611e89565b6040514790339082156108fc029083906000818181858888f19350505050158015610cbd573d6000803e3d6000fd5b5050565b610b9e838383604051806020016040528060008152506116b9565b610ce4611e89565b8051610cbd90600f906020840190613bff565b6000818152600260205260408120546001600160a01b0316806109c95760405162461bcd60e51b8152602060048201526018602482015277115490cdcc8c4e881a5b9d985b1a59081d1bdad95b88125160421b6044820152606401610afd565b6060610d62826122f3565b610d7e5760405162461bcd60e51b8152600401610afd9061447c565b60008281526007602052604090206001018054610d9a906143d8565b80601f0160208091040260200160405190810160405280929190818152602001828054610dc6906143d8565b8015610e135780601f10610de857610100808354040283529160200191610e13565b820191906000526020600020905b815481529060010190602001808311610df657829003601f168201915b50505050509050919050565b60006001600160a01b038216610e895760405162461bcd60e51b815260206004820152602960248201527f4552433732313a2061646472657373207a65726f206973206e6f7420612076616044820152683634b21037bbb732b960b91b6064820152608401610afd565b506001600160a01b031660009081526003602052604090205490565b610ead611e89565b610eb76000612310565b565b610ec1612362565b6000610ecc600c5490565b9050600381101580610ee857506006546001600160a01b031633145b610f2b5760405162461bcd60e51b815260206004820152601460248201527314d85b19481a185cc81b9bdd081cdd185c9d195960621b6044820152606401610afd565b610f33611c66565b3414610f795760405162461bcd60e51b8152602060048201526015602482015274115d1a195c881d985b1d59481a5b98dbdc9c9958dd605a1b6044820152606401610afd565b610f8686868686866123af565b60006110b78787878787600080868160200201519050600a8760016020020151901b1760148760026020020151901b17601e8760036020020151901b1760288760046020020151901b1760328660006020020151901b17603c8660016020020151901b1760468660026020020151901b1760508560006020020151901b17605a8560016020020151901b1760648560026020020151901b17606e8560036020020151901b1760788560046020020151901b1760828560056020020151901b17608c8460006020020151901b1760968460016020020151901b1760a08460026020020151901b1760aa8460036020020151901b1760b48460046020020151901b1760be8460056020020151901b1760c88360006020020151901b1760d28360016020020151901b179695505050505050565b90506110c2816131e2565b50505050505050565b6060600180546109de906143d8565b604080516102c081018252600080825260208201819052918101829052606081018290526080810182905260a0810182905260c0810182905260e08101829052610100810182905261012081018290526101408101829052610160810182905261018081018290526101a081018290526101c081018290526101e08101829052610200810182905261022081018290526102408101829052610260810182905261028081018290526102a0810191909152611194826122f3565b6111b05760405162461bcd60e51b8152600401610afd9061447c565b600060076000848152602001908152602001600020604051806040016040529081600082015481526020016001820180546111ea906143d8565b80601f0160208091040260200160405190810160405280929190818152602001828054611216906143d8565b80156112635780601f1061123857610100808354040283529160200191611263565b820191906000526020600020905b81548152906001019060200180831161124657829003601f168201915b5050509190925250508151919250506103ff1661ffff168252805161128c90600a1c6103ff1690565b61ffff16602083015280516112a59060141c6103ff1690565b61ffff16604083015280516112be90601e1c6103ff1690565b61ffff16606083015280516112d79060281c6103ff1690565b61ffff16608083015280516112f09060321c6103ff1690565b61ffff1660a0830152805161130990603c1c6103ff1690565b61ffff1660c083015280516113229060461c6103ff1690565b61ffff1660e0830152805161133b9060501c6103ff1690565b61ffff16610100830152805161135590605a1c6103ff1690565b61ffff16610120830152805161136f9060641c6103ff1690565b61ffff16610140830152805161138990606e1c6103ff1690565b61ffff1661016083015280516113a39060781c6103ff1690565b61ffff1661018083015280516113bd9060821c6103ff1690565b61ffff166101a083015280516113d790608c1c6103ff1690565b61ffff166101c083015280516113f19060961c6103ff1690565b61ffff166101e0830152805161140b9060a01c6103ff1690565b61ffff1661020083015280516114259060aa1c6103ff1690565b61ffff16610220830152805161143f9060b41c6103ff1690565b61ffff1661024083015280516114599060be1c6103ff1690565b61ffff1661026083015280516114739060c81c6103ff1690565b61ffff16610280830152805161148d9060d21c6103ff1690565b61ffff166102a083015250919050565b6000808290506001815110806114b4575060208151115b156114c25750600092915050565b806000815181106114d5576114d56144a7565b6020910101516001600160f81b031916600160fd1b14806115275750806001825161150091906144d3565b81518110611510576115106144a7565b6020910101516001600160f81b031916600160fd1b145b156115355750600092915050565b60008160008151811061154a5761154a6144a7565b01602001516001600160f81b031916905060005b825181101561169357600083828151811061157b5761157b6144a7565b01602001516001600160f81b0319169050600160fd1b811480156115ac5750600160fd1b6001600160f81b03198416145b156115bd5750600095945050505050565b600360fc1b6001600160f81b03198216108015906115e95750603960f81b6001600160f81b0319821611155b15801561161f5750604160f81b6001600160f81b031982161080159061161d5750602d60f91b6001600160f81b0319821611155b155b80156116545750606160f81b6001600160f81b03198216108015906116525750603d60f91b6001600160f81b0319821611155b155b801561166e5750600160fd1b6001600160f81b0319821614155b1561167f5750600095945050505050565b91508061168b816144ea565b91505061155e565b506001949350505050565b610cbd3383836132db565b6116b1611e89565b610eb76133aa565b6116c33383612104565b6116df5760405162461bcd60e51b8152600401610afd9061442f565b6116eb848484846133ff565b50505050565b60606116fc836122f3565b6117185760405162461bcd60e51b8152600401610afd9061447c565b6117223384612104565b61176e5760405162461bcd60e51b815260206004820181905260248201527f43616c6c6572206973206e6f74206f776e6572206e6f7220617070726f7665646044820152606401610afd565b6000838152600760205260408120600101805461178a906143d8565b80601f01602080910402602001604051908101604052809291908181526020018280546117b6906143d8565b80156118035780601f106117d857610100808354040283529160200191611803565b820191906000526020600020905b8154815290600101906020018083116117e657829003601f168201915b5050505050905060028160405161181a9190614413565b602060405180830381855afa158015611837573d6000803e3d6000fd5b5050506040513d601f19601f8201168201806040525081019061185a9190614505565b60028460405161186a9190614413565b602060405180830381855afa158015611887573d6000803e3d6000fd5b5050506040513d601f19601f820116820180604052508101906118aa9190614505565b14156118f85760405162461bcd60e51b815260206004820152601f60248201527f4e6577206e616d6520616e64206f6c64206e616d652061726520657175616c006044820152606401610afd565b6119018361149d565b6119435760405162461bcd60e51b815260206004820152601360248201527213985b59481a5cc81b9bdd08185b1b1bddd959606a1b6044820152606401610afd565b61194c83610ba3565b156119915760405162461bcd60e51b815260206004820152601560248201527413985b5948185b1c9958591e481c995cd95c9d9959605a1b6044820152606401610afd565b6001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000166379cc6790336040516001600160e01b031960e084901b1681526001600160a01b039091166004820152683635c9adc5dea000006024820152604401600060405180830381600087803b158015611a1157600080fd5b505af1158015611a25573d6000803e3d6000fd5b5050506000858152600760205260408120600101805491925090611a48906143d8565b90501115611af65760008481526007602052604090206001018054611af69190611a71906143d8565b80601f0160208091040260200160405190810160405280929190818152602001828054611a9d906143d8565b8015611aea5780601f10611abf57610100808354040283529160200191611aea565b820191906000526020600020905b815481529060010190602001808311611acd57829003601f168201915b50505050506000613432565b611b01836001613432565b60008481526007602090815260409091208451611b2692600190920191860190613bff565b50837f8eff5208043d31f23e348dc06be3a80821505e5b3e0002e9fa1185f5d47eac598285604051611b5992919061451e565b60405180910390a2509092915050565b6060611b7482611ee3565b6000611b7e61346f565b90506000815111611b9e5760405180602001604052806000815250611bc9565b80611ba88461347e565b604051602001611bb992919061454c565b6040516020818303038152906040525b9392505050565b611bd8611e89565b600e55565b611be5611e89565b610eb7613513565b611bf5611e89565b6001600160a01b038116611c5a5760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b6064820152608401610afd565b611c6381612310565b50565b600080611c72600c5490565b9050611c8160646127106144d3565b811080611ca457506006546001600160a01b031633148015611ca4575061271081105b611ce95760405162461bcd60e51b815260206004820152601660248201527514d85b19481a185cc8185b1c9958591e48195b99195960521b6044820152606401610afd565b6003811080611cfa57506126ac8110155b15611d0757600091505090565b67011c37937e080000600e5410611d20575050600e5490565b61251c8110611d38576703e2c284391c000091505090565b6121348110611d50576703782dace9d9000091505090565b6119648110611d685767030d98d59a96000091505090565b6111948110611d80576702a303fe4b53000091505090565b6109c48110611d98576702386f26fc10000091505090565b6103e88110611db0576701cdda4faccd000091505090565b67016345785d8a000091505090565b600081611dce575060016109c9565b60968210611def575060008181526009602052604090205460ff16156109c9565b60405163968ef8f560e01b815260048101849052602481018390527f0000000000000000000000000000000000000000000000000000000000000000906001600160a01b0382169063968ef8f590604401602060405180830381865afa158015611e5d573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611e81919061457b565b949350505050565b6006546001600160a01b03163314610eb75760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152606401610afd565b611eec816122f3565b611c635760405162461bcd60e51b8152602060048201526018602482015277115490cdcc8c4e881a5b9d985b1a59081d1bdad95b88125160421b6044820152606401610afd565b600081815260046020526040902080546001600160a01b0319166001600160a01b0384169081179091558190611f6882610cf7565b6001600160a01b03167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92560405160405180910390a45050565b606060008290506000815167ffffffffffffffff811115611fc457611fc4613d95565b6040519080825280601f01601f191660200182016040528015611fee576020820181803683370190505b50905060005b82518110156120fc576041838281518110612011576120116144a7565b016020015160f81c108015906120415750605a838281518110612036576120366144a7565b016020015160f81c11155b156120a357828181518110612058576120586144a7565b602001015160f81c60f81b60f81c60206120729190614598565b60f81b828281518110612087576120876144a7565b60200101906001600160f81b031916908160001a9053506120ea565b8281815181106120b5576120b56144a7565b602001015160f81c60f81b8282815181106120d2576120d26144a7565b60200101906001600160f81b031916908160001a9053505b806120f4816144ea565b915050611ff4565b509392505050565b60008061211083610cf7565b9050806001600160a01b0316846001600160a01b0316148061215757506001600160a01b0380821660009081526005602090815260408083209388168352929052205460ff165b80611e815750836001600160a01b031661217084610a61565b6001600160a01b031614949350505050565b826001600160a01b031661219582610cf7565b6001600160a01b0316146121bb5760405162461bcd60e51b8152600401610afd906145bd565b6001600160a01b03821661221d5760405162461bcd60e51b8152602060048201526024808201527f4552433732313a207472616e7366657220746f20746865207a65726f206164646044820152637265737360e01b6064820152608401610afd565b61222a8383836001613556565b826001600160a01b031661223d82610cf7565b6001600160a01b0316146122635760405162461bcd60e51b8152600401610afd906145bd565b600081815260046020908152604080832080546001600160a01b03199081169091556001600160a01b0387811680865260038552838620805460001901905590871680865283862080546001019055868652600290945282852080549092168417909155905184937fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef91a4505050565b6000908152600260205260409020546001600160a01b0316151590565b600680546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b600654600160a01b900460ff1615610eb75760405162461bcd60e51b815260206004820152601060248201526f14185d5cd8589b194e881c185d5cd95960821b6044820152606401610afd565b845180158015906123e157506006811115806123e15750600981111580156123e157506006546001600160a01b031633145b61241f5760405162461bcd60e51b815260206004820152600f60248201526e151c9a5899481a5b98dbdc9c9958dd608a1b6044820152606401610afd565b602086015161243190600a60456135de565b8061244c575061244c8660015b6020020151607760956135de565b61248f5760405162461bcd60e51b815260206004820152601460248201527314dada5b8818dbdb1bdc881a5b98dbdc9c9958dd60621b6044820152606401610afd565b60408601516124a190604660646135de565b806124b257506124b286600261243e565b6124f45760405162461bcd60e51b8152602060048201526013602482015272119d5c8818dbdb1bdc881a5b98dbdc9c9958dd606a1b6044820152606401610afd565b6060860151612506906065606d6135de565b80612517575061251786600361243e565b6125595760405162461bcd60e51b8152602060048201526013602482015272115e594818dbdb1bdc881a5b98dbdc9c9958dd606a1b6044820152606401610afd565b608086015161256b90606e60766135de565b8061257c575061257c86600461243e565b6125c05760405162461bcd60e51b8152602060048201526015602482015274141d5c1a5b0818dbdb1bdc881a5b98dbdc9c9958dd605a1b6044820152606401610afd565b84516125d09060966101066135de565b61260d5760405162461bcd60e51b815260206004820152600e60248201526d12185a5c881a5b98dbdc9c9958dd60921b6044820152606401610afd565b6020850151612621906101076101146135de565b61265f5760405162461bcd60e51b815260206004820152600f60248201526e135bdd5d1a081a5b98dbdc9c9958dd608a1b6044820152606401610afd565b6040850151612673906101156101536135de565b6126b15760405162461bcd60e51b815260206004820152600f60248201526e1099585c99081a5b98dbdc9c9958dd608a1b6044820152606401610afd565b83516126c2906101546101b66135de565b6126fe5760405162461bcd60e51b815260206004820152600d60248201526c151bdc081a5b98dbdc9c9958dd609a1b6044820152606401610afd565b6020840151612712906101b76102026135de565b6127545760405162461bcd60e51b815260206004820152601360248201527213dd5d195c9dd9585c881a5b98dbdc9c9958dd606a1b6044820152606401610afd565b60408401516127689061020361022b6135de565b6127a65760405162461bcd60e51b815260206004820152600f60248201526e141c9a5b9d081a5b98dbdc9c9958dd608a1b6044820152606401610afd565b60608401516127ba9061022c6102916135de565b6127f95760405162461bcd60e51b815260206004820152601060248201526f109bdd1d1bdb481a5b98dbdc9c9958dd60821b6044820152606401610afd565b608084015161280d906102926102b66135de565b61284e5760405162461bcd60e51b8152602060048201526012602482015271119bdbdd1dd9585c881a5b98dbdc9c9958dd60721b6044820152606401610afd565b60a0840151612862906102b76102c26135de565b61289f5760405162461bcd60e51b815260206004820152600e60248201526d10995b1d081a5b98dbdc9c9958dd60921b6044820152606401610afd565b82516128b0906102c36102ed6135de565b6128ec5760405162461bcd60e51b815260206004820152600d60248201526c12185d081a5b98dbdc9c9958dd609a1b6044820152606401610afd565b6020830151612900906102ee61031f6135de565b6129405760405162461bcd60e51b8152602060048201526011602482015270115e595dd9585c881a5b98dbdc9c9958dd607a1b6044820152606401610afd565b6040830151612954906103206103296135de565b6129955760405162461bcd60e51b8152602060048201526012602482015271141a595c98da5b99c81a5b98dbdc9c9958dd60721b6044820152606401610afd565b60608301516129a99061032a6103356135de565b6129f55760405162461bcd60e51b815260206004820152601960248201527f5772697374206163636573736f727920696e636f7272656374000000000000006044820152606401610afd565b6080830151612a099061033661034e6135de565b612a555760405162461bcd60e51b815260206004820152601960248201527f48616e6473206163636573736f727920696e636f7272656374000000000000006044820152606401610afd565b60a0830151612a699061034f6103736135de565b612aaa5760405162461bcd60e51b8152602060048201526012602482015271139958daddd9585c881a5b98dbdc9c9958dd60721b6044820152606401610afd565b8151612abb906103746103cf6135de565b612afd5760405162461bcd60e51b81526020600482015260136024820152721319599d081a5d195b481a5b98dbdc9c9958dd606a1b6044820152606401610afd565b6020820151612b11906103d06103ff6135de565b612b545760405162461bcd60e51b8152602060048201526014602482015273149a59da1d081a5d195b481a5b98dbdc9c9958dd60621b6044820152606401610afd565b612b66818760015b6020020151611dbf565b612bab5760405162461bcd60e51b8152602060048201526016602482015275536b696e20636f6c6f7220756e617661696c61626c6560501b6044820152606401610afd565b612bb781876002612b5c565b612bfb5760405162461bcd60e51b815260206004820152601560248201527446757220636f6c6f7220756e617661696c61626c6560581b6044820152606401610afd565b612c0781876003612b5c565b612c4b5760405162461bcd60e51b815260206004820152601560248201527445796520636f6c6f7220756e617661696c61626c6560581b6044820152606401610afd565b612c5781876004612b5c565b612ca35760405162461bcd60e51b815260206004820152601760248201527f507570696c20636f6c6f7220756e617661696c61626c650000000000000000006044820152606401610afd565b612caf81866000612b5c565b612cee5760405162461bcd60e51b815260206004820152601060248201526f4861697220756e617661696c61626c6560801b6044820152606401610afd565b612cfa81866001612b5c565b612d3a5760405162461bcd60e51b81526020600482015260116024820152704d6f75746820756e617661696c61626c6560781b6044820152606401610afd565b612d4681866002612b5c565b612d865760405162461bcd60e51b8152602060048201526011602482015270426561726420756e617661696c61626c6560781b6044820152606401610afd565b612d9281856000612b5c565b612dd05760405162461bcd60e51b815260206004820152600f60248201526e546f7020756e617661696c61626c6560881b6044820152606401610afd565b612ddc81856001612b5c565b612e205760405162461bcd60e51b81526020600482015260156024820152744f757465727765617220756e617661696c61626c6560581b6044820152606401610afd565b612e2c81856002612b5c565b612e6c5760405162461bcd60e51b81526020600482015260116024820152705072696e7420756e617661696c61626c6560781b6044820152606401610afd565b612e7881856003612b5c565b612eb95760405162461bcd60e51b8152602060048201526012602482015271426f74746f6d20756e617661696c61626c6560701b6044820152606401610afd565b612ec581856004612b5c565b612f085760405162461bcd60e51b8152602060048201526014602482015273466f6f747765617220756e617661696c61626c6560601b6044820152606401610afd565b612f1481856005612b5c565b612f535760405162461bcd60e51b815260206004820152601060248201526f42656c7420756e617661696c61626c6560801b6044820152606401610afd565b612f5f81846000612b5c565b612f9d5760405162461bcd60e51b815260206004820152600f60248201526e48617420756e617661696c61626c6560881b6044820152606401610afd565b612fa981846001612b5c565b612feb5760405162461bcd60e51b81526020600482015260136024820152724579657765617220756e617661696c61626c6560681b6044820152606401610afd565b612ff781846002612b5c565b61303a5760405162461bcd60e51b81526020600482015260146024820152735069657263696e6720756e617661696c61626c6560601b6044820152606401610afd565b61304681846003612b5c565b6130925760405162461bcd60e51b815260206004820152601b60248201527f5772697374206163636573736f727920756e617661696c61626c6500000000006044820152606401610afd565b61309e81846004612b5c565b6130ea5760405162461bcd60e51b815260206004820152601a60248201527f48616e64206163636573736f727920756e617661696c61626c650000000000006044820152606401610afd565b6130f681846005612b5c565b6131395760405162461bcd60e51b81526020600482015260146024820152734e65636b7765617220756e617661696c61626c6560601b6044820152606401610afd565b61314581836000612b5c565b6131895760405162461bcd60e51b81526020600482015260156024820152744c656674206974656d20756e617661696c61626c6560581b6044820152606401610afd565b61319581836001612b5c565b6131da5760405162461bcd60e51b81526020600482015260166024820152755269676874206974656d20756e617661696c61626c6560501b6044820152606401610afd565b505050505050565b60008181526008602052604090205460ff16156132415760405162461bcd60e51b815260206004820152601e60248201527f4e465420747261697420636f6d626f20616c72656164792065786973747300006044820152606401610afd565b6000818152600860205260409020805460ff19166001179055613268600c80546001019055565b6000613273600c5490565b9050613292604051806040016040528060008152602001606081525090565b82815260008281526007602090815260409091208251815581830151805184936132c3926001850192910190613bff565b509050506132d182846135fd565b610b9e338361376c565b816001600160a01b0316836001600160a01b0316141561333d5760405162461bcd60e51b815260206004820152601960248201527f4552433732313a20617070726f766520746f2063616c6c6572000000000000006044820152606401610afd565b6001600160a01b03838116600081815260056020908152604080832094871680845294825291829020805460ff191686151590811790915591519182527f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31910160405180910390a3505050565b6133b2613786565b6006805460ff60a01b191690557f5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa335b6040516001600160a01b03909116815260200160405180910390a1565b61340a848484612182565b613416848484846137d6565b6116eb5760405162461bcd60e51b8152600401610afd90614602565b80600b61343e84611fa1565b60405161344b9190614413565b908152604051908190036020019020805491151560ff199092169190911790555050565b6060600f80546109de906143d8565b6060600061348b836138cc565b600101905060008167ffffffffffffffff8111156134ab576134ab613d95565b6040519080825280601f01601f1916602001820160405280156134d5576020820181803683370190505b5090508181016020015b600019016f181899199a1a9b1b9c1cb0b131b232b360811b600a86061a8153600a850494508461350e576120fc565b6134df565b61351b612362565b6006805460ff60a01b1916600160a01b1790557f62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a2586133e23390565b60018111156116eb576001600160a01b0384161561359c576001600160a01b038416600090815260036020526040812080548392906135969084906144d3565b90915550505b6001600160a01b038316156116eb576001600160a01b038316600090815260036020526040812080548392906135d390849061466a565b909155505050505050565b6000831580611e815750828410158015611e8157505090911115919050565b600a546064811080156136185750613616600784614682565b155b8061364357506064811015801561362f575060c881105b80156136435750613641600984614682565b155b8061366f575060c8811015801561365b575061012c81105b801561366f575061366d600b84614682565b155b8061369c575061012c8110158015613688575061019081105b801561369c575061369a600d84614682565b155b15610b9e5760006136ac846139a4565b905060006136c86136be83600a614696565b85901c6103ff1690565b905061ffff811615613765576000828152600d6020526040812054906136ed826139ef565b9050806110c257600a80546001818101909255601081047fc65a7bb8d6351c1cf70c95a316cc6a92839c986682d98bc35f958f4883f9d2a801805461ffff8088166002600f909516949094026101000a8481029102199091161790556000908152600960205260409020805460ff1916909117905550505b5050505050565b610cbd828260405180602001604052806000815250613a51565b600654600160a01b900460ff16610eb75760405162461bcd60e51b815260206004820152601460248201527314185d5cd8589b194e881b9bdd081c185d5cd95960621b6044820152606401610afd565b60006001600160a01b0384163b1561169357604051630a85bd0160e11b81526001600160a01b0385169063150b7a029061381a9033908990889088906004016146b5565b6020604051808303816000875af1925050508015613855575060408051601f3d908101601f19168201909252613852918101906146f2565b60015b6138af573d808015613883576040519150601f19603f3d011682016040523d82523d6000602084013e613888565b606091505b5080516138a75760405162461bcd60e51b8152600401610afd90614602565b805181602001fd5b6001600160e01b031916630a85bd0160e11b149050949350505050565b60008072184f03e93ff9f4daa797ed6e38ed64bf6a1f0160401b831061390b5772184f03e93ff9f4daa797ed6e38ed64bf6a1f0160401b830492506040015b6d04ee2d6d415b85acef81000000008310613937576d04ee2d6d415b85acef8100000000830492506020015b662386f26fc10000831061395557662386f26fc10000830492506010015b6305f5e100831061396d576305f5e100830492506008015b612710831061398157612710830492506004015b60648310613993576064830492506002015b600a83106109c95760010192915050565b60408051602080820184905242828401524460608084019190915283518084039091018152608090920190925280519101206000906139e4601182614682565b611bc990600561466a565b604080516020808201849052428284015244606080840191909152835180840390910181526080909201909252805191012060009081613a30603d83614682565b613a3b90604661470f565b9050613a49846101f461474e565b139392505050565b613a5b8383613a84565b613a6860008484846137d6565b610b9e5760405162461bcd60e51b8152600401610afd90614602565b6001600160a01b038216613ada5760405162461bcd60e51b815260206004820181905260248201527f4552433732313a206d696e7420746f20746865207a65726f20616464726573736044820152606401610afd565b613ae3816122f3565b15613b305760405162461bcd60e51b815260206004820152601c60248201527f4552433732313a20746f6b656e20616c7265616479206d696e746564000000006044820152606401610afd565b613b3e600083836001613556565b613b47816122f3565b15613b945760405162461bcd60e51b815260206004820152601c60248201527f4552433732313a20746f6b656e20616c7265616479206d696e746564000000006044820152606401610afd565b6001600160a01b038216600081815260036020908152604080832080546001019055848352600290915280822080546001600160a01b0319168417905551839291907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef908290a45050565b828054613c0b906143d8565b90600052602060002090601f016020900481019282613c2d5760008555613c73565b82601f10613c4657805160ff1916838001178555613c73565b82800160010185558215613c73579182015b82811115613c73578251825591602001919060010190613c58565b50613c7f929150613c83565b5090565b5b80821115613c7f5760008155600101613c84565b6001600160e01b031981168114611c6357600080fd5b600060208284031215613cc057600080fd5b8135611bc981613c98565b60005b83811015613ce6578181015183820152602001613cce565b838111156116eb5750506000910152565b60008151808452613d0f816020860160208601613ccb565b601f01601f19169290920160200192915050565b602081526000611bc96020830184613cf7565b600060208284031215613d4857600080fd5b5035919050565b80356001600160a01b0381168114613d6657600080fd5b919050565b60008060408385031215613d7e57600080fd5b613d8783613d4f565b946020939093013593505050565b634e487b7160e01b600052604160045260246000fd5b60405160a0810167ffffffffffffffff81118282101715613dce57613dce613d95565b60405290565b600067ffffffffffffffff80841115613def57613def613d95565b604051601f8501601f19908116603f01168101908282118183101715613e1757613e17613d95565b81604052809350858152868686011115613e3057600080fd5b858560208301376000602087830101525050509392505050565b600082601f830112613e5b57600080fd5b611bc983833560208501613dd4565b600060208284031215613e7c57600080fd5b813567ffffffffffffffff811115613e9357600080fd5b611e8184828501613e4a565b6020808252825182820181905260009190848201906040850190845b81811015613edb57835161ffff1683529284019291840191600101613ebb565b50909695505050505050565b600080600060608486031215613efc57600080fd5b613f0584613d4f565b9250613f1360208501613d4f565b9150604084013590509250925092565b600060208284031215613f3557600080fd5b611bc982613d4f565b60006040516060810181811067ffffffffffffffff82111715613f6357613f63613d95565b6040529050806060830184811115613f7a57600080fd5b835b81811015613f94578035835260209283019201613f7c565b50505092915050565b60006040516040810181811067ffffffffffffffff82111715613fc257613fc2613d95565b80604052508091506040830184811115613f7a57600080fd5b600082601f830112613fec57600080fd5b60405160c0810181811067ffffffffffffffff8211171561400f5761400f613d95565b6040528060c084018581111561402457600080fd5b845b8181101561403e578035835260209283019201614026565b509195945050505050565b60008060008060006102c0868803121561406257600080fd5b86601f87011261407157600080fd5b614079613dab565b8060a088018981111561408b57600080fd5b885b818110156140a557803584526020938401930161408d565b508197508960bf8a01126140b857600080fd5b6140c28a82613f3e565b96505050506140d5876101008801613fdb565b92506140e5876101c08801613fdb565b91508661029f8701126140f757600080fd5b614105876102808801613f9d565b90509295509295909350565b815161ffff1681526102c081016020830151614133602084018261ffff169052565b506040830151614149604084018261ffff169052565b50606083015161415f606084018261ffff169052565b506080830151614175608084018261ffff169052565b5060a083015161418b60a084018261ffff169052565b5060c08301516141a160c084018261ffff169052565b5060e08301516141b760e084018261ffff169052565b506101008381015161ffff90811691840191909152610120808501518216908401526101408085015182169084015261016080850151821690840152610180808501518216908401526101a0808501518216908401526101c0808501518216908401526101e08085015182169084015261020080850151821690840152610220808501518216908401526102408085015182169084015261026080850151821690840152610280808501518216908401526102a09384015116929091019190915290565b8015158114611c6357600080fd5b6000806040838503121561429c57600080fd5b6142a583613d4f565b915060208301356142b58161427b565b809150509250929050565b600080600080608085870312156142d657600080fd5b6142df85613d4f565b93506142ed60208601613d4f565b925060408501359150606085013567ffffffffffffffff81111561431057600080fd5b8501601f8101871361432157600080fd5b61433087823560208401613dd4565b91505092959194509250565b6000806040838503121561434f57600080fd5b82359150602083013567ffffffffffffffff81111561436d57600080fd5b61437985828601613e4a565b9150509250929050565b6000806040838503121561439657600080fd5b61439f83613d4f565b91506143ad60208401613d4f565b90509250929050565b600080604083850312156143c957600080fd5b50508035926020909101359150565b600181811c908216806143ec57607f821691505b6020821081141561440d57634e487b7160e01b600052602260045260246000fd5b50919050565b60008251614425818460208701613ccb565b9190910192915050565b6020808252602d908201527f4552433732313a2063616c6c6572206973206e6f7420746f6b656e206f776e6560408201526c1c881bdc88185c1c1c9bdd9959609a1b606082015260800190565b6020808252601190820152703737b732bc34b9ba32b73a103a37b5b2b760791b604082015260600190565b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052601160045260246000fd5b6000828210156144e5576144e56144bd565b500390565b60006000198214156144fe576144fe6144bd565b5060010190565b60006020828403121561451757600080fd5b5051919050565b6040815260006145316040830185613cf7565b82810360208401526145438185613cf7565b95945050505050565b6000835161455e818460208801613ccb565b835190830190614572818360208801613ccb565b01949350505050565b60006020828403121561458d57600080fd5b8151611bc98161427b565b600060ff821660ff84168060ff038211156145b5576145b56144bd565b019392505050565b60208082526025908201527f4552433732313a207472616e736665722066726f6d20696e636f72726563742060408201526437bbb732b960d91b606082015260800190565b60208082526032908201527f4552433732313a207472616e7366657220746f206e6f6e20455243373231526560408201527131b2b4bb32b91034b6b83632b6b2b73a32b960711b606082015260800190565b634e487b7160e01b600052601260045260246000fd5b6000821982111561467d5761467d6144bd565b500190565b60008261469157614691614654565b500690565b60008160001904831182151516156146b0576146b06144bd565b500290565b6001600160a01b03858116825284166020820152604081018390526080606082018190526000906146e890830184613cf7565b9695505050505050565b60006020828403121561470457600080fd5b8151611bc981613c98565b60008083128015600160ff1b85018412161561472d5761472d6144bd565b6001600160ff1b0384018313811615614748576147486144bd565b50500390565b60008261475d5761475d614654565b50049056fea2646970667358221220d2b7126e4dae16b25696694cc0726224a0d6cc5a282e21c5bdfa39caca82bb9764736f6c634300080b0033",
  "deployedBytecode": "0x6080604052600436106102255760003560e01c806370a0823111610123578063b88d4fde116100ab578063e13cae401161006f578063e13cae4014610652578063e985e9c514610667578063f2fde38b146106b0578063fb107a4f146106d0578063ff88dea9146106e557600080fd5b8063b88d4fde146105bd578063c39cbef1146105dd578063c87b56dd146105fd578063d92559ad1461061d578063da8fbf2a1461063d57600080fd5b806395d89b41116100f257806395d89b41146105265780639b046ed31461053b5780639ffdb65a14610568578063a22cb46514610588578063ae200322146105a857600080fd5b806370a08231146104c0578063715018a6146104e057806372c9f580146104f55780638da5cb5b1461050857600080fd5b806318160ddd116101b157806354b6f1611161017557806354b6f1611461042457806355f804b3146104415780635c975abb146104615780636352211e146104805780636b8ff574146104a057600080fd5b806318160ddd1461039457806323b872dd146103b957806332cb6b0c146103d95780633ccfd60b146103ef57806342842e0e1461040457600080fd5b8063081812fc116101f8578063081812fc146102c9578063095ea7b31461030157806315b56d10146103215780631656efc61461034157806317bed2c51461037257600080fd5b80630194cf121461022a57806301ffc9a71461024157806306fdde03146102765780630750d2fb14610298575b600080fd5b34801561023657600080fd5b5061023f610705565b005b34801561024d57600080fd5b5061026161025c366004613cae565b61097d565b60405190151581526020015b60405180910390f35b34801561028257600080fd5b5061028b6109cf565b60405161026d9190613d23565b3480156102a457600080fd5b506102616102b3366004613d36565b60009081526008602052604090205460ff161590565b3480156102d557600080fd5b506102e96102e4366004613d36565b610a61565b6040516001600160a01b03909116815260200161026d565b34801561030d57600080fd5b5061023f61031c366004613d6b565b610a88565b34801561032d57600080fd5b5061026161033c366004613e6a565b610ba3565b34801561034d57600080fd5b5061026161035c366004613d36565b60009081526009602052604090205460ff161590565b34801561037e57600080fd5b50610387610bd6565b60405161026d9190613e9f565b3480156103a057600080fd5b50600c546103ab9081565b60405190815260200161026d565b3480156103c557600080fd5b5061023f6103d4366004613ee7565b610c55565b3480156103e557600080fd5b506103ab61271081565b3480156103fb57600080fd5b5061023f610c86565b34801561041057600080fd5b5061023f61041f366004613ee7565b610cc1565b34801561043057600080fd5b506103ab683635c9adc5dea0000081565b34801561044d57600080fd5b5061023f61045c366004613e6a565b610cdc565b34801561046d57600080fd5b50600654600160a01b900460ff16610261565b34801561048c57600080fd5b506102e961049b366004613d36565b610cf7565b3480156104ac57600080fd5b5061028b6104bb366004613d36565b610d57565b3480156104cc57600080fd5b506103ab6104db366004613f23565b610e1f565b3480156104ec57600080fd5b5061023f610ea5565b61023f610503366004614049565b610eb9565b34801561051457600080fd5b506006546001600160a01b03166102e9565b34801561053257600080fd5b5061028b6110cb565b34801561054757600080fd5b5061055b610556366004613d36565b6110da565b60405161026d9190614111565b34801561057457600080fd5b50610261610583366004613e6a565b61149d565b34801561059457600080fd5b5061023f6105a3366004614289565b61169e565b3480156105b457600080fd5b5061023f6116a9565b3480156105c957600080fd5b5061023f6105d83660046142c0565b6116b9565b3480156105e957600080fd5b5061028b6105f836600461433c565b6116f1565b34801561060957600080fd5b5061028b610618366004613d36565b611b69565b34801561062957600080fd5b5061023f610638366004613d36565b611bd0565b34801561064957600080fd5b5061023f611bdd565b34801561065e57600080fd5b506103ab606481565b34801561067357600080fd5b50610261610682366004614383565b6001600160a01b03918216600090815260056020908152604080832093909416825291909152205460ff1690565b3480156106bc57600080fd5b5061023f6106cb366004613f23565b611bed565b3480156106dc57600080fd5b506103ab611c66565b3480156106f157600080fd5b506102616107003660046143b6565b611dbf565b61070d611e89565b600d60205260717fa5049387d9cb649c59f4bda666105ba636c2a103d8e2b232ba4d125737cd214955600e7fa48544818c2c710afa9849c61ec9c60e8acdb3eaa2885f33b37e118cc8fd04ac55603f7fb91432bedff11256dbe14161d3606a2657bc9dacf8742f6b817d871dd53fb9765560637f0b705463cf5f7356780ee6e96132d37412c1b5816a4d207b8dcd42c34976745755604c7f7b6f1ece0cbe5122a575776770f0494c2d57ed2a50e36c2ba0d811d70ee03b645560297fba9d637f252776d5e1b3534bbd7554a1265a4ef0539d9ca50abe118598a6973c5560657f52c2086a203f40e709b1346663401f6c737b2fce5878601fcf875b047fed5fb65560257fe399baa2fabbab2a0309615b124a802277bab50ec0ca3452a00889e216c4b902819055600c7fe0af3347aa7e5af384208c9d29458f902f0ceddbc90963608afa77235658b360819055602b7f154ef5b709dcdc8b49a2af6408b8a1af209c39b5fa796f03680257c97692546e5560327f52fb6a28cb3c239105f8f829bc7376f939b6bfb040c470bdc2bda0af2e784b9455600a7f01a49be1e7ea084651fd665847100d28826db0b17160863a99534933cbbd2dce557f6fbf3b49b523bc27464b7dbfa6311951351b1d3efd07aa2ee4d1ce319801a0ce5560197f0a206051e911305809ddd48cf2baa7ead2c7fb038e505e1d02f9e6c2ce72930c557f1341e158d1184a2eb4edb96b016176e1c5ad075baae6651557fb93ae3925007a55605c7fdd2af3330d298808a303a10bc360333536e7697099bb3fe7200b0c272de6655855601560005260307f35c0ef8c6f7488ebe28ad34a3af68b3aa3aea0693e227054e9ec90bd504f66d255565b60006001600160e01b031982166380ac58cd60e01b14806109ae57506001600160e01b03198216635b5e139f60e01b145b806109c957506301ffc9a760e01b6001600160e01b03198316145b92915050565b6060600080546109de906143d8565b80601f0160208091040260200160405190810160405280929190818152602001828054610a0a906143d8565b8015610a575780601f10610a2c57610100808354040283529160200191610a57565b820191906000526020600020905b815481529060010190602001808311610a3a57829003601f168201915b5050505050905090565b6000610a6c82611ee3565b506000908152600460205260409020546001600160a01b031690565b6000610a9382610cf7565b9050806001600160a01b0316836001600160a01b03161415610b065760405162461bcd60e51b815260206004820152602160248201527f4552433732313a20617070726f76616c20746f2063757272656e74206f776e656044820152603960f91b60648201526084015b60405180910390fd5b336001600160a01b0382161480610b225750610b228133610682565b610b945760405162461bcd60e51b815260206004820152603d60248201527f4552433732313a20617070726f76652063616c6c6572206973206e6f7420746f60448201527f6b656e206f776e6572206f7220617070726f76656420666f7220616c6c0000006064820152608401610afd565b610b9e8383611f33565b505050565b6000600b610bb083611fa1565b604051610bbd9190614413565b9081526040519081900360200190205460ff1692915050565b6060600a805480602002602001604051908101604052809291908181526020018280548015610a5757602002820191906000526020600020906000905b82829054906101000a900461ffff1661ffff1681526020019060020190602082600101049283019260010382029150808411610c135790505050505050905090565b610c5f3382612104565b610c7b5760405162461bcd60e51b8152600401610afd9061442f565b610b9e838383612182565b610c8e611e89565b6040514790339082156108fc029083906000818181858888f19350505050158015610cbd573d6000803e3d6000fd5b5050565b610b9e838383604051806020016040528060008152506116b9565b610ce4611e89565b8051610cbd90600f906020840190613bff565b6000818152600260205260408120546001600160a01b0316806109c95760405162461bcd60e51b8152602060048201526018602482015277115490cdcc8c4e881a5b9d985b1a59081d1bdad95b88125160421b6044820152606401610afd565b6060610d62826122f3565b610d7e5760405162461bcd60e51b8152600401610afd9061447c565b60008281526007602052604090206001018054610d9a906143d8565b80601f0160208091040260200160405190810160405280929190818152602001828054610dc6906143d8565b8015610e135780601f10610de857610100808354040283529160200191610e13565b820191906000526020600020905b815481529060010190602001808311610df657829003601f168201915b50505050509050919050565b60006001600160a01b038216610e895760405162461bcd60e51b815260206004820152602960248201527f4552433732313a2061646472657373207a65726f206973206e6f7420612076616044820152683634b21037bbb732b960b91b6064820152608401610afd565b506001600160a01b031660009081526003602052604090205490565b610ead611e89565b610eb76000612310565b565b610ec1612362565b6000610ecc600c5490565b9050600381101580610ee857506006546001600160a01b031633145b610f2b5760405162461bcd60e51b815260206004820152601460248201527314d85b19481a185cc81b9bdd081cdd185c9d195960621b6044820152606401610afd565b610f33611c66565b3414610f795760405162461bcd60e51b8152602060048201526015602482015274115d1a195c881d985b1d59481a5b98dbdc9c9958dd605a1b6044820152606401610afd565b610f8686868686866123af565b60006110b78787878787600080868160200201519050600a8760016020020151901b1760148760026020020151901b17601e8760036020020151901b1760288760046020020151901b1760328660006020020151901b17603c8660016020020151901b1760468660026020020151901b1760508560006020020151901b17605a8560016020020151901b1760648560026020020151901b17606e8560036020020151901b1760788560046020020151901b1760828560056020020151901b17608c8460006020020151901b1760968460016020020151901b1760a08460026020020151901b1760aa8460036020020151901b1760b48460046020020151901b1760be8460056020020151901b1760c88360006020020151901b1760d28360016020020151901b179695505050505050565b90506110c2816131e2565b50505050505050565b6060600180546109de906143d8565b604080516102c081018252600080825260208201819052918101829052606081018290526080810182905260a0810182905260c0810182905260e08101829052610100810182905261012081018290526101408101829052610160810182905261018081018290526101a081018290526101c081018290526101e08101829052610200810182905261022081018290526102408101829052610260810182905261028081018290526102a0810191909152611194826122f3565b6111b05760405162461bcd60e51b8152600401610afd9061447c565b600060076000848152602001908152602001600020604051806040016040529081600082015481526020016001820180546111ea906143d8565b80601f0160208091040260200160405190810160405280929190818152602001828054611216906143d8565b80156112635780601f1061123857610100808354040283529160200191611263565b820191906000526020600020905b81548152906001019060200180831161124657829003601f168201915b5050509190925250508151919250506103ff1661ffff168252805161128c90600a1c6103ff1690565b61ffff16602083015280516112a59060141c6103ff1690565b61ffff16604083015280516112be90601e1c6103ff1690565b61ffff16606083015280516112d79060281c6103ff1690565b61ffff16608083015280516112f09060321c6103ff1690565b61ffff1660a0830152805161130990603c1c6103ff1690565b61ffff1660c083015280516113229060461c6103ff1690565b61ffff1660e0830152805161133b9060501c6103ff1690565b61ffff16610100830152805161135590605a1c6103ff1690565b61ffff16610120830152805161136f9060641c6103ff1690565b61ffff16610140830152805161138990606e1c6103ff1690565b61ffff1661016083015280516113a39060781c6103ff1690565b61ffff1661018083015280516113bd9060821c6103ff1690565b61ffff166101a083015280516113d790608c1c6103ff1690565b61ffff166101c083015280516113f19060961c6103ff1690565b61ffff166101e0830152805161140b9060a01c6103ff1690565b61ffff1661020083015280516114259060aa1c6103ff1690565b61ffff16610220830152805161143f9060b41c6103ff1690565b61ffff1661024083015280516114599060be1c6103ff1690565b61ffff1661026083015280516114739060c81c6103ff1690565b61ffff16610280830152805161148d9060d21c6103ff1690565b61ffff166102a083015250919050565b6000808290506001815110806114b4575060208151115b156114c25750600092915050565b806000815181106114d5576114d56144a7565b6020910101516001600160f81b031916600160fd1b14806115275750806001825161150091906144d3565b81518110611510576115106144a7565b6020910101516001600160f81b031916600160fd1b145b156115355750600092915050565b60008160008151811061154a5761154a6144a7565b01602001516001600160f81b031916905060005b825181101561169357600083828151811061157b5761157b6144a7565b01602001516001600160f81b0319169050600160fd1b811480156115ac5750600160fd1b6001600160f81b03198416145b156115bd5750600095945050505050565b600360fc1b6001600160f81b03198216108015906115e95750603960f81b6001600160f81b0319821611155b15801561161f5750604160f81b6001600160f81b031982161080159061161d5750602d60f91b6001600160f81b0319821611155b155b80156116545750606160f81b6001600160f81b03198216108015906116525750603d60f91b6001600160f81b0319821611155b155b801561166e5750600160fd1b6001600160f81b0319821614155b1561167f5750600095945050505050565b91508061168b816144ea565b91505061155e565b506001949350505050565b610cbd3383836132db565b6116b1611e89565b610eb76133aa565b6116c33383612104565b6116df5760405162461bcd60e51b8152600401610afd9061442f565b6116eb848484846133ff565b50505050565b60606116fc836122f3565b6117185760405162461bcd60e51b8152600401610afd9061447c565b6117223384612104565b61176e5760405162461bcd60e51b815260206004820181905260248201527f43616c6c6572206973206e6f74206f776e6572206e6f7220617070726f7665646044820152606401610afd565b6000838152600760205260408120600101805461178a906143d8565b80601f01602080910402602001604051908101604052809291908181526020018280546117b6906143d8565b80156118035780601f106117d857610100808354040283529160200191611803565b820191906000526020600020905b8154815290600101906020018083116117e657829003601f168201915b5050505050905060028160405161181a9190614413565b602060405180830381855afa158015611837573d6000803e3d6000fd5b5050506040513d601f19601f8201168201806040525081019061185a9190614505565b60028460405161186a9190614413565b602060405180830381855afa158015611887573d6000803e3d6000fd5b5050506040513d601f19601f820116820180604052508101906118aa9190614505565b14156118f85760405162461bcd60e51b815260206004820152601f60248201527f4e6577206e616d6520616e64206f6c64206e616d652061726520657175616c006044820152606401610afd565b6119018361149d565b6119435760405162461bcd60e51b815260206004820152601360248201527213985b59481a5cc81b9bdd08185b1b1bddd959606a1b6044820152606401610afd565b61194c83610ba3565b156119915760405162461bcd60e51b815260206004820152601560248201527413985b5948185b1c9958591e481c995cd95c9d9959605a1b6044820152606401610afd565b6001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000166379cc6790336040516001600160e01b031960e084901b1681526001600160a01b039091166004820152683635c9adc5dea000006024820152604401600060405180830381600087803b158015611a1157600080fd5b505af1158015611a25573d6000803e3d6000fd5b5050506000858152600760205260408120600101805491925090611a48906143d8565b90501115611af65760008481526007602052604090206001018054611af69190611a71906143d8565b80601f0160208091040260200160405190810160405280929190818152602001828054611a9d906143d8565b8015611aea5780601f10611abf57610100808354040283529160200191611aea565b820191906000526020600020905b815481529060010190602001808311611acd57829003601f168201915b50505050506000613432565b611b01836001613432565b60008481526007602090815260409091208451611b2692600190920191860190613bff565b50837f8eff5208043d31f23e348dc06be3a80821505e5b3e0002e9fa1185f5d47eac598285604051611b5992919061451e565b60405180910390a2509092915050565b6060611b7482611ee3565b6000611b7e61346f565b90506000815111611b9e5760405180602001604052806000815250611bc9565b80611ba88461347e565b604051602001611bb992919061454c565b6040516020818303038152906040525b9392505050565b611bd8611e89565b600e55565b611be5611e89565b610eb7613513565b611bf5611e89565b6001600160a01b038116611c5a5760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b6064820152608401610afd565b611c6381612310565b50565b600080611c72600c5490565b9050611c8160646127106144d3565b811080611ca457506006546001600160a01b031633148015611ca4575061271081105b611ce95760405162461bcd60e51b815260206004820152601660248201527514d85b19481a185cc8185b1c9958591e48195b99195960521b6044820152606401610afd565b6003811080611cfa57506126ac8110155b15611d0757600091505090565b67011c37937e080000600e5410611d20575050600e5490565b61251c8110611d38576703e2c284391c000091505090565b6121348110611d50576703782dace9d9000091505090565b6119648110611d685767030d98d59a96000091505090565b6111948110611d80576702a303fe4b53000091505090565b6109c48110611d98576702386f26fc10000091505090565b6103e88110611db0576701cdda4faccd000091505090565b67016345785d8a000091505090565b600081611dce575060016109c9565b60968210611def575060008181526009602052604090205460ff16156109c9565b60405163968ef8f560e01b815260048101849052602481018390527f0000000000000000000000000000000000000000000000000000000000000000906001600160a01b0382169063968ef8f590604401602060405180830381865afa158015611e5d573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611e81919061457b565b949350505050565b6006546001600160a01b03163314610eb75760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152606401610afd565b611eec816122f3565b611c635760405162461bcd60e51b8152602060048201526018602482015277115490cdcc8c4e881a5b9d985b1a59081d1bdad95b88125160421b6044820152606401610afd565b600081815260046020526040902080546001600160a01b0319166001600160a01b0384169081179091558190611f6882610cf7565b6001600160a01b03167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92560405160405180910390a45050565b606060008290506000815167ffffffffffffffff811115611fc457611fc4613d95565b6040519080825280601f01601f191660200182016040528015611fee576020820181803683370190505b50905060005b82518110156120fc576041838281518110612011576120116144a7565b016020015160f81c108015906120415750605a838281518110612036576120366144a7565b016020015160f81c11155b156120a357828181518110612058576120586144a7565b602001015160f81c60f81b60f81c60206120729190614598565b60f81b828281518110612087576120876144a7565b60200101906001600160f81b031916908160001a9053506120ea565b8281815181106120b5576120b56144a7565b602001015160f81c60f81b8282815181106120d2576120d26144a7565b60200101906001600160f81b031916908160001a9053505b806120f4816144ea565b915050611ff4565b509392505050565b60008061211083610cf7565b9050806001600160a01b0316846001600160a01b0316148061215757506001600160a01b0380821660009081526005602090815260408083209388168352929052205460ff165b80611e815750836001600160a01b031661217084610a61565b6001600160a01b031614949350505050565b826001600160a01b031661219582610cf7565b6001600160a01b0316146121bb5760405162461bcd60e51b8152600401610afd906145bd565b6001600160a01b03821661221d5760405162461bcd60e51b8152602060048201526024808201527f4552433732313a207472616e7366657220746f20746865207a65726f206164646044820152637265737360e01b6064820152608401610afd565b61222a8383836001613556565b826001600160a01b031661223d82610cf7565b6001600160a01b0316146122635760405162461bcd60e51b8152600401610afd906145bd565b600081815260046020908152604080832080546001600160a01b03199081169091556001600160a01b0387811680865260038552838620805460001901905590871680865283862080546001019055868652600290945282852080549092168417909155905184937fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef91a4505050565b6000908152600260205260409020546001600160a01b0316151590565b600680546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b600654600160a01b900460ff1615610eb75760405162461bcd60e51b815260206004820152601060248201526f14185d5cd8589b194e881c185d5cd95960821b6044820152606401610afd565b845180158015906123e157506006811115806123e15750600981111580156123e157506006546001600160a01b031633145b61241f5760405162461bcd60e51b815260206004820152600f60248201526e151c9a5899481a5b98dbdc9c9958dd608a1b6044820152606401610afd565b602086015161243190600a60456135de565b8061244c575061244c8660015b6020020151607760956135de565b61248f5760405162461bcd60e51b815260206004820152601460248201527314dada5b8818dbdb1bdc881a5b98dbdc9c9958dd60621b6044820152606401610afd565b60408601516124a190604660646135de565b806124b257506124b286600261243e565b6124f45760405162461bcd60e51b8152602060048201526013602482015272119d5c8818dbdb1bdc881a5b98dbdc9c9958dd606a1b6044820152606401610afd565b6060860151612506906065606d6135de565b80612517575061251786600361243e565b6125595760405162461bcd60e51b8152602060048201526013602482015272115e594818dbdb1bdc881a5b98dbdc9c9958dd606a1b6044820152606401610afd565b608086015161256b90606e60766135de565b8061257c575061257c86600461243e565b6125c05760405162461bcd60e51b8152602060048201526015602482015274141d5c1a5b0818dbdb1bdc881a5b98dbdc9c9958dd605a1b6044820152606401610afd565b84516125d09060966101066135de565b61260d5760405162461bcd60e51b815260206004820152600e60248201526d12185a5c881a5b98dbdc9c9958dd60921b6044820152606401610afd565b6020850151612621906101076101146135de565b61265f5760405162461bcd60e51b815260206004820152600f60248201526e135bdd5d1a081a5b98dbdc9c9958dd608a1b6044820152606401610afd565b6040850151612673906101156101536135de565b6126b15760405162461bcd60e51b815260206004820152600f60248201526e1099585c99081a5b98dbdc9c9958dd608a1b6044820152606401610afd565b83516126c2906101546101b66135de565b6126fe5760405162461bcd60e51b815260206004820152600d60248201526c151bdc081a5b98dbdc9c9958dd609a1b6044820152606401610afd565b6020840151612712906101b76102026135de565b6127545760405162461bcd60e51b815260206004820152601360248201527213dd5d195c9dd9585c881a5b98dbdc9c9958dd606a1b6044820152606401610afd565b60408401516127689061020361022b6135de565b6127a65760405162461bcd60e51b815260206004820152600f60248201526e141c9a5b9d081a5b98dbdc9c9958dd608a1b6044820152606401610afd565b60608401516127ba9061022c6102916135de565b6127f95760405162461bcd60e51b815260206004820152601060248201526f109bdd1d1bdb481a5b98dbdc9c9958dd60821b6044820152606401610afd565b608084015161280d906102926102b66135de565b61284e5760405162461bcd60e51b8152602060048201526012602482015271119bdbdd1dd9585c881a5b98dbdc9c9958dd60721b6044820152606401610afd565b60a0840151612862906102b76102c26135de565b61289f5760405162461bcd60e51b815260206004820152600e60248201526d10995b1d081a5b98dbdc9c9958dd60921b6044820152606401610afd565b82516128b0906102c36102ed6135de565b6128ec5760405162461bcd60e51b815260206004820152600d60248201526c12185d081a5b98dbdc9c9958dd609a1b6044820152606401610afd565b6020830151612900906102ee61031f6135de565b6129405760405162461bcd60e51b8152602060048201526011602482015270115e595dd9585c881a5b98dbdc9c9958dd607a1b6044820152606401610afd565b6040830151612954906103206103296135de565b6129955760405162461bcd60e51b8152602060048201526012602482015271141a595c98da5b99c81a5b98dbdc9c9958dd60721b6044820152606401610afd565b60608301516129a99061032a6103356135de565b6129f55760405162461bcd60e51b815260206004820152601960248201527f5772697374206163636573736f727920696e636f7272656374000000000000006044820152606401610afd565b6080830151612a099061033661034e6135de565b612a555760405162461bcd60e51b815260206004820152601960248201527f48616e6473206163636573736f727920696e636f7272656374000000000000006044820152606401610afd565b60a0830151612a699061034f6103736135de565b612aaa5760405162461bcd60e51b8152602060048201526012602482015271139958daddd9585c881a5b98dbdc9c9958dd60721b6044820152606401610afd565b8151612abb906103746103cf6135de565b612afd5760405162461bcd60e51b81526020600482015260136024820152721319599d081a5d195b481a5b98dbdc9c9958dd606a1b6044820152606401610afd565b6020820151612b11906103d06103ff6135de565b612b545760405162461bcd60e51b8152602060048201526014602482015273149a59da1d081a5d195b481a5b98dbdc9c9958dd60621b6044820152606401610afd565b612b66818760015b6020020151611dbf565b612bab5760405162461bcd60e51b8152602060048201526016602482015275536b696e20636f6c6f7220756e617661696c61626c6560501b6044820152606401610afd565b612bb781876002612b5c565b612bfb5760405162461bcd60e51b815260206004820152601560248201527446757220636f6c6f7220756e617661696c61626c6560581b6044820152606401610afd565b612c0781876003612b5c565b612c4b5760405162461bcd60e51b815260206004820152601560248201527445796520636f6c6f7220756e617661696c61626c6560581b6044820152606401610afd565b612c5781876004612b5c565b612ca35760405162461bcd60e51b815260206004820152601760248201527f507570696c20636f6c6f7220756e617661696c61626c650000000000000000006044820152606401610afd565b612caf81866000612b5c565b612cee5760405162461bcd60e51b815260206004820152601060248201526f4861697220756e617661696c61626c6560801b6044820152606401610afd565b612cfa81866001612b5c565b612d3a5760405162461bcd60e51b81526020600482015260116024820152704d6f75746820756e617661696c61626c6560781b6044820152606401610afd565b612d4681866002612b5c565b612d865760405162461bcd60e51b8152602060048201526011602482015270426561726420756e617661696c61626c6560781b6044820152606401610afd565b612d9281856000612b5c565b612dd05760405162461bcd60e51b815260206004820152600f60248201526e546f7020756e617661696c61626c6560881b6044820152606401610afd565b612ddc81856001612b5c565b612e205760405162461bcd60e51b81526020600482015260156024820152744f757465727765617220756e617661696c61626c6560581b6044820152606401610afd565b612e2c81856002612b5c565b612e6c5760405162461bcd60e51b81526020600482015260116024820152705072696e7420756e617661696c61626c6560781b6044820152606401610afd565b612e7881856003612b5c565b612eb95760405162461bcd60e51b8152602060048201526012602482015271426f74746f6d20756e617661696c61626c6560701b6044820152606401610afd565b612ec581856004612b5c565b612f085760405162461bcd60e51b8152602060048201526014602482015273466f6f747765617220756e617661696c61626c6560601b6044820152606401610afd565b612f1481856005612b5c565b612f535760405162461bcd60e51b815260206004820152601060248201526f42656c7420756e617661696c61626c6560801b6044820152606401610afd565b612f5f81846000612b5c565b612f9d5760405162461bcd60e51b815260206004820152600f60248201526e48617420756e617661696c61626c6560881b6044820152606401610afd565b612fa981846001612b5c565b612feb5760405162461bcd60e51b81526020600482015260136024820152724579657765617220756e617661696c61626c6560681b6044820152606401610afd565b612ff781846002612b5c565b61303a5760405162461bcd60e51b81526020600482015260146024820152735069657263696e6720756e617661696c61626c6560601b6044820152606401610afd565b61304681846003612b5c565b6130925760405162461bcd60e51b815260206004820152601b60248201527f5772697374206163636573736f727920756e617661696c61626c6500000000006044820152606401610afd565b61309e81846004612b5c565b6130ea5760405162461bcd60e51b815260206004820152601a60248201527f48616e64206163636573736f727920756e617661696c61626c650000000000006044820152606401610afd565b6130f681846005612b5c565b6131395760405162461bcd60e51b81526020600482015260146024820152734e65636b7765617220756e617661696c61626c6560601b6044820152606401610afd565b61314581836000612b5c565b6131895760405162461bcd60e51b81526020600482015260156024820152744c656674206974656d20756e617661696c61626c6560581b6044820152606401610afd565b61319581836001612b5c565b6131da5760405162461bcd60e51b81526020600482015260166024820152755269676874206974656d20756e617661696c61626c6560501b6044820152606401610afd565b505050505050565b60008181526008602052604090205460ff16156132415760405162461bcd60e51b815260206004820152601e60248201527f4e465420747261697420636f6d626f20616c72656164792065786973747300006044820152606401610afd565b6000818152600860205260409020805460ff19166001179055613268600c80546001019055565b6000613273600c5490565b9050613292604051806040016040528060008152602001606081525090565b82815260008281526007602090815260409091208251815581830151805184936132c3926001850192910190613bff565b509050506132d182846135fd565b610b9e338361376c565b816001600160a01b0316836001600160a01b0316141561333d5760405162461bcd60e51b815260206004820152601960248201527f4552433732313a20617070726f766520746f2063616c6c6572000000000000006044820152606401610afd565b6001600160a01b03838116600081815260056020908152604080832094871680845294825291829020805460ff191686151590811790915591519182527f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31910160405180910390a3505050565b6133b2613786565b6006805460ff60a01b191690557f5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa335b6040516001600160a01b03909116815260200160405180910390a1565b61340a848484612182565b613416848484846137d6565b6116eb5760405162461bcd60e51b8152600401610afd90614602565b80600b61343e84611fa1565b60405161344b9190614413565b908152604051908190036020019020805491151560ff199092169190911790555050565b6060600f80546109de906143d8565b6060600061348b836138cc565b600101905060008167ffffffffffffffff8111156134ab576134ab613d95565b6040519080825280601f01601f1916602001820160405280156134d5576020820181803683370190505b5090508181016020015b600019016f181899199a1a9b1b9c1cb0b131b232b360811b600a86061a8153600a850494508461350e576120fc565b6134df565b61351b612362565b6006805460ff60a01b1916600160a01b1790557f62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a2586133e23390565b60018111156116eb576001600160a01b0384161561359c576001600160a01b038416600090815260036020526040812080548392906135969084906144d3565b90915550505b6001600160a01b038316156116eb576001600160a01b038316600090815260036020526040812080548392906135d390849061466a565b909155505050505050565b6000831580611e815750828410158015611e8157505090911115919050565b600a546064811080156136185750613616600784614682565b155b8061364357506064811015801561362f575060c881105b80156136435750613641600984614682565b155b8061366f575060c8811015801561365b575061012c81105b801561366f575061366d600b84614682565b155b8061369c575061012c8110158015613688575061019081105b801561369c575061369a600d84614682565b155b15610b9e5760006136ac846139a4565b905060006136c86136be83600a614696565b85901c6103ff1690565b905061ffff811615613765576000828152600d6020526040812054906136ed826139ef565b9050806110c257600a80546001818101909255601081047fc65a7bb8d6351c1cf70c95a316cc6a92839c986682d98bc35f958f4883f9d2a801805461ffff8088166002600f909516949094026101000a8481029102199091161790556000908152600960205260409020805460ff1916909117905550505b5050505050565b610cbd828260405180602001604052806000815250613a51565b600654600160a01b900460ff16610eb75760405162461bcd60e51b815260206004820152601460248201527314185d5cd8589b194e881b9bdd081c185d5cd95960621b6044820152606401610afd565b60006001600160a01b0384163b1561169357604051630a85bd0160e11b81526001600160a01b0385169063150b7a029061381a9033908990889088906004016146b5565b6020604051808303816000875af1925050508015613855575060408051601f3d908101601f19168201909252613852918101906146f2565b60015b6138af573d808015613883576040519150601f19603f3d011682016040523d82523d6000602084013e613888565b606091505b5080516138a75760405162461bcd60e51b8152600401610afd90614602565b805181602001fd5b6001600160e01b031916630a85bd0160e11b149050949350505050565b60008072184f03e93ff9f4daa797ed6e38ed64bf6a1f0160401b831061390b5772184f03e93ff9f4daa797ed6e38ed64bf6a1f0160401b830492506040015b6d04ee2d6d415b85acef81000000008310613937576d04ee2d6d415b85acef8100000000830492506020015b662386f26fc10000831061395557662386f26fc10000830492506010015b6305f5e100831061396d576305f5e100830492506008015b612710831061398157612710830492506004015b60648310613993576064830492506002015b600a83106109c95760010192915050565b60408051602080820184905242828401524460608084019190915283518084039091018152608090920190925280519101206000906139e4601182614682565b611bc990600561466a565b604080516020808201849052428284015244606080840191909152835180840390910181526080909201909252805191012060009081613a30603d83614682565b613a3b90604661470f565b9050613a49846101f461474e565b139392505050565b613a5b8383613a84565b613a6860008484846137d6565b610b9e5760405162461bcd60e51b8152600401610afd90614602565b6001600160a01b038216613ada5760405162461bcd60e51b815260206004820181905260248201527f4552433732313a206d696e7420746f20746865207a65726f20616464726573736044820152606401610afd565b613ae3816122f3565b15613b305760405162461bcd60e51b815260206004820152601c60248201527f4552433732313a20746f6b656e20616c7265616479206d696e746564000000006044820152606401610afd565b613b3e600083836001613556565b613b47816122f3565b15613b945760405162461bcd60e51b815260206004820152601c60248201527f4552433732313a20746f6b656e20616c7265616479206d696e746564000000006044820152606401610afd565b6001600160a01b038216600081815260036020908152604080832080546001019055848352600290915280822080546001600160a01b0319168417905551839291907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef908290a45050565b828054613c0b906143d8565b90600052602060002090601f016020900481019282613c2d5760008555613c73565b82601f10613c4657805160ff1916838001178555613c73565b82800160010185558215613c73579182015b82811115613c73578251825591602001919060010190613c58565b50613c7f929150613c83565b5090565b5b80821115613c7f5760008155600101613c84565b6001600160e01b031981168114611c6357600080fd5b600060208284031215613cc057600080fd5b8135611bc981613c98565b60005b83811015613ce6578181015183820152602001613cce565b838111156116eb5750506000910152565b60008151808452613d0f816020860160208601613ccb565b601f01601f19169290920160200192915050565b602081526000611bc96020830184613cf7565b600060208284031215613d4857600080fd5b5035919050565b80356001600160a01b0381168114613d6657600080fd5b919050565b60008060408385031215613d7e57600080fd5b613d8783613d4f565b946020939093013593505050565b634e487b7160e01b600052604160045260246000fd5b60405160a0810167ffffffffffffffff81118282101715613dce57613dce613d95565b60405290565b600067ffffffffffffffff80841115613def57613def613d95565b604051601f8501601f19908116603f01168101908282118183101715613e1757613e17613d95565b81604052809350858152868686011115613e3057600080fd5b858560208301376000602087830101525050509392505050565b600082601f830112613e5b57600080fd5b611bc983833560208501613dd4565b600060208284031215613e7c57600080fd5b813567ffffffffffffffff811115613e9357600080fd5b611e8184828501613e4a565b6020808252825182820181905260009190848201906040850190845b81811015613edb57835161ffff1683529284019291840191600101613ebb565b50909695505050505050565b600080600060608486031215613efc57600080fd5b613f0584613d4f565b9250613f1360208501613d4f565b9150604084013590509250925092565b600060208284031215613f3557600080fd5b611bc982613d4f565b60006040516060810181811067ffffffffffffffff82111715613f6357613f63613d95565b6040529050806060830184811115613f7a57600080fd5b835b81811015613f94578035835260209283019201613f7c565b50505092915050565b60006040516040810181811067ffffffffffffffff82111715613fc257613fc2613d95565b80604052508091506040830184811115613f7a57600080fd5b600082601f830112613fec57600080fd5b60405160c0810181811067ffffffffffffffff8211171561400f5761400f613d95565b6040528060c084018581111561402457600080fd5b845b8181101561403e578035835260209283019201614026565b509195945050505050565b60008060008060006102c0868803121561406257600080fd5b86601f87011261407157600080fd5b614079613dab565b8060a088018981111561408b57600080fd5b885b818110156140a557803584526020938401930161408d565b508197508960bf8a01126140b857600080fd5b6140c28a82613f3e565b96505050506140d5876101008801613fdb565b92506140e5876101c08801613fdb565b91508661029f8701126140f757600080fd5b614105876102808801613f9d565b90509295509295909350565b815161ffff1681526102c081016020830151614133602084018261ffff169052565b506040830151614149604084018261ffff169052565b50606083015161415f606084018261ffff169052565b506080830151614175608084018261ffff169052565b5060a083015161418b60a084018261ffff169052565b5060c08301516141a160c084018261ffff169052565b5060e08301516141b760e084018261ffff169052565b506101008381015161ffff90811691840191909152610120808501518216908401526101408085015182169084015261016080850151821690840152610180808501518216908401526101a0808501518216908401526101c0808501518216908401526101e08085015182169084015261020080850151821690840152610220808501518216908401526102408085015182169084015261026080850151821690840152610280808501518216908401526102a09384015116929091019190915290565b8015158114611c6357600080fd5b6000806040838503121561429c57600080fd5b6142a583613d4f565b915060208301356142b58161427b565b809150509250929050565b600080600080608085870312156142d657600080fd5b6142df85613d4f565b93506142ed60208601613d4f565b925060408501359150606085013567ffffffffffffffff81111561431057600080fd5b8501601f8101871361432157600080fd5b61433087823560208401613dd4565b91505092959194509250565b6000806040838503121561434f57600080fd5b82359150602083013567ffffffffffffffff81111561436d57600080fd5b61437985828601613e4a565b9150509250929050565b6000806040838503121561439657600080fd5b61439f83613d4f565b91506143ad60208401613d4f565b90509250929050565b600080604083850312156143c957600080fd5b50508035926020909101359150565b600181811c908216806143ec57607f821691505b6020821081141561440d57634e487b7160e01b600052602260045260246000fd5b50919050565b60008251614425818460208701613ccb565b9190910192915050565b6020808252602d908201527f4552433732313a2063616c6c6572206973206e6f7420746f6b656e206f776e6560408201526c1c881bdc88185c1c1c9bdd9959609a1b606082015260800190565b6020808252601190820152703737b732bc34b9ba32b73a103a37b5b2b760791b604082015260600190565b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052601160045260246000fd5b6000828210156144e5576144e56144bd565b500390565b60006000198214156144fe576144fe6144bd565b5060010190565b60006020828403121561451757600080fd5b5051919050565b6040815260006145316040830185613cf7565b82810360208401526145438185613cf7565b95945050505050565b6000835161455e818460208801613ccb565b835190830190614572818360208801613ccb565b01949350505050565b60006020828403121561458d57600080fd5b8151611bc98161427b565b600060ff821660ff84168060ff038211156145b5576145b56144bd565b019392505050565b60208082526025908201527f4552433732313a207472616e736665722066726f6d20696e636f72726563742060408201526437bbb732b960d91b606082015260800190565b60208082526032908201527f4552433732313a207472616e7366657220746f206e6f6e20455243373231526560408201527131b2b4bb32b91034b6b83632b6b2b73a32b960711b606082015260800190565b634e487b7160e01b600052601260045260246000fd5b6000821982111561467d5761467d6144bd565b500190565b60008261469157614691614654565b500690565b60008160001904831182151516156146b0576146b06144bd565b500290565b6001600160a01b03858116825284166020820152604081018390526080606082018190526000906146e890830184613cf7565b9695505050505050565b60006020828403121561470457600080fd5b8151611bc981613c98565b60008083128015600160ff1b85018412161561472d5761472d6144bd565b6001600160ff1b0384018313811615614748576147486144bd565b50500390565b60008261475d5761475d614654565b50049056fea2646970667358221220d2b7126e4dae16b25696694cc0726224a0d6cc5a282e21c5bdfa39caca82bb9764736f6c634300080b0033",
  "abi": [
    {
      "inputs": [
        { "internalType": "address", "name": "nftlAddress", "type": "address" },
        { "internalType": "address", "name": "storageAddress", "type": "address" }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        { "indexed": true, "internalType": "address", "name": "owner", "type": "address" },
        { "indexed": true, "internalType": "address", "name": "approved", "type": "address" },
        { "indexed": true, "internalType": "uint256", "name": "tokenId", "type": "uint256" }
      ],
      "name": "Approval",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        { "indexed": true, "internalType": "address", "name": "owner", "type": "address" },
        { "indexed": true, "internalType": "address", "name": "operator", "type": "address" },
        { "indexed": false, "internalType": "bool", "name": "approved", "type": "bool" }
      ],
      "name": "ApprovalForAll",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        { "indexed": true, "internalType": "uint256", "name": "tokenId", "type": "uint256" },
        { "indexed": false, "internalType": "string", "name": "previousName", "type": "string" },
        { "indexed": false, "internalType": "string", "name": "newName", "type": "string" }
      ],
      "name": "NameUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        { "indexed": true, "internalType": "address", "name": "previousOwner", "type": "address" },
        { "indexed": true, "internalType": "address", "name": "newOwner", "type": "address" }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [{ "indexed": false, "internalType": "address", "name": "account", "type": "address" }],
      "name": "Paused",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        { "indexed": true, "internalType": "address", "name": "from", "type": "address" },
        { "indexed": true, "internalType": "address", "name": "to", "type": "address" },
        { "indexed": true, "internalType": "uint256", "name": "tokenId", "type": "uint256" }
      ],
      "name": "Transfer",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [{ "indexed": false, "internalType": "address", "name": "account", "type": "address" }],
      "name": "Unpaused",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "MAX_SUPPLY",
      "outputs": [{ "internalType": "uint256", "name": "", "type": "uint256" }],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "NAME_CHANGE_PRICE",
      "outputs": [{ "internalType": "uint256", "name": "", "type": "uint256" }],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "SPECIAL_CHARACTERS",
      "outputs": [{ "internalType": "uint256", "name": "", "type": "uint256" }],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        { "internalType": "address", "name": "to", "type": "address" },
        { "internalType": "uint256", "name": "tokenId", "type": "uint256" }
      ],
      "name": "approve",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [{ "internalType": "address", "name": "owner", "type": "address" }],
      "name": "balanceOf",
      "outputs": [{ "internalType": "uint256", "name": "", "type": "uint256" }],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        { "internalType": "uint256", "name": "tokenId", "type": "uint256" },
        { "internalType": "string", "name": "newName", "type": "string" }
      ],
      "name": "changeName",
      "outputs": [{ "internalType": "string", "name": "", "type": "string" }],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [{ "internalType": "uint256", "name": "tokenId", "type": "uint256" }],
      "name": "getApproved",
      "outputs": [{ "internalType": "address", "name": "", "type": "address" }],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [{ "internalType": "uint256", "name": "tokenId", "type": "uint256" }],
      "name": "getCharacterTraits",
      "outputs": [
        {
          "components": [
            { "internalType": "uint16", "name": "tribe", "type": "uint16" },
            { "internalType": "uint16", "name": "skinColor", "type": "uint16" },
            { "internalType": "uint16", "name": "furColor", "type": "uint16" },
            { "internalType": "uint16", "name": "eyeColor", "type": "uint16" },
            { "internalType": "uint16", "name": "pupilColor", "type": "uint16" },
            { "internalType": "uint16", "name": "hair", "type": "uint16" },
            { "internalType": "uint16", "name": "mouth", "type": "uint16" },
            { "internalType": "uint16", "name": "beard", "type": "uint16" },
            { "internalType": "uint16", "name": "top", "type": "uint16" },
            { "internalType": "uint16", "name": "outerwear", "type": "uint16" },
            { "internalType": "uint16", "name": "print", "type": "uint16" },
            { "internalType": "uint16", "name": "bottom", "type": "uint16" },
            { "internalType": "uint16", "name": "footwear", "type": "uint16" },
            { "internalType": "uint16", "name": "belt", "type": "uint16" },
            { "internalType": "uint16", "name": "hat", "type": "uint16" },
            { "internalType": "uint16", "name": "eyewear", "type": "uint16" },
            { "internalType": "uint16", "name": "piercing", "type": "uint16" },
            { "internalType": "uint16", "name": "wrist", "type": "uint16" },
            { "internalType": "uint16", "name": "hands", "type": "uint16" },
            { "internalType": "uint16", "name": "neckwear", "type": "uint16" },
            { "internalType": "uint16", "name": "leftItem", "type": "uint16" },
            { "internalType": "uint16", "name": "rightItem", "type": "uint16" }
          ],
          "internalType": "struct NiftyLeagueCharacter.CharacterTraits",
          "name": "_characterTraits",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getNFTPrice",
      "outputs": [{ "internalType": "uint256", "name": "", "type": "uint256" }],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [{ "internalType": "uint256", "name": "tokenId", "type": "uint256" }],
      "name": "getName",
      "outputs": [{ "internalType": "string", "name": "", "type": "string" }],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getRemovedTraits",
      "outputs": [{ "internalType": "uint16[]", "name": "", "type": "uint16[]" }],
      "stateMutability": "view",
      "type": "function"
    },
    { "inputs": [], "name": "initPoolSizes", "outputs": [], "stateMutability": "nonpayable", "type": "function" },
    {
      "inputs": [
        { "internalType": "address", "name": "owner", "type": "address" },
        { "internalType": "address", "name": "operator", "type": "address" }
      ],
      "name": "isApprovedForAll",
      "outputs": [{ "internalType": "bool", "name": "", "type": "bool" }],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        { "internalType": "uint256", "name": "tribe", "type": "uint256" },
        { "internalType": "uint256", "name": "trait", "type": "uint256" }
      ],
      "name": "isAvailableAndAllowedTrait",
      "outputs": [{ "internalType": "bool", "name": "", "type": "bool" }],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [{ "internalType": "uint256", "name": "trait", "type": "uint256" }],
      "name": "isAvailableTrait",
      "outputs": [{ "internalType": "bool", "name": "", "type": "bool" }],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [{ "internalType": "string", "name": "nameString", "type": "string" }],
      "name": "isNameReserved",
      "outputs": [{ "internalType": "bool", "name": "", "type": "bool" }],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [{ "internalType": "uint256", "name": "traitCombo", "type": "uint256" }],
      "name": "isUnique",
      "outputs": [{ "internalType": "bool", "name": "", "type": "bool" }],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            { "internalType": "uint16", "name": "tribe", "type": "uint16" },
            { "internalType": "uint16", "name": "skinColor", "type": "uint16" },
            { "internalType": "uint16", "name": "furColor", "type": "uint16" },
            { "internalType": "uint16", "name": "eyeColor", "type": "uint16" },
            { "internalType": "uint16", "name": "pupilColor", "type": "uint16" },
            { "internalType": "uint16", "name": "hair", "type": "uint16" },
            { "internalType": "uint16", "name": "mouth", "type": "uint16" },
            { "internalType": "uint16", "name": "beard", "type": "uint16" },
            { "internalType": "uint16", "name": "top", "type": "uint16" },
            { "internalType": "uint16", "name": "outerwear", "type": "uint16" },
            { "internalType": "uint16", "name": "print", "type": "uint16" },
            { "internalType": "uint16", "name": "bottom", "type": "uint16" },
            { "internalType": "uint16", "name": "footwear", "type": "uint16" },
            { "internalType": "uint16", "name": "belt", "type": "uint16" },
            { "internalType": "uint16", "name": "hat", "type": "uint16" },
            { "internalType": "uint16", "name": "eyewear", "type": "uint16" },
            { "internalType": "uint16", "name": "piercing", "type": "uint16" },
            { "internalType": "uint16", "name": "wrist", "type": "uint16" },
            { "internalType": "uint16", "name": "hands", "type": "uint16" },
            { "internalType": "uint16", "name": "neckwear", "type": "uint16" },
            { "internalType": "uint16", "name": "leftItem", "type": "uint16" },
            { "internalType": "uint16", "name": "rightItem", "type": "uint16" }
          ],
          "internalType": "struct NiftyLeagueCharacter.CharacterTraits",
          "name": "_characterTraits",
          "type": "tuple"
        }
      ],
      "name": "mintDegenWithCharacterTraits",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "name",
      "outputs": [{ "internalType": "string", "name": "", "type": "string" }],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [{ "internalType": "uint256", "name": "newPrice", "type": "uint256" }],
      "name": "overrideMintPrice",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [{ "internalType": "address", "name": "", "type": "address" }],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [{ "internalType": "uint256", "name": "tokenId", "type": "uint256" }],
      "name": "ownerOf",
      "outputs": [{ "internalType": "address", "name": "", "type": "address" }],
      "stateMutability": "view",
      "type": "function"
    },
    { "inputs": [], "name": "pauseMinting", "outputs": [], "stateMutability": "nonpayable", "type": "function" },
    {
      "inputs": [],
      "name": "paused",
      "outputs": [{ "internalType": "bool", "name": "", "type": "bool" }],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        { "internalType": "uint256[5]", "name": "character", "type": "uint256[5]" },
        { "internalType": "uint256[3]", "name": "head", "type": "uint256[3]" },
        { "internalType": "uint256[6]", "name": "clothing", "type": "uint256[6]" },
        { "internalType": "uint256[6]", "name": "accessories", "type": "uint256[6]" },
        { "internalType": "uint256[2]", "name": "items", "type": "uint256[2]" }
      ],
      "name": "purchase",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    { "inputs": [], "name": "renounceOwnership", "outputs": [], "stateMutability": "nonpayable", "type": "function" },
    {
      "inputs": [
        { "internalType": "address", "name": "from", "type": "address" },
        { "internalType": "address", "name": "to", "type": "address" },
        { "internalType": "uint256", "name": "tokenId", "type": "uint256" }
      ],
      "name": "safeTransferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        { "internalType": "address", "name": "from", "type": "address" },
        { "internalType": "address", "name": "to", "type": "address" },
        { "internalType": "uint256", "name": "tokenId", "type": "uint256" },
        { "internalType": "bytes", "name": "_data", "type": "bytes" }
      ],
      "name": "safeTransferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        { "internalType": "address", "name": "operator", "type": "address" },
        { "internalType": "bool", "name": "approved", "type": "bool" }
      ],
      "name": "setApprovalForAll",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [{ "internalType": "string", "name": "baseURI", "type": "string" }],
      "name": "setBaseURI",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [{ "internalType": "bytes4", "name": "interfaceId", "type": "bytes4" }],
      "name": "supportsInterface",
      "outputs": [{ "internalType": "bool", "name": "", "type": "bool" }],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "symbol",
      "outputs": [{ "internalType": "string", "name": "", "type": "string" }],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [{ "internalType": "uint256", "name": "tokenId", "type": "uint256" }],
      "name": "tokenURI",
      "outputs": [{ "internalType": "string", "name": "", "type": "string" }],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalSupply",
      "outputs": [{ "internalType": "uint256", "name": "_value", "type": "uint256" }],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        { "internalType": "address", "name": "from", "type": "address" },
        { "internalType": "address", "name": "to", "type": "address" },
        { "internalType": "uint256", "name": "tokenId", "type": "uint256" }
      ],
      "name": "transferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [{ "internalType": "address", "name": "newOwner", "type": "address" }],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    { "inputs": [], "name": "unpauseMinting", "outputs": [], "stateMutability": "nonpayable", "type": "function" },
    {
      "inputs": [{ "internalType": "string", "name": "newName", "type": "string" }],
      "name": "validateName",
      "outputs": [{ "internalType": "bool", "name": "", "type": "bool" }],
      "stateMutability": "pure",
      "type": "function"
    },
    { "inputs": [], "name": "withdraw", "outputs": [], "stateMutability": "nonpayable", "type": "function" }
  ]
}
