{
  "address": "0x7c33aa7aaCbAf58801D3F2b73Fe4444bcFA1Cd9e",
  "abi": [
    {
      "inputs": [],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint8",
          "name": "version",
          "type": "uint8"
        }
      ],
      "name": "Initialized",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "Paused",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "requestId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256[]",
          "name": "randomWords",
          "type": "uint256[]"
        }
      ],
      "name": "RandomWordsReceived",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "requestId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "randomCountToRequest",
          "type": "uint256"
        }
      ],
      "name": "RandomWordsRequested",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "ticketCount",
          "type": "uint256"
        }
      ],
      "name": "TicketDistributed",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "Unpaused",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "nftlAmount",
          "type": "uint256"
        }
      ],
      "name": "UserDeposited",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "by",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "winner",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "ticketId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "prizeTokenId",
          "type": "uint256"
        }
      ],
      "name": "WinnerSelected",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "NFTL_AMOUNT_FOR_TICKET",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "allowUserDeposit",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "assignTicketToUsers",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "cancelSubscription",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "chargeLINK",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "currentWinnerTicketCount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "deposit",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256[]",
          "name": "_prizeNFTTokenIds",
          "type": "uint256[]"
        }
      ],
      "name": "depositPrizeNFT",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "disallowUserDeposit",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "_holders",
          "type": "address[]"
        },
        {
          "internalType": "uint256[]",
          "name": "_keyCount",
          "type": "uint256[]"
        }
      ],
      "name": "distributeTicketsToCitadelKeyHolders",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getRandomWordsList",
      "outputs": [
        {
          "internalType": "uint256[]",
          "name": "",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getUserCount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getUserList",
      "outputs": [
        {
          "internalType": "address[]",
          "name": "",
          "type": "address[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getWinners",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "ticketId",
              "type": "uint256"
            },
            {
              "internalType": "address",
              "name": "winner",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "prizeTokenId",
              "type": "uint256"
            }
          ],
          "internalType": "struct NFTLRaffle.WinnerInfo[]",
          "name": "",
          "type": "tuple[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_nftl",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_pendingPeriod",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_totalWinnerTicketCount",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "_prizeNFT",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_vrfCoordinator",
          "type": "address"
        }
      ],
      "name": "initialize",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "isTicketAssignedToUsers",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "isUserDepositAllowed",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "isWinnerTicketId",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_consumer",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "_add",
          "type": "bool"
        }
      ],
      "name": "manageConsumers",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "nftl",
      "outputs": [
        {
          "internalType": "contract IERC20BurnableUpgradeable",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "name": "onERC721Received",
      "outputs": [
        {
          "internalType": "bytes4",
          "name": "",
          "type": "bytes4"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "pause",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "paused",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "prizeNFT",
      "outputs": [
        {
          "internalType": "contract IERC721Upgradeable",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "prizeNFTTokenIndex",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "prizeNFTokenIds",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "raffleStartAt",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "randomWordList",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_requestId",
          "type": "uint256"
        },
        {
          "internalType": "uint256[]",
          "name": "_randomWords",
          "type": "uint256[]"
        }
      ],
      "name": "rawFulfillRandomWords",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "requestRandomWordsForWinnerSelection",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "requestId",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "s_subscriptionId",
      "outputs": [
        {
          "internalType": "uint64",
          "name": "",
          "type": "uint64"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "ticketCountByUser",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "ticketIdList",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "ticketRangeByUser",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "startTicketId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "endTicketId",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalTicketCount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalWinnerTicketCount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "unpause",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_totalWinnerTicketCount",
          "type": "uint256"
        }
      ],
      "name": "updateTotalWinnerTicketCount",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "userByTicketId",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "userDeposits",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "winners",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "ticketId",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "winner",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "prizeTokenId",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_to",
          "type": "address"
        }
      ],
      "name": "withdrawLINK",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x0d83cdd6a6db84c94b37f6074aaa3aecc00b6862d90d2bf7f3ccf0b76fa8045c",
  "receipt": {
    "to": null,
    "from": "0x6C287e19065661Ca590A11CF0b419d1434991B67",
    "contractAddress": "0x7c33aa7aaCbAf58801D3F2b73Fe4444bcFA1Cd9e",
    "transactionIndex": 175,
    "gasUsed": "2387484",
    "logsBloom": "0x
    "blockHash": "0x7e0e510faca7d0046b2fd61460390e67588b16659da67295d857cb9c1b6b2ad6",
    "transactionHash": "0x0d83cdd6a6db84c94b37f6074aaa3aecc00b6862d90d2bf7f3ccf0b76fa8045c",
    "logs": [
      {
        "transactionIndex": 175,
        "blockNumber": 8620051,
        "transactionHash": "0x0d83cdd6a6db84c94b37f6074aaa3aecc00b6862d90d2bf7f3ccf0b76fa8045c",
        "address": "0x7c33aa7aaCbAf58801D3F2b73Fe4444bcFA1Cd9e",
        "topics": ["0x7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb3847402498"],
        "data": "0x00000000000000000000000000000000000000000000000000000000000000ff",
        "logIndex": 335,
        "blockHash": "0x7e0e510faca7d0046b2fd61460390e67588b16659da67295d857cb9c1b6b2ad6"
      }
    ],
    "blockNumber": 8620051,
    "cumulativeGasUsed": "26830136",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "8cfc00ae86e455489baa7361937dbbc7",
  "metadata": "{\"compiler\":{\"version\":\"0.8.11+commit.d7f03943\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"version\",\"type\":\"uint8\"}],\"name\":\"Initialized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Paused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"requestId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"randomWords\",\"type\":\"uint256[]\"}],\"name\":\"RandomWordsReceived\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"requestId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"randomCountToRequest\",\"type\":\"uint256\"}],\"name\":\"RandomWordsRequested\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"ticketCount\",\"type\":\"uint256\"}],\"name\":\"TicketDistributed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Unpaused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"nftlAmount\",\"type\":\"uint256\"}],\"name\":\"UserDeposited\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"by\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"winner\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"ticketId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"prizeTokenId\",\"type\":\"uint256\"}],\"name\":\"WinnerSelected\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"NFTL_AMOUNT_FOR_TICKET\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"allowUserDeposit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"assignTicketToUsers\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"cancelSubscription\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"chargeLINK\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"currentWinnerTicketCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"deposit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"_prizeNFTTokenIds\",\"type\":\"uint256[]\"}],\"name\":\"depositPrizeNFT\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"disallowUserDeposit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_holders\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_keyCount\",\"type\":\"uint256[]\"}],\"name\":\"distributeTicketsToCitadelKeyHolders\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getRandomWordsList\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getUserCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getUserList\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getWinners\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"ticketId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"winner\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"prizeTokenId\",\"type\":\"uint256\"}],\"internalType\":\"struct NFTLRaffle.WinnerInfo[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_nftl\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_pendingPeriod\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_totalWinnerTicketCount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_prizeNFT\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_vrfCoordinator\",\"type\":\"address\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isTicketAssignedToUsers\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isUserDepositAllowed\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"isWinnerTicketId\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_consumer\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"_add\",\"type\":\"bool\"}],\"name\":\"manageConsumers\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"nftl\",\"outputs\":[{\"internalType\":\"contract IERC20BurnableUpgradeable\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"onERC721Received\",\"outputs\":[{\"internalType\":\"bytes4\",\"name\":\"\",\"type\":\"bytes4\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"prizeNFT\",\"outputs\":[{\"internalType\":\"contract IERC721Upgradeable\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"prizeNFTTokenIndex\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"prizeNFTokenIds\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"raffleStartAt\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"randomWordList\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_requestId\",\"type\":\"uint256\"},{\"internalType\":\"uint256[]\",\"name\":\"_randomWords\",\"type\":\"uint256[]\"}],\"name\":\"rawFulfillRandomWords\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"requestRandomWordsForWinnerSelection\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"requestId\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"s_subscriptionId\",\"outputs\":[{\"internalType\":\"uint64\",\"name\":\"\",\"type\":\"uint64\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"ticketCountByUser\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"ticketIdList\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"ticketRangeByUser\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"startTicketId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"endTicketId\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalTicketCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalWinnerTicketCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"unpause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_totalWinnerTicketCount\",\"type\":\"uint256\"}],\"name\":\"updateTotalWinnerTicketCount\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"userByTicketId\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"userDeposits\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"winners\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"ticketId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"winner\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"prizeTokenId\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"}],\"name\":\"withdrawLINK\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"constructor\":{\"custom:oz-upgrades-unsafe-allow\":\"constructor\"},\"onERC721Received(address,address,uint256,bytes)\":{\"details\":\"See {IERC721Receiver-onERC721Received}. Always returns `IERC721Receiver.onERC721Received.selector`.\"},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"paused()\":{\"details\":\"Returns true if the contract is paused, and false otherwise.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"stateVariables\":{\"NFTL_AMOUNT_FOR_TICKET\":{\"details\":\"NFTL amount required for 1 ticket\"},\"_ticketIdList\":{\"details\":\"TokenId list\"},\"_ticketIdsByUser\":{\"details\":\"User -> Ticket Id list\"},\"_userList\":{\"details\":\"User list\"},\"currentWinnerTicketCount\":{\"details\":\"Current selected winner count\"},\"isTicketAssignedToUsers\":{\"details\":\"Ticket assign status\"},\"isUserDepositAllowed\":{\"details\":\"Swith to on/off the deposit\"},\"isWinnerTicketId\":{\"details\":\"Winner Ticket Id -> Bool\"},\"nftl\":{\"details\":\"NFTL address\"},\"prizeNFT\":{\"details\":\"Prize NFT (NiftyDegen) address\"},\"prizeNFTokenIds\":{\"details\":\"PrizeNFT TokenIds\"},\"raffleStartAt\":{\"details\":\"Timestamp the raffle start\"},\"randomWordList\":{\"details\":\"Random word list\"},\"ticketCountByUser\":{\"details\":\"User -> Ticket count\"},\"ticketIdList\":{\"details\":\"Ticket list\"},\"ticketRangeByUser\":{\"details\":\"User -> Ticket range\"},\"totalTicketCount\":{\"details\":\"Total ticket count\"},\"totalWinnerTicketCount\":{\"details\":\"Total winner count to select\"},\"userByTicketId\":{\"details\":\"Ticket Id -> User\"},\"userDeposits\":{\"details\":\"User -> NFTL amount deposited\"},\"vrfCoordinator\":{\"details\":\"Chainlink VRF params\"},\"winners\":{\"details\":\"Winner list\"}},\"title\":\"NFTLRaffle\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"pause()\":{\"notice\":\"Pause the contract\"},\"unpause()\":{\"notice\":\"Unpause the contract\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/NFTLRaffle.sol\":\"NFTLRaffle\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@chainlink/contracts/src/v0.8/interfaces/LinkTokenInterface.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface LinkTokenInterface {\\n  function allowance(address owner, address spender) external view returns (uint256 remaining);\\n\\n  function approve(address spender, uint256 value) external returns (bool success);\\n\\n  function balanceOf(address owner) external view returns (uint256 balance);\\n\\n  function decimals() external view returns (uint8 decimalPlaces);\\n\\n  function decreaseApproval(address spender, uint256 addedValue) external returns (bool success);\\n\\n  function increaseApproval(address spender, uint256 subtractedValue) external;\\n\\n  function name() external view returns (string memory tokenName);\\n\\n  function symbol() external view returns (string memory tokenSymbol);\\n\\n  function totalSupply() external view returns (uint256 totalTokensIssued);\\n\\n  function transfer(address to, uint256 value) external returns (bool success);\\n\\n  function transferAndCall(\\n    address to,\\n    uint256 value,\\n    bytes calldata data\\n  ) external returns (bool success);\\n\\n  function transferFrom(\\n    address from,\\n    address to,\\n    uint256 value\\n  ) external returns (bool success);\\n}\\n\",\"keccak256\":\"0xc7d7cd730d36825485ef4107d93c3ff18b9f3a5a00ea3d5988ba9a0bd70b10c5\",\"license\":\"MIT\"},\"@chainlink/contracts/src/v0.8/interfaces/VRFCoordinatorV2Interface.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface VRFCoordinatorV2Interface {\\n  /**\\n   * @notice Get configuration relevant for making requests\\n   * @return minimumRequestConfirmations global min for request confirmations\\n   * @return maxGasLimit global max for request gas limit\\n   * @return s_provingKeyHashes list of registered key hashes\\n   */\\n  function getRequestConfig()\\n    external\\n    view\\n    returns (\\n      uint16,\\n      uint32,\\n      bytes32[] memory\\n    );\\n\\n  /**\\n   * @notice Request a set of random words.\\n   * @param keyHash - Corresponds to a particular oracle job which uses\\n   * that key for generating the VRF proof. Different keyHash's have different gas price\\n   * ceilings, so you can select a specific one to bound your maximum per request cost.\\n   * @param subId  - The ID of the VRF subscription. Must be funded\\n   * with the minimum subscription balance required for the selected keyHash.\\n   * @param minimumRequestConfirmations - How many blocks you'd like the\\n   * oracle to wait before responding to the request. See SECURITY CONSIDERATIONS\\n   * for why you may want to request more. The acceptable range is\\n   * [minimumRequestBlockConfirmations, 200].\\n   * @param callbackGasLimit - How much gas you'd like to receive in your\\n   * fulfillRandomWords callback. Note that gasleft() inside fulfillRandomWords\\n   * may be slightly less than this amount because of gas used calling the function\\n   * (argument decoding etc.), so you may need to request slightly more than you expect\\n   * to have inside fulfillRandomWords. The acceptable range is\\n   * [0, maxGasLimit]\\n   * @param numWords - The number of uint256 random values you'd like to receive\\n   * in your fulfillRandomWords callback. Note these numbers are expanded in a\\n   * secure way by the VRFCoordinator from a single random value supplied by the oracle.\\n   * @return requestId - A unique identifier of the request. Can be used to match\\n   * a request to a response in fulfillRandomWords.\\n   */\\n  function requestRandomWords(\\n    bytes32 keyHash,\\n    uint64 subId,\\n    uint16 minimumRequestConfirmations,\\n    uint32 callbackGasLimit,\\n    uint32 numWords\\n  ) external returns (uint256 requestId);\\n\\n  /**\\n   * @notice Create a VRF subscription.\\n   * @return subId - A unique subscription id.\\n   * @dev You can manage the consumer set dynamically with addConsumer/removeConsumer.\\n   * @dev Note to fund the subscription, use transferAndCall. For example\\n   * @dev  LINKTOKEN.transferAndCall(\\n   * @dev    address(COORDINATOR),\\n   * @dev    amount,\\n   * @dev    abi.encode(subId));\\n   */\\n  function createSubscription() external returns (uint64 subId);\\n\\n  /**\\n   * @notice Get a VRF subscription.\\n   * @param subId - ID of the subscription\\n   * @return balance - LINK balance of the subscription in juels.\\n   * @return reqCount - number of requests for this subscription, determines fee tier.\\n   * @return owner - owner of the subscription.\\n   * @return consumers - list of consumer address which are able to use this subscription.\\n   */\\n  function getSubscription(uint64 subId)\\n    external\\n    view\\n    returns (\\n      uint96 balance,\\n      uint64 reqCount,\\n      address owner,\\n      address[] memory consumers\\n    );\\n\\n  /**\\n   * @notice Request subscription owner transfer.\\n   * @param subId - ID of the subscription\\n   * @param newOwner - proposed new owner of the subscription\\n   */\\n  function requestSubscriptionOwnerTransfer(uint64 subId, address newOwner) external;\\n\\n  /**\\n   * @notice Request subscription owner transfer.\\n   * @param subId - ID of the subscription\\n   * @dev will revert if original owner of subId has\\n   * not requested that msg.sender become the new owner.\\n   */\\n  function acceptSubscriptionOwnerTransfer(uint64 subId) external;\\n\\n  /**\\n   * @notice Add a consumer to a VRF subscription.\\n   * @param subId - ID of the subscription\\n   * @param consumer - New consumer which can use the subscription\\n   */\\n  function addConsumer(uint64 subId, address consumer) external;\\n\\n  /**\\n   * @notice Remove a consumer from a VRF subscription.\\n   * @param subId - ID of the subscription\\n   * @param consumer - Consumer to remove from the subscription\\n   */\\n  function removeConsumer(uint64 subId, address consumer) external;\\n\\n  /**\\n   * @notice Cancel a subscription\\n   * @param subId - ID of the subscription\\n   * @param to - Where to send the remaining LINK to\\n   */\\n  function cancelSubscription(uint64 subId, address to) external;\\n\\n  /*\\n   * @notice Check to see if there exists a request commitment consumers\\n   * for all consumers and keyhashes for a given sub.\\n   * @param subId - ID of the subscription\\n   * @return true if there exists at least one unfulfilled request for the subscription, false\\n   * otherwise.\\n   */\\n  function pendingRequestExists(uint64 subId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x54cdc97717cbae1a51a5500c8ee4875ebf056c95b54d2155a9544a79cb4f4494\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract OwnableUpgradeable is Initializable, ContextUpgradeable {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    function __Ownable_init() internal onlyInitializing {\\n        __Ownable_init_unchained();\\n    }\\n\\n    function __Ownable_init_unchained() internal onlyInitializing {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0x247c62047745915c0af6b955470a72d1696ebad4352d7d3011aef1a2463cd888\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.1) (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.2;\\n\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\\n * reused. This mechanism prevents re-execution of each \\\"step\\\" but allows the creation of new initialization steps in\\n * case an upgrade adds a module that needs to be initialized.\\n *\\n * For example:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * contract MyToken is ERC20Upgradeable {\\n *     function initialize() initializer public {\\n *         __ERC20_init(\\\"MyToken\\\", \\\"MTK\\\");\\n *     }\\n * }\\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\\n *     function initializeV2() reinitializer(2) public {\\n *         __ERC20Permit_init(\\\"MyToken\\\");\\n *     }\\n * }\\n * ```\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() {\\n *     _disableInitializers();\\n * }\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     * @custom:oz-retyped-from bool\\n     */\\n    uint8 private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Triggered when the contract has been initialized or reinitialized.\\n     */\\n    event Initialized(uint8 version);\\n\\n    /**\\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\\n     * `onlyInitializing` functions can be used to initialize parent contracts.\\n     *\\n     * Similar to `reinitializer(1)`, except that functions marked with `initializer` can be nested in the context of a\\n     * constructor.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier initializer() {\\n        bool isTopLevelCall = !_initializing;\\n        require(\\n            (isTopLevelCall && _initialized < 1) || (!AddressUpgradeable.isContract(address(this)) && _initialized == 1),\\n            \\\"Initializable: contract is already initialized\\\"\\n        );\\n        _initialized = 1;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n        }\\n        _;\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n            emit Initialized(1);\\n        }\\n    }\\n\\n    /**\\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\\n     * used to initialize parent contracts.\\n     *\\n     * A reinitializer may be used after the original initialization step. This is essential to configure modules that\\n     * are added through upgrades and that require initialization.\\n     *\\n     * When `version` is 1, this modifier is similar to `initializer`, except that functions marked with `reinitializer`\\n     * cannot be nested. If one is invoked in the context of another, execution will revert.\\n     *\\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\\n     * a contract, executing them in the right order is up to the developer or operator.\\n     *\\n     * WARNING: setting the version to 255 will prevent any future reinitialization.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier reinitializer(uint8 version) {\\n        require(!_initializing && _initialized < version, \\\"Initializable: contract is already initialized\\\");\\n        _initialized = version;\\n        _initializing = true;\\n        _;\\n        _initializing = false;\\n        emit Initialized(version);\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        require(_initializing, \\\"Initializable: contract is not initializing\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\\n     * through proxies.\\n     *\\n     * Emits an {Initialized} event the first time it is successfully executed.\\n     */\\n    function _disableInitializers() internal virtual {\\n        require(!_initializing, \\\"Initializable: contract is initializing\\\");\\n        if (_initialized < type(uint8).max) {\\n            _initialized = type(uint8).max;\\n            emit Initialized(type(uint8).max);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the highest version that has been initialized. See {reinitializer}.\\n     */\\n    function _getInitializedVersion() internal view returns (uint8) {\\n        return _initialized;\\n    }\\n\\n    /**\\n     * @dev Returns `true` if the contract is currently initializing. See {onlyInitializing}.\\n     */\\n    function _isInitializing() internal view returns (bool) {\\n        return _initializing;\\n    }\\n}\\n\",\"keccak256\":\"0x037c334add4b033ad3493038c25be1682d78c00992e1acb0e2795caff3925271\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (security/Pausable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module which allows children to implement an emergency stop\\n * mechanism that can be triggered by an authorized account.\\n *\\n * This module is used through inheritance. It will make available the\\n * modifiers `whenNotPaused` and `whenPaused`, which can be applied to\\n * the functions of your contract. Note that they will not be pausable by\\n * simply including this module, only once the modifiers are put in place.\\n */\\nabstract contract PausableUpgradeable is Initializable, ContextUpgradeable {\\n    /**\\n     * @dev Emitted when the pause is triggered by `account`.\\n     */\\n    event Paused(address account);\\n\\n    /**\\n     * @dev Emitted when the pause is lifted by `account`.\\n     */\\n    event Unpaused(address account);\\n\\n    bool private _paused;\\n\\n    /**\\n     * @dev Initializes the contract in unpaused state.\\n     */\\n    function __Pausable_init() internal onlyInitializing {\\n        __Pausable_init_unchained();\\n    }\\n\\n    function __Pausable_init_unchained() internal onlyInitializing {\\n        _paused = false;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is not paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    modifier whenNotPaused() {\\n        _requireNotPaused();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    modifier whenPaused() {\\n        _requirePaused();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns true if the contract is paused, and false otherwise.\\n     */\\n    function paused() public view virtual returns (bool) {\\n        return _paused;\\n    }\\n\\n    /**\\n     * @dev Throws if the contract is paused.\\n     */\\n    function _requireNotPaused() internal view virtual {\\n        require(!paused(), \\\"Pausable: paused\\\");\\n    }\\n\\n    /**\\n     * @dev Throws if the contract is not paused.\\n     */\\n    function _requirePaused() internal view virtual {\\n        require(paused(), \\\"Pausable: not paused\\\");\\n    }\\n\\n    /**\\n     * @dev Triggers stopped state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    function _pause() internal virtual whenNotPaused {\\n        _paused = true;\\n        emit Paused(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns to normal state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    function _unpause() internal virtual whenPaused {\\n        _paused = false;\\n        emit Unpaused(_msgSender());\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0x40c636b4572ff5f1dc50cf22097e93c0723ee14eff87e99ac2b02636eeca1250\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20Upgradeable {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n}\\n\",\"keccak256\":\"0x4e733d3164f73f461eaf9d8087a7ad1ea180bdc8ba0d3d61b0e1ae16d8e63dff\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC20/extensions/draft-IERC20PermitUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/draft-IERC20Permit.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\\n *\\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\\n * need to send a transaction, and thus is not required to hold Ether at all.\\n */\\ninterface IERC20PermitUpgradeable {\\n    /**\\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\\n     * given ``owner``'s signed approval.\\n     *\\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\\n     * ordering also apply here.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `deadline` must be a timestamp in the future.\\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\\n     * over the EIP712-formatted function arguments.\\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\\n     *\\n     * For more information on the signature format, see the\\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\\n     * section].\\n     */\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n\\n    /**\\n     * @dev Returns the current nonce for `owner`. This value must be\\n     * included whenever a signature is generated for {permit}.\\n     *\\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\\n     * prevents a signature from being used multiple times.\\n     */\\n    function nonces(address owner) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n}\\n\",\"keccak256\":\"0xcc70d8e2281fb3ff69e8ab242500f10142cd0a7fa8dd9e45882be270d4d09024\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC20/utils/SafeERC20Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20Upgradeable.sol\\\";\\nimport \\\"../extensions/draft-IERC20PermitUpgradeable.sol\\\";\\nimport \\\"../../../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20Upgradeable {\\n    using AddressUpgradeable for address;\\n\\n    function safeTransfer(\\n        IERC20Upgradeable token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(\\n        IERC20Upgradeable token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(\\n        IERC20Upgradeable token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(\\n        IERC20Upgradeable token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(\\n        IERC20Upgradeable token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            uint256 newAllowance = oldAllowance - value;\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n        }\\n    }\\n\\n    function safePermit(\\n        IERC20PermitUpgradeable token,\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal {\\n        uint256 nonceBefore = token.nonces(owner);\\n        token.permit(owner, spender, value, deadline, v, r, s);\\n        uint256 nonceAfter = token.nonces(owner);\\n        require(nonceAfter == nonceBefore + 1, \\\"SafeERC20: permit did not succeed\\\");\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20Upgradeable token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address-functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) {\\n            // Return data is optional\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x220c4a5af915e656be2aaa85ca57505d102418e476b1e2ef6c62e0c6ac143871\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC721/IERC721ReceiverUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC721/IERC721Receiver.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title ERC721 token receiver interface\\n * @dev Interface for any contract that wants to support safeTransfers\\n * from ERC721 asset contracts.\\n */\\ninterface IERC721ReceiverUpgradeable {\\n    /**\\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\\n     * by `operator` from `from`, this function is called.\\n     *\\n     * It must return its Solidity selector to confirm the token transfer.\\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.\\n     *\\n     * The selector can be obtained in Solidity with `IERC721Receiver.onERC721Received.selector`.\\n     */\\n    function onERC721Received(\\n        address operator,\\n        address from,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n}\\n\",\"keccak256\":\"0xbb2ed8106d94aeae6858e2551a1e7174df73994b77b13ebd120ccaaef80155f5\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC721/IERC721Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (token/ERC721/IERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165Upgradeable.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721Upgradeable is IERC165Upgradeable {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external;\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must have been allowed to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Note that the caller is responsible to confirm that the recipient is capable of receiving ERC721\\n     * or else they may be permanently lost. Usage of {safeTransferFrom} prevents loss, though the caller must\\n     * understand this adds an external call which potentially creates a reentrancy vulnerability.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool _approved) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x2c0b89cef83f353c6f9488c013d8a5968587ffdd6dfc26aad53774214b97e229\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC721/utils/ERC721HolderUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/utils/ERC721Holder.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC721ReceiverUpgradeable.sol\\\";\\nimport \\\"../../../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC721Receiver} interface.\\n *\\n * Accepts all token transfers.\\n * Make sure the contract is able to use its token with {IERC721-safeTransferFrom}, {IERC721-approve} or {IERC721-setApprovalForAll}.\\n */\\ncontract ERC721HolderUpgradeable is Initializable, IERC721ReceiverUpgradeable {\\n    function __ERC721Holder_init() internal onlyInitializing {\\n    }\\n\\n    function __ERC721Holder_init_unchained() internal onlyInitializing {\\n    }\\n    /**\\n     * @dev See {IERC721Receiver-onERC721Received}.\\n     *\\n     * Always returns `IERC721Receiver.onERC721Received.selector`.\\n     */\\n    function onERC721Received(\\n        address,\\n        address,\\n        uint256,\\n        bytes memory\\n    ) public virtual override returns (bytes4) {\\n        return this.onERC721Received.selector;\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0xb7f90ab8af7dae0bd4acfa088f9e606ea039110face097ca7c8beef563f71e90\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary AddressUpgradeable {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x2edcb41c121abc510932e8d83ff8b82cf9cdde35e7c297622f5c29ef0af25183\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract ContextUpgradeable is Initializable {\\n    function __Context_init() internal onlyInitializing {\\n    }\\n\\n    function __Context_init_unchained() internal onlyInitializing {\\n    }\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0x963ea7f0b48b032eef72fe3a7582edf78408d6f834115b9feadd673a4d5bd149\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/introspection/IERC165Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165Upgradeable {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0xc6cef87559d0aeffdf0a99803de655938a7779ec0a3cd5d4383483ad85565a09\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/structs/EnumerableSetUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/structs/EnumerableSet.sol)\\n// This file was procedurally generated from scripts/generate/templates/EnumerableSet.js.\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Library for managing\\n * https://en.wikipedia.org/wiki/Set_(abstract_data_type)[sets] of primitive\\n * types.\\n *\\n * Sets have the following properties:\\n *\\n * - Elements are added, removed, and checked for existence in constant time\\n * (O(1)).\\n * - Elements are enumerated in O(n). No guarantees are made on the ordering.\\n *\\n * ```\\n * contract Example {\\n *     // Add the library methods\\n *     using EnumerableSet for EnumerableSet.AddressSet;\\n *\\n *     // Declare a set state variable\\n *     EnumerableSet.AddressSet private mySet;\\n * }\\n * ```\\n *\\n * As of v3.3.0, sets of type `bytes32` (`Bytes32Set`), `address` (`AddressSet`)\\n * and `uint256` (`UintSet`) are supported.\\n *\\n * [WARNING]\\n * ====\\n * Trying to delete such a structure from storage will likely result in data corruption, rendering the structure\\n * unusable.\\n * See https://github.com/ethereum/solidity/pull/11843[ethereum/solidity#11843] for more info.\\n *\\n * In order to clean an EnumerableSet, you can either remove all elements one by one or create a fresh instance using an\\n * array of EnumerableSet.\\n * ====\\n */\\nlibrary EnumerableSetUpgradeable {\\n    // To implement this library for multiple types with as little code\\n    // repetition as possible, we write it in terms of a generic Set type with\\n    // bytes32 values.\\n    // The Set implementation uses private functions, and user-facing\\n    // implementations (such as AddressSet) are just wrappers around the\\n    // underlying Set.\\n    // This means that we can only create new EnumerableSets for types that fit\\n    // in bytes32.\\n\\n    struct Set {\\n        // Storage of set values\\n        bytes32[] _values;\\n        // Position of the value in the `values` array, plus 1 because index 0\\n        // means a value is not in the set.\\n        mapping(bytes32 => uint256) _indexes;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function _add(Set storage set, bytes32 value) private returns (bool) {\\n        if (!_contains(set, value)) {\\n            set._values.push(value);\\n            // The value is stored at length-1, but we add 1 to all indexes\\n            // and use 0 as a sentinel value\\n            set._indexes[value] = set._values.length;\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function _remove(Set storage set, bytes32 value) private returns (bool) {\\n        // We read and store the value's index to prevent multiple reads from the same storage slot\\n        uint256 valueIndex = set._indexes[value];\\n\\n        if (valueIndex != 0) {\\n            // Equivalent to contains(set, value)\\n            // To delete an element from the _values array in O(1), we swap the element to delete with the last one in\\n            // the array, and then remove the last element (sometimes called as 'swap and pop').\\n            // This modifies the order of the array, as noted in {at}.\\n\\n            uint256 toDeleteIndex = valueIndex - 1;\\n            uint256 lastIndex = set._values.length - 1;\\n\\n            if (lastIndex != toDeleteIndex) {\\n                bytes32 lastValue = set._values[lastIndex];\\n\\n                // Move the last value to the index where the value to delete is\\n                set._values[toDeleteIndex] = lastValue;\\n                // Update the index for the moved value\\n                set._indexes[lastValue] = valueIndex; // Replace lastValue's index to valueIndex\\n            }\\n\\n            // Delete the slot where the moved value was stored\\n            set._values.pop();\\n\\n            // Delete the index for the deleted slot\\n            delete set._indexes[value];\\n\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function _contains(Set storage set, bytes32 value) private view returns (bool) {\\n        return set._indexes[value] != 0;\\n    }\\n\\n    /**\\n     * @dev Returns the number of values on the set. O(1).\\n     */\\n    function _length(Set storage set) private view returns (uint256) {\\n        return set._values.length;\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function _at(Set storage set, uint256 index) private view returns (bytes32) {\\n        return set._values[index];\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function _values(Set storage set) private view returns (bytes32[] memory) {\\n        return set._values;\\n    }\\n\\n    // Bytes32Set\\n\\n    struct Bytes32Set {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _add(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _remove(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(Bytes32Set storage set, bytes32 value) internal view returns (bool) {\\n        return _contains(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(Bytes32Set storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(Bytes32Set storage set, uint256 index) internal view returns (bytes32) {\\n        return _at(set._inner, index);\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(Bytes32Set storage set) internal view returns (bytes32[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        bytes32[] memory result;\\n\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n\\n    // AddressSet\\n\\n    struct AddressSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(AddressSet storage set, address value) internal returns (bool) {\\n        return _add(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(AddressSet storage set, address value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(AddressSet storage set, address value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(AddressSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(AddressSet storage set, uint256 index) internal view returns (address) {\\n        return address(uint160(uint256(_at(set._inner, index))));\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(AddressSet storage set) internal view returns (address[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        address[] memory result;\\n\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n\\n    // UintSet\\n\\n    struct UintSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _add(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(UintSet storage set, uint256 value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(UintSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(UintSet storage set, uint256 index) internal view returns (uint256) {\\n        return uint256(_at(set._inner, index));\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(UintSet storage set) internal view returns (uint256[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        uint256[] memory result;\\n\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n}\\n\",\"keccak256\":\"0x4807db844a856813048b5af81a764fdd25a0ae8876a3132593e8d21ddc6b607c\",\"license\":\"MIT\"},\"contracts/NFTLRaffle.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.11;\\n\\nimport \\\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/token/ERC721/IERC721Upgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/token/ERC721/utils/ERC721HolderUpgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/utils/structs/EnumerableSetUpgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/token/ERC20/utils/SafeERC20Upgradeable.sol\\\";\\nimport \\\"@chainlink/contracts/src/v0.8/interfaces/LinkTokenInterface.sol\\\";\\nimport \\\"@chainlink/contracts/src/v0.8/interfaces/VRFCoordinatorV2Interface.sol\\\";\\n\\ninterface IERC20BurnableUpgradeable is IERC20Upgradeable {\\n    function burnFrom(address account, uint256 amount) external;\\n}\\n\\n/**\\n * @title NFTLRaffle\\n */\\ncontract NFTLRaffle is Initializable, OwnableUpgradeable, PausableUpgradeable, ERC721HolderUpgradeable {\\n    using EnumerableSetUpgradeable for EnumerableSetUpgradeable.AddressSet;\\n    using EnumerableSetUpgradeable for EnumerableSetUpgradeable.UintSet;\\n    using SafeERC20Upgradeable for IERC20Upgradeable;\\n\\n    struct WinnerInfo {\\n        uint256 ticketId;\\n        address winner;\\n        uint256 prizeTokenId;\\n    }\\n\\n    struct TicketRange {\\n        uint256 startTicketId;\\n        uint256 endTicketId;\\n    }\\n\\n    /// @dev Chainlink VRF params\\n    address private vrfCoordinator; // etherscan: 0x271682DEB8C4E0901D1a1550aD2e64D568E69909\\n    address private constant LINK = 0x326C977E6efc84E512bB9C30f76E30c160eD06FB;\\n    bytes32 private constant s_keyHash = 0x79d3d8832d904592c0bf9818b621522c988bb8b0c05cdc3b15aea1b6e8db0c15;\\n    uint16 private constant s_requestConfirmations = 3;\\n    uint32 private constant s_callbackGasLimit = 2500000;\\n    uint64 public s_subscriptionId;\\n\\n    /// @dev Prize NFT (NiftyDegen) address\\n    IERC721Upgradeable public prizeNFT;\\n\\n    /// @dev PrizeNFT TokenIds\\n    uint256[] public prizeNFTokenIds;\\n\\n    /// @dev NFTL address\\n    IERC20BurnableUpgradeable public nftl;\\n\\n    /// @dev Timestamp the raffle start\\n    uint256 public raffleStartAt; // deprecated\\n\\n    // @dev VRF request Id => Prize NFT TokenId Index\\n    mapping(uint256 => uint256) public prizeNFTTokenIndex; // deprecated\\n\\n    /// @dev Total winner count to select\\n    uint256 public totalWinnerTicketCount;\\n\\n    /// @dev Current selected winner count\\n    uint256 public currentWinnerTicketCount;\\n\\n    /// @dev Winner list\\n    WinnerInfo[] public winners;\\n\\n    /// @dev Total ticket count\\n    uint256 public totalTicketCount;\\n\\n    /// @dev NFTL amount required for 1 ticket\\n    uint256 public constant NFTL_AMOUNT_FOR_TICKET = 1000 * 10 ** 18;\\n\\n    /// @dev User list\\n    EnumerableSetUpgradeable.AddressSet internal _userList;\\n\\n    /// @dev TokenId list\\n    EnumerableSetUpgradeable.UintSet internal _ticketIdList; // deprecated\\n\\n    /// @dev User -> NFTL amount deposited\\n    mapping(address => uint256) public userDeposits;\\n\\n    /// @dev User -> Ticket Id list\\n    mapping(address => EnumerableSetUpgradeable.UintSet) internal _ticketIdsByUser; // deprecated\\n\\n    /// @dev Ticket Id -> User\\n    mapping(uint256 => address) public userByTicketId; // deprecated\\n\\n    /// @dev Ticket list\\n    uint256[] public ticketIdList; // deprecated\\n\\n    /// @dev User -> Ticket count\\n    mapping(address => uint256) public ticketCountByUser; // deprecated\\n\\n    /// @dev Swith to on/off the deposit\\n    bool public isUserDepositAllowed;\\n\\n    /// @dev Ticket assign status\\n    bool public isTicketAssignedToUsers;\\n\\n    /// @dev User -> Ticket range\\n    mapping(address => TicketRange) public ticketRangeByUser;\\n\\n    /// @dev Winner Ticket Id -> Bool\\n    mapping(uint256 => bool) public isWinnerTicketId;\\n\\n    /// @dev Random word list\\n    uint256[] public randomWordList;\\n\\n    event TicketDistributed(address indexed to, uint256 ticketCount);\\n    event UserDeposited(address indexed user, uint256 nftlAmount);\\n    event RandomWordsRequested(uint256 requestId, uint256 randomCountToRequest);\\n    event RandomWordsReceived(uint256 requestId, uint256[] randomWords);\\n    event WinnerSelected(address indexed by, address indexed winner, uint256 ticketId, uint256 prizeTokenId);\\n\\n    modifier onlyDepositAllowed() {\\n        require(isUserDepositAllowed, \\\"Only deposit allowed\\\");\\n        _;\\n    }\\n\\n    modifier onlyDepositDisallowed() {\\n        require(!isUserDepositAllowed, \\\"Only deposit disallowed\\\");\\n        _;\\n    }\\n\\n    /// @custom:oz-upgrades-unsafe-allow constructor\\n    constructor() {\\n        _disableInitializers();\\n    }\\n\\n    function initialize(\\n        address _nftl,\\n        uint256 _pendingPeriod,\\n        uint256 _totalWinnerTicketCount,\\n        address _prizeNFT,\\n        address _vrfCoordinator\\n    ) public initializer {\\n        __Ownable_init();\\n        __Pausable_init();\\n        __ERC721Holder_init();\\n\\n        require(_nftl != address(0), \\\"Zero address\\\");\\n        require(_pendingPeriod > 86400, \\\"1 day +\\\");\\n        require(_totalWinnerTicketCount > 0, \\\"Zero winner ticket count\\\");\\n        require(_prizeNFT != address(0), \\\"Zero address\\\");\\n        require(_vrfCoordinator != address(0), \\\"Zero address\\\");\\n\\n        nftl = IERC20BurnableUpgradeable(_nftl);\\n        raffleStartAt = block.timestamp + _pendingPeriod; // deprecated\\n        totalWinnerTicketCount = _totalWinnerTicketCount;\\n        prizeNFT = IERC721Upgradeable(_prizeNFT);\\n        vrfCoordinator = _vrfCoordinator;\\n\\n        _createNewSubscription();\\n    }\\n\\n    function depositPrizeNFT(uint256[] memory _prizeNFTTokenIds) external onlyOwner {\\n        uint256 totalPrizeCount = _prizeNFTTokenIds.length;\\n        require((totalPrizeCount + prizeNFTokenIds.length) == totalWinnerTicketCount, \\\"Mismatched prize count\\\");\\n\\n        for (uint256 i = 0; i < totalPrizeCount; ) {\\n            uint256 prizeNFTTokenId = _prizeNFTTokenIds[i];\\n            prizeNFT.safeTransferFrom(msg.sender, address(this), prizeNFTTokenId, bytes(\\\"\\\"));\\n\\n            prizeNFTokenIds.push(prizeNFTTokenId);\\n\\n            unchecked {\\n                ++i;\\n            }\\n        }\\n    }\\n\\n    // Create a new subscription when the contract is initially deployed.\\n    function _createNewSubscription() private {\\n        s_subscriptionId = VRFCoordinatorV2Interface(vrfCoordinator).createSubscription();\\n        VRFCoordinatorV2Interface(vrfCoordinator).addConsumer(s_subscriptionId, address(this));\\n    }\\n\\n    function cancelSubscription() external onlyOwner {\\n        VRFCoordinatorV2Interface(vrfCoordinator).cancelSubscription(s_subscriptionId, owner());\\n        s_subscriptionId = 0;\\n    }\\n\\n    function updateTotalWinnerTicketCount(uint256 _totalWinnerTicketCount) external onlyOwner {\\n        require(_totalWinnerTicketCount > 0, \\\"Zero winner ticket count\\\");\\n        totalWinnerTicketCount = _totalWinnerTicketCount;\\n    }\\n\\n    function distributeTicketsToCitadelKeyHolders(\\n        address[] calldata _holders,\\n        uint256[] calldata _keyCount\\n    ) external onlyDepositAllowed onlyOwner {\\n        uint256 holderCount = _holders.length;\\n        require(holderCount == _keyCount.length, \\\"Invalid params\\\");\\n\\n        // distribute 100 tickets to each Citadel Key holders\\n        for (uint256 i = 0; i < holderCount; ) {\\n            address holder = _holders[i];\\n            uint256 userTicketCountToAssign = 100 * _keyCount[i];\\n\\n            // mark as if the holder deposited tokens for the userTicketCountToAssign calculation in deposit() function.\\n            userDeposits[holder] += userTicketCountToAssign * NFTL_AMOUNT_FOR_TICKET;\\n\\n            // add the user if not exist\\n            _userList.add(holder);\\n\\n            emit TicketDistributed(holder, userTicketCountToAssign);\\n\\n            unchecked {\\n                ++i;\\n            }\\n        }\\n    }\\n\\n    function deposit(uint256 _amount) external onlyDepositAllowed whenNotPaused {\\n        // burn NFTL tokens\\n        nftl.burnFrom(msg.sender, _amount);\\n\\n        // increase the user deposit\\n        userDeposits[msg.sender] += _amount;\\n\\n        // add the user if not exist\\n        _userList.add(msg.sender);\\n\\n        emit UserDeposited(msg.sender, _amount);\\n    }\\n\\n    function assignTicketToUsers() external onlyDepositDisallowed onlyOwner {\\n        require(!isTicketAssignedToUsers, \\\"Already assigned\\\");\\n        isTicketAssignedToUsers = true;\\n\\n        uint256 totalUserCount = getUserCount();\\n        address[] memory users = getUserList();\\n        uint256 currentTotalTicketCount = 0;\\n\\n        for (uint256 i = 0; i < totalUserCount; ) {\\n            address user = users[i];\\n            uint256 userTicketCountToAssign = userDeposits[user] / NFTL_AMOUNT_FOR_TICKET;\\n            ticketRangeByUser[user] = TicketRange({\\n                startTicketId: currentTotalTicketCount,\\n                endTicketId: currentTotalTicketCount + userTicketCountToAssign - 1\\n            });\\n\\n            unchecked {\\n                currentTotalTicketCount += userTicketCountToAssign;\\n                ++i;\\n            }\\n        }\\n\\n        // set the total ticket count\\n        totalTicketCount = currentTotalTicketCount;\\n    }\\n\\n    function manageConsumers(address _consumer, bool _add) external onlyOwner {\\n        _add\\n            ? VRFCoordinatorV2Interface(vrfCoordinator).addConsumer(s_subscriptionId, _consumer)\\n            : VRFCoordinatorV2Interface(vrfCoordinator).removeConsumer(s_subscriptionId, _consumer);\\n    }\\n\\n    function chargeLINK(uint256 _amount) external {\\n        IERC20Upgradeable(LINK).safeTransferFrom(msg.sender, address(this), _amount);\\n        LinkTokenInterface(LINK).transferAndCall(vrfCoordinator, _amount, abi.encode(s_subscriptionId));\\n    }\\n\\n    function withdrawLINK(address _to) external onlyOwner {\\n        IERC20Upgradeable(LINK).safeTransfer(_to, IERC20Upgradeable(LINK).balanceOf(address(this)));\\n    }\\n\\n    function requestRandomWordsForWinnerSelection()\\n        external\\n        onlyDepositDisallowed\\n        onlyOwner\\n        returns (uint256 requestId)\\n    {\\n        require(currentWinnerTicketCount < totalWinnerTicketCount, \\\"Request overflow\\\");\\n        require(totalWinnerTicketCount <= totalTicketCount, \\\"Not enough depositors\\\");\\n\\n        if (randomWordList.length != 0) {\\n            // select winners\\n            bool isWinnerSelected = _selectWinners();\\n            if (isWinnerSelected) return 0;\\n        }\\n\\n        // request the random words ans select winners\\n        uint256 winnerCountToRequest = totalWinnerTicketCount * 2;\\n        requestId = _requestRandomWords(uint32(winnerCountToRequest));\\n\\n        emit RandomWordsRequested(requestId, winnerCountToRequest);\\n    }\\n\\n    function _requestRandomWords(uint32 _numWords) internal returns (uint256) {\\n        return\\n            VRFCoordinatorV2Interface(vrfCoordinator).requestRandomWords(\\n                s_keyHash,\\n                s_subscriptionId,\\n                s_requestConfirmations,\\n                s_callbackGasLimit,\\n                _numWords\\n            );\\n    }\\n\\n    // rawFulfillRandomness is called by VRFCoordinator when it receives a valid VRF\\n    // proof. rawFulfillRandomness then calls fulfillRandomness, after validating\\n    // the origin of the call\\n    function rawFulfillRandomWords(uint256 _requestId, uint256[] memory _randomWords) external {\\n        require(msg.sender == vrfCoordinator, \\\"Only VRF coordinator\\\");\\n        _fulfillRandomWords(_requestId, _randomWords);\\n\\n        emit RandomWordsReceived(_requestId, _randomWords);\\n    }\\n\\n    /**\\n     * @notice fulfillRandomness handles the VRF response. Your contract must\\n     * @notice implement it. See \\\"SECURITY CONSIDERATIONS\\\" above for important\\n     * @notice principles to keep in mind when implementing your fulfillRandomness\\n     * @notice method.\\n     *\\n     * @dev VRFConsumerBaseV2 expects its subcontracts to have a method with this\\n     * @dev signature, and will call it once it has verified the proof\\n     * @dev associated with the randomness. (It is triggered via a call to\\n     * @dev rawFulfillRandomness, below.)\\n     *\\n     * @param _requestId The Id initially returned by requestRandomWords\\n     * @param _randomWords the VRF output expanded to the requested number of words\\n     */\\n    function _fulfillRandomWords(uint256 _requestId, uint256[] memory _randomWords) internal {\\n        // since we'll use the random word in the reverse order, push the last random word first\\n        for (uint256 i = 0; i < _randomWords.length; ) {\\n            randomWordList.push(_randomWords[_randomWords.length - 1 - i]);\\n\\n            unchecked {\\n                ++i;\\n            }\\n        }\\n\\n        // select winners\\n        _selectWinners();\\n    }\\n\\n    function _selectWinners() internal returns (bool) {\\n        // get the random word and remove it from the list\\n        uint256 randomWord = randomWordList[randomWordList.length - 1];\\n        randomWordList.pop();\\n\\n        // select the winner\\n        uint256 winnerTicketId;\\n        while (true) {\\n            winnerTicketId = randomWord % totalTicketCount;\\n\\n            if (isWinnerTicketId[winnerTicketId]) {\\n                // winner ticket Id already selected\\n                if (randomWordList.length == 0) {\\n                    return false;\\n                } else {\\n                    randomWord = randomWordList[randomWordList.length - 1];\\n                    randomWordList.pop();\\n                }\\n            } else {\\n                break;\\n            }\\n        }\\n\\n        address[] memory users = getUserList();\\n        uint256 statIndexToCheck = 0;\\n        uint256 endIndexToCheck = getUserCount() - 1;\\n        uint256 userIndexToCheck;\\n        address userToCheck;\\n        address winner;\\n        while (true) {\\n            userIndexToCheck = (statIndexToCheck + endIndexToCheck) / 2;\\n            userToCheck = users[userIndexToCheck];\\n\\n            if (\\n                ticketRangeByUser[userToCheck].startTicketId <= winnerTicketId &&\\n                winnerTicketId <= ticketRangeByUser[userToCheck].endTicketId\\n            ) {\\n                winner = userToCheck;\\n                break;\\n            } else if (winnerTicketId < ticketRangeByUser[userToCheck].startTicketId) {\\n                endIndexToCheck = userIndexToCheck - 1;\\n            } else {\\n                statIndexToCheck = userIndexToCheck + 1;\\n            }\\n        }\\n\\n        // transfer the prize\\n        uint256 prizeTokenId = prizeNFTokenIds[currentWinnerTicketCount];\\n        prizeNFT.safeTransferFrom(address(this), winner, prizeTokenId, bytes(\\\"\\\"));\\n        isWinnerTicketId[winnerTicketId] = true;\\n\\n        // store the winner\\n        winners.push(WinnerInfo({ ticketId: winnerTicketId, winner: winner, prizeTokenId: prizeTokenId }));\\n\\n        // increase the current winner ticket count\\n        ++currentWinnerTicketCount;\\n\\n        emit WinnerSelected(msg.sender, winner, winnerTicketId, prizeTokenId);\\n\\n        return true;\\n    }\\n\\n    function getWinners() external view returns (WinnerInfo[] memory) {\\n        return winners;\\n    }\\n\\n    function getUserCount() public view returns (uint256) {\\n        return _userList.length();\\n    }\\n\\n    function getUserList() public view returns (address[] memory) {\\n        return _userList.values();\\n    }\\n\\n    function getRandomWordsList() external view returns (uint256[] memory) {\\n        return randomWordList;\\n    }\\n\\n    function allowUserDeposit() external onlyOwner {\\n        isUserDepositAllowed = true;\\n    }\\n\\n    function disallowUserDeposit() external onlyOwner {\\n        isUserDepositAllowed = false;\\n    }\\n\\n    /**\\n     * @notice Pause the contract\\n     */\\n    function pause() external onlyOwner {\\n        _pause();\\n    }\\n\\n    /**\\n     * @notice Unpause the contract\\n     */\\n    function unpause() external onlyOwner {\\n        _unpause();\\n    }\\n}\\n\",\"keccak256\":\"0xaa24a4fdad6c7d205d725661a6f6e724990f12fc451a81e9783a19bda0bf1961\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60806040523480156200001157600080fd5b506200001c62000022565b620000e4565b600054610100900460ff16156200008f5760405162461bcd60e51b815260206004820152602760248201527f496e697469616c697a61626c653a20636f6e747261637420697320696e697469604482015266616c697a696e6760c81b606482015260840160405180910390fd5b60005460ff9081161015620000e2576000805460ff191660ff9081179091556040519081527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb38474024989060200160405180910390a15b565b6129be80620000f46000396000f3fe608060405234801561001057600080fd5b506004361061027f5760003560e01c80637b762fac1161015c578063aa0a1a89116100ce578063c67c11e611610087578063c67c11e6146105cc578063df15c37e146105df578063e6c81c72146105f4578063f200006c14610607578063f2fde38b14610630578063f716675a1461064357600080fd5b8063aa0a1a891461053a578063b5cb15f714610576578063b6b55f251461057e578063b852204314610591578063bc7c7bc2146105a6578063bf384e10146105b957600080fd5b80638c2906d5116101205780638c2906d5146104a85780638da5cb5b146104bb578063931d393e146104cc5780639494b6c4146104d45780639e7d9ae1146104f7578063a2fb11751461050457600080fd5b80637b762fac1461043e5780638456cb59146104465780638699282e1461044e578063869c046c146104635780638ac000211461047657600080fd5b80633951dcff116101f55780635671fc66116101b95780635671fc66146103bd57806359839de6146103cd5780635c975abb146103ed5780635e2692be146104045780636ee7c19914610416578063715018a61461043657600080fd5b80633951dcff1461035c5780633b2490311461036f5780633f4ba83a1461038257806345483d491461038a5780634e81da0a1461039257600080fd5b806319d750ce1161024757806319d750ce146103145780631fe543e31461031d57806324e9edb014610330578063302f0f1814610338578063323c1bb31461034057806333818c881461034957600080fd5b806302e4bb9f1461028457806303b54d52146102995780630ba36dcd146102ac57806314558fab146102df578063150b7a02146102e8575b600080fd5b61029761029236600461220e565b61064c565b005b6102976102a7366004612243565b610727565b6102cc6102ba36600461229a565b60d76020526000908152604090205481565b6040519081526020015b60405180910390f35b6102cc60d25481565b6102fb6102f63660046122fb565b6109b0565b6040516001600160e01b031990911681526020016102d6565b6102cc60cd5481565b61029761032b36600461242e565b6109c1565b610297610a59565b610297610afd565b6102cc60cf5481565b6102cc61035736600461220e565b610b11565b6102cc61036a36600461220e565b610b32565b6102cc61037d36600461220e565b610b42565b610297610b52565b610297610b64565b60cc546103a5906001600160a01b031681565b6040516001600160a01b0390911681526020016102d6565b6102cc683635c9adc5dea0000081565b6102cc6103db36600461229a565b60db6020526000908152604090205481565b60655460ff165b60405190151581526020016102d6565b60dc546103f490610100900460ff1681565b6102cc61042436600461220e565b60ce6020526000908152604090205481565b610297610b7b565b6102cc610b8d565b610297610cf7565b610456610d07565b6040516102d691906124af565b61029761047136600461220e565b610d5f565b60c95461049090600160a01b90046001600160401b031681565b6040516001600160401b0390911681526020016102d6565b6102976104b636600461250d565b610db7565b6033546001600160a01b03166103a5565b610297610f42565b6103f46104e236600461220e565b60de6020526000908152604090205460ff1681565b60dc546103f49060ff1681565b61051761051236600461220e565b6110d8565b604080519384526001600160a01b039092166020840152908201526060016102d6565b61056161054836600461229a565b60dd602052600090815260409020805460019091015482565b604080519283526020830191909152016102d6565b6102cc611117565b61029761058c36600461220e565b611128565b610599611247565b6040516102d69190612578565b6102976105b43660046125d3565b611253565b6102976105c736600461229a565b61130e565b6102976105da36600461260a565b6113ae565b6105e76114ed565b6040516102d6919061263e565b60ca546103a5906001600160a01b031681565b6103a561061536600461220e565b60d9602052600090815260409020546001600160a01b031681565b61029761063e36600461229a565b61156f565b6102cc60d05481565b61066c73326c977e6efc84e512bb9c30f76e30c160ed06fb3330846115e5565b60c95460408051600160a01b83046001600160401b0316602082015273326c977e6efc84e512bb9c30f76e30c160ed06fb92634000aea0926001600160a01b03909116918591016040516020818303038152906040526040518463ffffffff1660e01b81526004016106e0939291906126f8565b6020604051808303816000875af11580156106ff573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107239190612728565b5050565b600054610100900460ff16158080156107475750600054600160ff909116105b806107615750303b158015610761575060005460ff166001145b6107c95760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201526d191e481a5b9a5d1a585b1a5e995960921b60648201526084015b60405180910390fd5b6000805460ff1916600117905580156107ec576000805461ff0019166101001790555b6107f4611656565b6107fc611685565b6108046116b4565b6001600160a01b03861661082a5760405162461bcd60e51b81526004016107c090612745565b6201518085116108665760405162461bcd60e51b81526020600482015260076024820152663120646179202b60c81b60448201526064016107c0565b600084116108b15760405162461bcd60e51b815260206004820152601860248201527716995c9bc81dda5b9b995c881d1a58dad95d0818dbdd5b9d60421b60448201526064016107c0565b6001600160a01b0383166108d75760405162461bcd60e51b81526004016107c090612745565b6001600160a01b0382166108fd5760405162461bcd60e51b81526004016107c090612745565b60cc80546001600160a01b0319166001600160a01b0388161790556109228542612781565b60cd5560cf84905560ca80546001600160a01b038086166001600160a01b03199283161790925560c98054928516929091169190911790556109626116db565b80156109a8576000805461ff0019169055604051600181527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb38474024989060200160405180910390a15b505050505050565b630a85bd0160e11b5b949350505050565b60c9546001600160a01b03163314610a125760405162461bcd60e51b815260206004820152601460248201527327b7363c902b29231031b7b7b93234b730ba37b960611b60448201526064016107c0565b610a1c82826117e5565b7f19a2c8ede94142b0c8ed074fd0a4778b9928cc8e06adc32dc2c1b36d698610678282604051610a4d929190612799565b60405180910390a15050565b610a61611851565b60c9546001600160a01b0381169063d7ae1d30906001600160401b03600160a01b90910416610a986033546001600160a01b031690565b6040518363ffffffff1660e01b8152600401610ab59291906127b2565b600060405180830381600087803b158015610acf57600080fd5b505af1158015610ae3573d6000803e3d6000fd5b505060c9805467ffffffffffffffff60a01b191690555050565b610b05611851565b60dc805460ff19169055565b60cb8181548110610b2157600080fd5b600091825260209091200154905081565b60da8181548110610b2157600080fd5b60df8181548110610b2157600080fd5b610b5a611851565b610b626118ab565b565b610b6c611851565b60dc805460ff19166001179055565b610b83611851565b610b6260006118fd565b60dc5460009060ff1615610bdd5760405162461bcd60e51b815260206004820152601760248201527613db9b1e4819195c1bdcda5d08191a5cd85b1b1bddd959604a1b60448201526064016107c0565b610be5611851565b60cf5460d05410610c2b5760405162461bcd60e51b815260206004820152601060248201526f52657175657374206f766572666c6f7760801b60448201526064016107c0565b60d25460cf541115610c775760405162461bcd60e51b81526020600482015260156024820152744e6f7420656e6f756768206465706f7369746f727360581b60448201526064016107c0565b60df5415610c9b576000610c8961194f565b90508015610c9957600091505090565b505b600060cf546002610cac91906127d4565b9050610cb781611d19565b60408051828152602081018490529193507fc904ef81354df41ed9256aa2ab862017f6ab3f33f3f7ca50016a1786083d086d910160405180910390a15090565b610cff611851565b610b62611ddf565b606060df805480602002602001604051908101604052809291908181526020018280548015610d5557602002820191906000526020600020905b815481526020019060010190808311610d41575b5050505050905090565b610d67611851565b60008111610db25760405162461bcd60e51b815260206004820152601860248201527716995c9bc81dda5b9b995c881d1a58dad95d0818dbdd5b9d60421b60448201526064016107c0565b60cf55565b60dc5460ff16610e005760405162461bcd60e51b815260206004820152601460248201527313db9b1e4819195c1bdcda5d08185b1b1bddd95960621b60448201526064016107c0565b610e08611851565b82818114610e495760405162461bcd60e51b815260206004820152600e60248201526d496e76616c696420706172616d7360901b60448201526064016107c0565b60005b818110156109a8576000868683818110610e6857610e686127f3565b9050602002016020810190610e7d919061229a565b90506000858584818110610e9357610e936127f3565b905060200201356064610ea691906127d4565b9050610ebb683635c9adc5dea00000826127d4565b6001600160a01b038316600090815260d7602052604081208054909190610ee3908490612781565b90915550610ef4905060d383611e1c565b50816001600160a01b03167fe3fb7fcd519a3e7c790d02eb7b35c2f9b0ad2b62c0820dcc728151ebd9728d1b82604051610f3091815260200190565b60405180910390a25050600101610e4c565b60dc5460ff1615610f8f5760405162461bcd60e51b815260206004820152601760248201527613db9b1e4819195c1bdcda5d08191a5cd85b1b1bddd959604a1b60448201526064016107c0565b610f97611851565b60dc54610100900460ff1615610fe25760405162461bcd60e51b815260206004820152601060248201526f105b1c9958591e48185cdcda59db995960821b60448201526064016107c0565b60dc805461ff0019166101001790556000610ffb611117565b90506000611007611247565b90506000805b838110156110d0576000838281518110611029576110296127f3565b602002602001015190506000683635c9adc5dea0000060d76000846001600160a01b03166001600160a01b031681526020019081526020016000205461106f919061281f565b90506040518060400160405280858152602001600183876110909190612781565b61109a9190612833565b90526001600160a01b03909216600090815260dd602090815260409091208351815592015160019283015592909201910161100d565b5060d2555050565b60d181815481106110e857600080fd5b60009182526020909120600390910201805460018201546002909201549092506001600160a01b039091169083565b600061112360d3611e38565b905090565b60dc5460ff166111715760405162461bcd60e51b815260206004820152601460248201527313db9b1e4819195c1bdcda5d08185b1b1bddd95960621b60448201526064016107c0565b611179611e42565b60cc5460405163079cc67960e41b8152336004820152602481018390526001600160a01b03909116906379cc679090604401600060405180830381600087803b1580156111c557600080fd5b505af11580156111d9573d6000803e3d6000fd5b505033600090815260d76020526040812080548594509092506111fd908490612781565b9091555061120e905060d333611e1c565b5060405181815233907f951fdc61d6a98f96098a17ea6ac287a6fd38aea6bef73083c93b274cb830107d9060200160405180910390a250565b606061112360d3611e88565b61125b611851565b806112ce5760c954604051639f87fad760e01b81526001600160a01b03821691639f87fad7916112a091600160a01b90046001600160401b03169086906004016127b2565b600060405180830381600087803b1580156112ba57600080fd5b505af11580156109a8573d6000803e3d6000fd5b60c954604051631cd0704360e21b81526001600160a01b03821691637341c10c916112a091600160a01b90046001600160401b03169086906004016127b2565b611316611851565b6040516370a0823160e01b81523060048201526113ab90829073326c977e6efc84e512bb9c30f76e30c160ed06fb906370a0823190602401602060405180830381865afa15801561136b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061138f919061284a565b73326c977e6efc84e512bb9c30f76e30c160ed06fb9190611e95565b50565b6113b6611851565b805160cf5460cb546113c89083612781565b1461140e5760405162461bcd60e51b8152602060048201526016602482015275135a5cdb585d18da1959081c1c9a5e994818dbdd5b9d60521b60448201526064016107c0565b60005b818110156114e857600083828151811061142d5761142d6127f3565b60209081029190910181015160ca546040805193840181526000845251635c46a7ef60e11b81529193506001600160a01b03169163b88d4fde9161147991339130918791600401612863565b600060405180830381600087803b15801561149357600080fd5b505af11580156114a7573d6000803e3d6000fd5b505060cb8054600181810183556000929092527fa7ce836d032b2bf62b7e2097a8e0a6d8aeb35405ad15271e96d3b0188a1d06fb0193909355505001611411565b505050565b606060d1805480602002602001604051908101604052809291908181526020016000905b828210156115665760008481526020908190206040805160608101825260038602909201805483526001808201546001600160a01b031684860152600290910154918301919091529083529092019101611511565b50505050905090565b611577611851565b6001600160a01b0381166115dc5760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b60648201526084016107c0565b6113ab816118fd565b6040516001600160a01b03808516602483015283166044820152606481018290526116509085906323b872dd60e01b906084015b60408051601f198184030181529190526020810180516001600160e01b03166001600160e01b031990931692909217909152611ec5565b50505050565b600054610100900460ff1661167d5760405162461bcd60e51b81526004016107c0906128a0565b610b62611f97565b600054610100900460ff166116ac5760405162461bcd60e51b81526004016107c0906128a0565b610b62611fc7565b600054610100900460ff16610b625760405162461bcd60e51b81526004016107c0906128a0565b60c960009054906101000a90046001600160a01b03166001600160a01b031663a21a23e46040518163ffffffff1660e01b81526004016020604051808303816000875af1158015611730573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061175491906128eb565b60c980546001600160401b03928316600160a01b90810267ffffffffffffffff60a01b198316811793849055604051631cd0704360e21b81526001600160a01b03918216919093161793637341c10c936117b793929004169030906004016127b2565b600060405180830381600087803b1580156117d157600080fd5b505af1158015611650573d6000803e3d6000fd5b60005b81518110156118485760df8282600185516118039190612833565b61180d9190612833565b8151811061181d5761181d6127f3565b60209081029190910181015182546001818101855560009485529290932090920191909155016117e8565b506114e861194f565b6033546001600160a01b03163314610b625760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657260448201526064016107c0565b6118b3611ffa565b6065805460ff191690557f5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa335b6040516001600160a01b03909116815260200160405180910390a1565b603380546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b60df8054600091829161196490600190612833565b81548110611974576119746127f3565b9060005260206000200154905060df80548061199257611992612914565b6001900381819060005260206000200160009055905560005b60d2546119b8908361292a565b600081815260de602052604090205490915060ff1615611a3b5760df546119e25760009250505090565b60df80546119f290600190612833565b81548110611a0257611a026127f3565b9060005260206000200154915060df805480611a2057611a20612914565b600190038181906000526020600020016000905590556119ab565b6000611a45611247565b90506000806001611a54611117565b611a5e9190612833565b905060008060005b6002611a728587612781565b611a7c919061281f565b9250858381518110611a9057611a906127f3565b602002602001015191508660dd6000846001600160a01b03166001600160a01b031681526020019081526020016000206000015411158015611aed57506001600160a01b038216600090815260dd60205260409020600101548711155b15611af9575080611b3d565b6001600160a01b038216600090815260dd6020526040902054871015611b2b57611b24600184612833565b9350611a66565b611b36836001612781565b9450611a66565b600060cb60d05481548110611b5457611b546127f3565b600091825260208083209091015460ca546040805193840181529383529251635c46a7ef60e11b81529093506001600160a01b039092169163b88d4fde91611ba59130918791879190600401612863565b600060405180830381600087803b158015611bbf57600080fd5b505af1158015611bd3573d6000803e3d6000fd5b505050600089815260de602090815260408083208054600160ff19909116811790915581516060810183528d81526001600160a01b0388811694820194855292810187815260d180549384018155865290517f695fb3134ad82c3b8022bc5464edd0bcc9424ef672b52245dcb6ab2374327ce360039093029283015592517f695fb3134ad82c3b8022bc5464edd0bcc9424ef672b52245dcb6ab2374327ce4820180546001600160a01b031916919093161790915590517f695fb3134ad82c3b8022bc5464edd0bcc9424ef672b52245dcb6ab2374327ce59091015560d08054909250611cbf9061293e565b9091555060408051898152602081018390526001600160a01b0384169133917fef61d5e7c73a0488ebba4ce7e2cc6cab14e1c52e49e75a2dd6d2c242770db768910160405180910390a36001995050505050505050505090565b60c9546040516305d3b1d360e41b81527f79d3d8832d904592c0bf9818b621522c988bb8b0c05cdc3b15aea1b6e8db0c156004820152600160a01b82046001600160401b0316602482015260036044820152622625a0606482015263ffffffff831660848201526000916001600160a01b031690635d3b1d309060a4016020604051808303816000875af1158015611db5573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611dd9919061284a565b92915050565b611de7611e42565b6065805460ff191660011790557f62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a2586118e03390565b6000611e31836001600160a01b038416612043565b9392505050565b6000611dd9825490565b60655460ff1615610b625760405162461bcd60e51b815260206004820152601060248201526f14185d5cd8589b194e881c185d5cd95960821b60448201526064016107c0565b60606000611e3183612092565b6040516001600160a01b0383166024820152604481018290526114e890849063a9059cbb60e01b90606401611619565b6000611f1a826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b03166120ee9092919063ffffffff16565b8051909150156114e85780806020019051810190611f389190612728565b6114e85760405162461bcd60e51b815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e6044820152691bdd081cdd58d8d9595960b21b60648201526084016107c0565b600054610100900460ff16611fbe5760405162461bcd60e51b81526004016107c0906128a0565b610b62336118fd565b600054610100900460ff16611fee5760405162461bcd60e51b81526004016107c0906128a0565b6065805460ff19169055565b60655460ff16610b625760405162461bcd60e51b815260206004820152601460248201527314185d5cd8589b194e881b9bdd081c185d5cd95960621b60448201526064016107c0565b600081815260018301602052604081205461208a57508154600181810184556000848152602080822090930184905584548482528286019093526040902091909155611dd9565b506000611dd9565b6060816000018054806020026020016040519081016040528092919081815260200182805480156120e257602002820191906000526020600020905b8154815260200190600101908083116120ce575b50505050509050919050565b60606109b9848460008585600080866001600160a01b031685876040516121159190612959565b60006040518083038185875af1925050503d8060008114612152576040519150601f19603f3d011682016040523d82523d6000602084013e612157565b606091505b509150915061216887838387612173565b979650505050505050565b606083156121df5782516121d8576001600160a01b0385163b6121d85760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e747261637400000060448201526064016107c0565b50816109b9565b6109b983838151156121f45781518083602001fd5b8060405162461bcd60e51b81526004016107c09190612975565b60006020828403121561222057600080fd5b5035919050565b80356001600160a01b038116811461223e57600080fd5b919050565b600080600080600060a0868803121561225b57600080fd5b61226486612227565b9450602086013593506040860135925061228060608701612227565b915061228e60808701612227565b90509295509295909350565b6000602082840312156122ac57600080fd5b611e3182612227565b634e487b7160e01b600052604160045260246000fd5b604051601f8201601f191681016001600160401b03811182821017156122f3576122f36122b5565b604052919050565b6000806000806080858703121561231157600080fd5b61231a85612227565b93506020612329818701612227565b93506040860135925060608601356001600160401b038082111561234c57600080fd5b818801915088601f83011261236057600080fd5b813581811115612372576123726122b5565b612384601f8201601f191685016122cb565b9150808252898482850101111561239a57600080fd5b808484018584013760008482840101525080935050505092959194509250565b600082601f8301126123cb57600080fd5b813560206001600160401b038211156123e6576123e66122b5565b8160051b6123f58282016122cb565b928352848101820192828101908785111561240f57600080fd5b83870192505b8483101561216857823582529183019190830190612415565b6000806040838503121561244157600080fd5b8235915060208301356001600160401b0381111561245e57600080fd5b61246a858286016123ba565b9150509250929050565b600081518084526020808501945080840160005b838110156124a457815187529582019590820190600101612488565b509495945050505050565b602081526000611e316020830184612474565b60008083601f8401126124d457600080fd5b5081356001600160401b038111156124eb57600080fd5b6020830191508360208260051b850101111561250657600080fd5b9250929050565b6000806000806040858703121561252357600080fd5b84356001600160401b038082111561253a57600080fd5b612546888389016124c2565b9096509450602087013591508082111561255f57600080fd5b5061256c878288016124c2565b95989497509550505050565b6020808252825182820181905260009190848201906040850190845b818110156125b95783516001600160a01b031683529284019291840191600101612594565b50909695505050505050565b80151581146113ab57600080fd5b600080604083850312156125e657600080fd5b6125ef83612227565b915060208301356125ff816125c5565b809150509250929050565b60006020828403121561261c57600080fd5b81356001600160401b0381111561263257600080fd5b6109b9848285016123ba565b602080825282518282018190526000919060409081850190868401855b8281101561269357815180518552868101516001600160a01b031687860152850151858501526060909301929085019060010161265b565b5091979650505050505050565b60005b838110156126bb5781810151838201526020016126a3565b838111156116505750506000910152565b600081518084526126e48160208601602086016126a0565b601f01601f19169290920160200192915050565b60018060a01b038416815282602082015260606040820152600061271f60608301846126cc565b95945050505050565b60006020828403121561273a57600080fd5b8151611e31816125c5565b6020808252600c908201526b5a65726f206164647265737360a01b604082015260600190565b634e487b7160e01b600052601160045260246000fd5b600082198211156127945761279461276b565b500190565b8281526040602082015260006109b96040830184612474565b6001600160401b039290921682526001600160a01b0316602082015260400190565b60008160001904831182151516156127ee576127ee61276b565b500290565b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052601260045260246000fd5b60008261282e5761282e612809565b500490565b6000828210156128455761284561276b565b500390565b60006020828403121561285c57600080fd5b5051919050565b6001600160a01b0385811682528416602082015260408101839052608060608201819052600090612896908301846126cc565b9695505050505050565b6020808252602b908201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960408201526a6e697469616c697a696e6760a81b606082015260800190565b6000602082840312156128fd57600080fd5b81516001600160401b0381168114611e3157600080fd5b634e487b7160e01b600052603160045260246000fd5b60008261293957612939612809565b500690565b60006000198214156129525761295261276b565b5060010190565b6000825161296b8184602087016126a0565b9190910192915050565b602081526000611e3160208301846126cc56fea264697066735822122062244fc3cf5fb27265a1d5fd13b5a223288bc5155d9514a46774be15792532c664736f6c634300080b0033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b506004361061027f5760003560e01c80637b762fac1161015c578063aa0a1a89116100ce578063c67c11e611610087578063c67c11e6146105cc578063df15c37e146105df578063e6c81c72146105f4578063f200006c14610607578063f2fde38b14610630578063f716675a1461064357600080fd5b8063aa0a1a891461053a578063b5cb15f714610576578063b6b55f251461057e578063b852204314610591578063bc7c7bc2146105a6578063bf384e10146105b957600080fd5b80638c2906d5116101205780638c2906d5146104a85780638da5cb5b146104bb578063931d393e146104cc5780639494b6c4146104d45780639e7d9ae1146104f7578063a2fb11751461050457600080fd5b80637b762fac1461043e5780638456cb59146104465780638699282e1461044e578063869c046c146104635780638ac000211461047657600080fd5b80633951dcff116101f55780635671fc66116101b95780635671fc66146103bd57806359839de6146103cd5780635c975abb146103ed5780635e2692be146104045780636ee7c19914610416578063715018a61461043657600080fd5b80633951dcff1461035c5780633b2490311461036f5780633f4ba83a1461038257806345483d491461038a5780634e81da0a1461039257600080fd5b806319d750ce1161024757806319d750ce146103145780631fe543e31461031d57806324e9edb014610330578063302f0f1814610338578063323c1bb31461034057806333818c881461034957600080fd5b806302e4bb9f1461028457806303b54d52146102995780630ba36dcd146102ac57806314558fab146102df578063150b7a02146102e8575b600080fd5b61029761029236600461220e565b61064c565b005b6102976102a7366004612243565b610727565b6102cc6102ba36600461229a565b60d76020526000908152604090205481565b6040519081526020015b60405180910390f35b6102cc60d25481565b6102fb6102f63660046122fb565b6109b0565b6040516001600160e01b031990911681526020016102d6565b6102cc60cd5481565b61029761032b36600461242e565b6109c1565b610297610a59565b610297610afd565b6102cc60cf5481565b6102cc61035736600461220e565b610b11565b6102cc61036a36600461220e565b610b32565b6102cc61037d36600461220e565b610b42565b610297610b52565b610297610b64565b60cc546103a5906001600160a01b031681565b6040516001600160a01b0390911681526020016102d6565b6102cc683635c9adc5dea0000081565b6102cc6103db36600461229a565b60db6020526000908152604090205481565b60655460ff165b60405190151581526020016102d6565b60dc546103f490610100900460ff1681565b6102cc61042436600461220e565b60ce6020526000908152604090205481565b610297610b7b565b6102cc610b8d565b610297610cf7565b610456610d07565b6040516102d691906124af565b61029761047136600461220e565b610d5f565b60c95461049090600160a01b90046001600160401b031681565b6040516001600160401b0390911681526020016102d6565b6102976104b636600461250d565b610db7565b6033546001600160a01b03166103a5565b610297610f42565b6103f46104e236600461220e565b60de6020526000908152604090205460ff1681565b60dc546103f49060ff1681565b61051761051236600461220e565b6110d8565b604080519384526001600160a01b039092166020840152908201526060016102d6565b61056161054836600461229a565b60dd602052600090815260409020805460019091015482565b604080519283526020830191909152016102d6565b6102cc611117565b61029761058c36600461220e565b611128565b610599611247565b6040516102d69190612578565b6102976105b43660046125d3565b611253565b6102976105c736600461229a565b61130e565b6102976105da36600461260a565b6113ae565b6105e76114ed565b6040516102d6919061263e565b60ca546103a5906001600160a01b031681565b6103a561061536600461220e565b60d9602052600090815260409020546001600160a01b031681565b61029761063e36600461229a565b61156f565b6102cc60d05481565b61066c73326c977e6efc84e512bb9c30f76e30c160ed06fb3330846115e5565b60c95460408051600160a01b83046001600160401b0316602082015273326c977e6efc84e512bb9c30f76e30c160ed06fb92634000aea0926001600160a01b03909116918591016040516020818303038152906040526040518463ffffffff1660e01b81526004016106e0939291906126f8565b6020604051808303816000875af11580156106ff573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107239190612728565b5050565b600054610100900460ff16158080156107475750600054600160ff909116105b806107615750303b158015610761575060005460ff166001145b6107c95760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201526d191e481a5b9a5d1a585b1a5e995960921b60648201526084015b60405180910390fd5b6000805460ff1916600117905580156107ec576000805461ff0019166101001790555b6107f4611656565b6107fc611685565b6108046116b4565b6001600160a01b03861661082a5760405162461bcd60e51b81526004016107c090612745565b6201518085116108665760405162461bcd60e51b81526020600482015260076024820152663120646179202b60c81b60448201526064016107c0565b600084116108b15760405162461bcd60e51b815260206004820152601860248201527716995c9bc81dda5b9b995c881d1a58dad95d0818dbdd5b9d60421b60448201526064016107c0565b6001600160a01b0383166108d75760405162461bcd60e51b81526004016107c090612745565b6001600160a01b0382166108fd5760405162461bcd60e51b81526004016107c090612745565b60cc80546001600160a01b0319166001600160a01b0388161790556109228542612781565b60cd5560cf84905560ca80546001600160a01b038086166001600160a01b03199283161790925560c98054928516929091169190911790556109626116db565b80156109a8576000805461ff0019169055604051600181527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb38474024989060200160405180910390a15b505050505050565b630a85bd0160e11b5b949350505050565b60c9546001600160a01b03163314610a125760405162461bcd60e51b815260206004820152601460248201527327b7363c902b29231031b7b7b93234b730ba37b960611b60448201526064016107c0565b610a1c82826117e5565b7f19a2c8ede94142b0c8ed074fd0a4778b9928cc8e06adc32dc2c1b36d698610678282604051610a4d929190612799565b60405180910390a15050565b610a61611851565b60c9546001600160a01b0381169063d7ae1d30906001600160401b03600160a01b90910416610a986033546001600160a01b031690565b6040518363ffffffff1660e01b8152600401610ab59291906127b2565b600060405180830381600087803b158015610acf57600080fd5b505af1158015610ae3573d6000803e3d6000fd5b505060c9805467ffffffffffffffff60a01b191690555050565b610b05611851565b60dc805460ff19169055565b60cb8181548110610b2157600080fd5b600091825260209091200154905081565b60da8181548110610b2157600080fd5b60df8181548110610b2157600080fd5b610b5a611851565b610b626118ab565b565b610b6c611851565b60dc805460ff19166001179055565b610b83611851565b610b6260006118fd565b60dc5460009060ff1615610bdd5760405162461bcd60e51b815260206004820152601760248201527613db9b1e4819195c1bdcda5d08191a5cd85b1b1bddd959604a1b60448201526064016107c0565b610be5611851565b60cf5460d05410610c2b5760405162461bcd60e51b815260206004820152601060248201526f52657175657374206f766572666c6f7760801b60448201526064016107c0565b60d25460cf541115610c775760405162461bcd60e51b81526020600482015260156024820152744e6f7420656e6f756768206465706f7369746f727360581b60448201526064016107c0565b60df5415610c9b576000610c8961194f565b90508015610c9957600091505090565b505b600060cf546002610cac91906127d4565b9050610cb781611d19565b60408051828152602081018490529193507fc904ef81354df41ed9256aa2ab862017f6ab3f33f3f7ca50016a1786083d086d910160405180910390a15090565b610cff611851565b610b62611ddf565b606060df805480602002602001604051908101604052809291908181526020018280548015610d5557602002820191906000526020600020905b815481526020019060010190808311610d41575b5050505050905090565b610d67611851565b60008111610db25760405162461bcd60e51b815260206004820152601860248201527716995c9bc81dda5b9b995c881d1a58dad95d0818dbdd5b9d60421b60448201526064016107c0565b60cf55565b60dc5460ff16610e005760405162461bcd60e51b815260206004820152601460248201527313db9b1e4819195c1bdcda5d08185b1b1bddd95960621b60448201526064016107c0565b610e08611851565b82818114610e495760405162461bcd60e51b815260206004820152600e60248201526d496e76616c696420706172616d7360901b60448201526064016107c0565b60005b818110156109a8576000868683818110610e6857610e686127f3565b9050602002016020810190610e7d919061229a565b90506000858584818110610e9357610e936127f3565b905060200201356064610ea691906127d4565b9050610ebb683635c9adc5dea00000826127d4565b6001600160a01b038316600090815260d7602052604081208054909190610ee3908490612781565b90915550610ef4905060d383611e1c565b50816001600160a01b03167fe3fb7fcd519a3e7c790d02eb7b35c2f9b0ad2b62c0820dcc728151ebd9728d1b82604051610f3091815260200190565b60405180910390a25050600101610e4c565b60dc5460ff1615610f8f5760405162461bcd60e51b815260206004820152601760248201527613db9b1e4819195c1bdcda5d08191a5cd85b1b1bddd959604a1b60448201526064016107c0565b610f97611851565b60dc54610100900460ff1615610fe25760405162461bcd60e51b815260206004820152601060248201526f105b1c9958591e48185cdcda59db995960821b60448201526064016107c0565b60dc805461ff0019166101001790556000610ffb611117565b90506000611007611247565b90506000805b838110156110d0576000838281518110611029576110296127f3565b602002602001015190506000683635c9adc5dea0000060d76000846001600160a01b03166001600160a01b031681526020019081526020016000205461106f919061281f565b90506040518060400160405280858152602001600183876110909190612781565b61109a9190612833565b90526001600160a01b03909216600090815260dd602090815260409091208351815592015160019283015592909201910161100d565b5060d2555050565b60d181815481106110e857600080fd5b60009182526020909120600390910201805460018201546002909201549092506001600160a01b039091169083565b600061112360d3611e38565b905090565b60dc5460ff166111715760405162461bcd60e51b815260206004820152601460248201527313db9b1e4819195c1bdcda5d08185b1b1bddd95960621b60448201526064016107c0565b611179611e42565b60cc5460405163079cc67960e41b8152336004820152602481018390526001600160a01b03909116906379cc679090604401600060405180830381600087803b1580156111c557600080fd5b505af11580156111d9573d6000803e3d6000fd5b505033600090815260d76020526040812080548594509092506111fd908490612781565b9091555061120e905060d333611e1c565b5060405181815233907f951fdc61d6a98f96098a17ea6ac287a6fd38aea6bef73083c93b274cb830107d9060200160405180910390a250565b606061112360d3611e88565b61125b611851565b806112ce5760c954604051639f87fad760e01b81526001600160a01b03821691639f87fad7916112a091600160a01b90046001600160401b03169086906004016127b2565b600060405180830381600087803b1580156112ba57600080fd5b505af11580156109a8573d6000803e3d6000fd5b60c954604051631cd0704360e21b81526001600160a01b03821691637341c10c916112a091600160a01b90046001600160401b03169086906004016127b2565b611316611851565b6040516370a0823160e01b81523060048201526113ab90829073326c977e6efc84e512bb9c30f76e30c160ed06fb906370a0823190602401602060405180830381865afa15801561136b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061138f919061284a565b73326c977e6efc84e512bb9c30f76e30c160ed06fb9190611e95565b50565b6113b6611851565b805160cf5460cb546113c89083612781565b1461140e5760405162461bcd60e51b8152602060048201526016602482015275135a5cdb585d18da1959081c1c9a5e994818dbdd5b9d60521b60448201526064016107c0565b60005b818110156114e857600083828151811061142d5761142d6127f3565b60209081029190910181015160ca546040805193840181526000845251635c46a7ef60e11b81529193506001600160a01b03169163b88d4fde9161147991339130918791600401612863565b600060405180830381600087803b15801561149357600080fd5b505af11580156114a7573d6000803e3d6000fd5b505060cb8054600181810183556000929092527fa7ce836d032b2bf62b7e2097a8e0a6d8aeb35405ad15271e96d3b0188a1d06fb0193909355505001611411565b505050565b606060d1805480602002602001604051908101604052809291908181526020016000905b828210156115665760008481526020908190206040805160608101825260038602909201805483526001808201546001600160a01b031684860152600290910154918301919091529083529092019101611511565b50505050905090565b611577611851565b6001600160a01b0381166115dc5760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b60648201526084016107c0565b6113ab816118fd565b6040516001600160a01b03808516602483015283166044820152606481018290526116509085906323b872dd60e01b906084015b60408051601f198184030181529190526020810180516001600160e01b03166001600160e01b031990931692909217909152611ec5565b50505050565b600054610100900460ff1661167d5760405162461bcd60e51b81526004016107c0906128a0565b610b62611f97565b600054610100900460ff166116ac5760405162461bcd60e51b81526004016107c0906128a0565b610b62611fc7565b600054610100900460ff16610b625760405162461bcd60e51b81526004016107c0906128a0565b60c960009054906101000a90046001600160a01b03166001600160a01b031663a21a23e46040518163ffffffff1660e01b81526004016020604051808303816000875af1158015611730573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061175491906128eb565b60c980546001600160401b03928316600160a01b90810267ffffffffffffffff60a01b198316811793849055604051631cd0704360e21b81526001600160a01b03918216919093161793637341c10c936117b793929004169030906004016127b2565b600060405180830381600087803b1580156117d157600080fd5b505af1158015611650573d6000803e3d6000fd5b60005b81518110156118485760df8282600185516118039190612833565b61180d9190612833565b8151811061181d5761181d6127f3565b60209081029190910181015182546001818101855560009485529290932090920191909155016117e8565b506114e861194f565b6033546001600160a01b03163314610b625760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657260448201526064016107c0565b6118b3611ffa565b6065805460ff191690557f5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa335b6040516001600160a01b03909116815260200160405180910390a1565b603380546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b60df8054600091829161196490600190612833565b81548110611974576119746127f3565b9060005260206000200154905060df80548061199257611992612914565b6001900381819060005260206000200160009055905560005b60d2546119b8908361292a565b600081815260de602052604090205490915060ff1615611a3b5760df546119e25760009250505090565b60df80546119f290600190612833565b81548110611a0257611a026127f3565b9060005260206000200154915060df805480611a2057611a20612914565b600190038181906000526020600020016000905590556119ab565b6000611a45611247565b90506000806001611a54611117565b611a5e9190612833565b905060008060005b6002611a728587612781565b611a7c919061281f565b9250858381518110611a9057611a906127f3565b602002602001015191508660dd6000846001600160a01b03166001600160a01b031681526020019081526020016000206000015411158015611aed57506001600160a01b038216600090815260dd60205260409020600101548711155b15611af9575080611b3d565b6001600160a01b038216600090815260dd6020526040902054871015611b2b57611b24600184612833565b9350611a66565b611b36836001612781565b9450611a66565b600060cb60d05481548110611b5457611b546127f3565b600091825260208083209091015460ca546040805193840181529383529251635c46a7ef60e11b81529093506001600160a01b039092169163b88d4fde91611ba59130918791879190600401612863565b600060405180830381600087803b158015611bbf57600080fd5b505af1158015611bd3573d6000803e3d6000fd5b505050600089815260de602090815260408083208054600160ff19909116811790915581516060810183528d81526001600160a01b0388811694820194855292810187815260d180549384018155865290517f695fb3134ad82c3b8022bc5464edd0bcc9424ef672b52245dcb6ab2374327ce360039093029283015592517f695fb3134ad82c3b8022bc5464edd0bcc9424ef672b52245dcb6ab2374327ce4820180546001600160a01b031916919093161790915590517f695fb3134ad82c3b8022bc5464edd0bcc9424ef672b52245dcb6ab2374327ce59091015560d08054909250611cbf9061293e565b9091555060408051898152602081018390526001600160a01b0384169133917fef61d5e7c73a0488ebba4ce7e2cc6cab14e1c52e49e75a2dd6d2c242770db768910160405180910390a36001995050505050505050505090565b60c9546040516305d3b1d360e41b81527f79d3d8832d904592c0bf9818b621522c988bb8b0c05cdc3b15aea1b6e8db0c156004820152600160a01b82046001600160401b0316602482015260036044820152622625a0606482015263ffffffff831660848201526000916001600160a01b031690635d3b1d309060a4016020604051808303816000875af1158015611db5573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611dd9919061284a565b92915050565b611de7611e42565b6065805460ff191660011790557f62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a2586118e03390565b6000611e31836001600160a01b038416612043565b9392505050565b6000611dd9825490565b60655460ff1615610b625760405162461bcd60e51b815260206004820152601060248201526f14185d5cd8589b194e881c185d5cd95960821b60448201526064016107c0565b60606000611e3183612092565b6040516001600160a01b0383166024820152604481018290526114e890849063a9059cbb60e01b90606401611619565b6000611f1a826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b03166120ee9092919063ffffffff16565b8051909150156114e85780806020019051810190611f389190612728565b6114e85760405162461bcd60e51b815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e6044820152691bdd081cdd58d8d9595960b21b60648201526084016107c0565b600054610100900460ff16611fbe5760405162461bcd60e51b81526004016107c0906128a0565b610b62336118fd565b600054610100900460ff16611fee5760405162461bcd60e51b81526004016107c0906128a0565b6065805460ff19169055565b60655460ff16610b625760405162461bcd60e51b815260206004820152601460248201527314185d5cd8589b194e881b9bdd081c185d5cd95960621b60448201526064016107c0565b600081815260018301602052604081205461208a57508154600181810184556000848152602080822090930184905584548482528286019093526040902091909155611dd9565b506000611dd9565b6060816000018054806020026020016040519081016040528092919081815260200182805480156120e257602002820191906000526020600020905b8154815260200190600101908083116120ce575b50505050509050919050565b60606109b9848460008585600080866001600160a01b031685876040516121159190612959565b60006040518083038185875af1925050503d8060008114612152576040519150601f19603f3d011682016040523d82523d6000602084013e612157565b606091505b509150915061216887838387612173565b979650505050505050565b606083156121df5782516121d8576001600160a01b0385163b6121d85760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e747261637400000060448201526064016107c0565b50816109b9565b6109b983838151156121f45781518083602001fd5b8060405162461bcd60e51b81526004016107c09190612975565b60006020828403121561222057600080fd5b5035919050565b80356001600160a01b038116811461223e57600080fd5b919050565b600080600080600060a0868803121561225b57600080fd5b61226486612227565b9450602086013593506040860135925061228060608701612227565b915061228e60808701612227565b90509295509295909350565b6000602082840312156122ac57600080fd5b611e3182612227565b634e487b7160e01b600052604160045260246000fd5b604051601f8201601f191681016001600160401b03811182821017156122f3576122f36122b5565b604052919050565b6000806000806080858703121561231157600080fd5b61231a85612227565b93506020612329818701612227565b93506040860135925060608601356001600160401b038082111561234c57600080fd5b818801915088601f83011261236057600080fd5b813581811115612372576123726122b5565b612384601f8201601f191685016122cb565b9150808252898482850101111561239a57600080fd5b808484018584013760008482840101525080935050505092959194509250565b600082601f8301126123cb57600080fd5b813560206001600160401b038211156123e6576123e66122b5565b8160051b6123f58282016122cb565b928352848101820192828101908785111561240f57600080fd5b83870192505b8483101561216857823582529183019190830190612415565b6000806040838503121561244157600080fd5b8235915060208301356001600160401b0381111561245e57600080fd5b61246a858286016123ba565b9150509250929050565b600081518084526020808501945080840160005b838110156124a457815187529582019590820190600101612488565b509495945050505050565b602081526000611e316020830184612474565b60008083601f8401126124d457600080fd5b5081356001600160401b038111156124eb57600080fd5b6020830191508360208260051b850101111561250657600080fd5b9250929050565b6000806000806040858703121561252357600080fd5b84356001600160401b038082111561253a57600080fd5b612546888389016124c2565b9096509450602087013591508082111561255f57600080fd5b5061256c878288016124c2565b95989497509550505050565b6020808252825182820181905260009190848201906040850190845b818110156125b95783516001600160a01b031683529284019291840191600101612594565b50909695505050505050565b80151581146113ab57600080fd5b600080604083850312156125e657600080fd5b6125ef83612227565b915060208301356125ff816125c5565b809150509250929050565b60006020828403121561261c57600080fd5b81356001600160401b0381111561263257600080fd5b6109b9848285016123ba565b602080825282518282018190526000919060409081850190868401855b8281101561269357815180518552868101516001600160a01b031687860152850151858501526060909301929085019060010161265b565b5091979650505050505050565b60005b838110156126bb5781810151838201526020016126a3565b838111156116505750506000910152565b600081518084526126e48160208601602086016126a0565b601f01601f19169290920160200192915050565b60018060a01b038416815282602082015260606040820152600061271f60608301846126cc565b95945050505050565b60006020828403121561273a57600080fd5b8151611e31816125c5565b6020808252600c908201526b5a65726f206164647265737360a01b604082015260600190565b634e487b7160e01b600052601160045260246000fd5b600082198211156127945761279461276b565b500190565b8281526040602082015260006109b96040830184612474565b6001600160401b039290921682526001600160a01b0316602082015260400190565b60008160001904831182151516156127ee576127ee61276b565b500290565b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052601260045260246000fd5b60008261282e5761282e612809565b500490565b6000828210156128455761284561276b565b500390565b60006020828403121561285c57600080fd5b5051919050565b6001600160a01b0385811682528416602082015260408101839052608060608201819052600090612896908301846126cc565b9695505050505050565b6020808252602b908201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960408201526a6e697469616c697a696e6760a81b606082015260800190565b6000602082840312156128fd57600080fd5b81516001600160401b0381168114611e3157600080fd5b634e487b7160e01b600052603160045260246000fd5b60008261293957612939612809565b500690565b60006000198214156129525761295261276b565b5060010190565b6000825161296b8184602087016126a0565b9190910192915050565b602081526000611e3160208301846126cc56fea264697066735822122062244fc3cf5fb27265a1d5fd13b5a223288bc5155d9514a46774be15792532c664736f6c634300080b0033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "constructor": {
        "custom:oz-upgrades-unsafe-allow": "constructor"
      },
      "onERC721Received(address,address,uint256,bytes)": {
        "details": "See {IERC721Receiver-onERC721Received}. Always returns `IERC721Receiver.onERC721Received.selector`."
      },
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "paused()": {
        "details": "Returns true if the contract is paused, and false otherwise."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    },
    "stateVariables": {
      "NFTL_AMOUNT_FOR_TICKET": {
        "details": "NFTL amount required for 1 ticket"
      },
      "_ticketIdList": {
        "details": "TokenId list"
      },
      "_ticketIdsByUser": {
        "details": "User -> Ticket Id list"
      },
      "_userList": {
        "details": "User list"
      },
      "currentWinnerTicketCount": {
        "details": "Current selected winner count"
      },
      "isTicketAssignedToUsers": {
        "details": "Ticket assign status"
      },
      "isUserDepositAllowed": {
        "details": "Swith to on/off the deposit"
      },
      "isWinnerTicketId": {
        "details": "Winner Ticket Id -> Bool"
      },
      "nftl": {
        "details": "NFTL address"
      },
      "prizeNFT": {
        "details": "Prize NFT (NiftyDegen) address"
      },
      "prizeNFTokenIds": {
        "details": "PrizeNFT TokenIds"
      },
      "raffleStartAt": {
        "details": "Timestamp the raffle start"
      },
      "randomWordList": {
        "details": "Random word list"
      },
      "ticketCountByUser": {
        "details": "User -> Ticket count"
      },
      "ticketIdList": {
        "details": "Ticket list"
      },
      "ticketRangeByUser": {
        "details": "User -> Ticket range"
      },
      "totalTicketCount": {
        "details": "Total ticket count"
      },
      "totalWinnerTicketCount": {
        "details": "Total winner count to select"
      },
      "userByTicketId": {
        "details": "Ticket Id -> User"
      },
      "userDeposits": {
        "details": "User -> NFTL amount deposited"
      },
      "vrfCoordinator": {
        "details": "Chainlink VRF params"
      },
      "winners": {
        "details": "Winner list"
      }
    },
    "title": "NFTLRaffle",
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "pause()": {
        "notice": "Pause the contract"
      },
      "unpause()": {
        "notice": "Unpause the contract"
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 1733,
        "contract": "contracts/NFTLRaffle.sol:NFTLRaffle",
        "label": "_initialized",
        "offset": 0,
        "slot": "0",
        "type": "t_uint8"
      },
      {
        "astId": 1736,
        "contract": "contracts/NFTLRaffle.sol:NFTLRaffle",
        "label": "_initializing",
        "offset": 1,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 4520,
        "contract": "contracts/NFTLRaffle.sol:NFTLRaffle",
        "label": "__gap",
        "offset": 0,
        "slot": "1",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 1605,
        "contract": "contracts/NFTLRaffle.sol:NFTLRaffle",
        "label": "_owner",
        "offset": 0,
        "slot": "51",
        "type": "t_address"
      },
      {
        "astId": 1725,
        "contract": "contracts/NFTLRaffle.sol:NFTLRaffle",
        "label": "__gap",
        "offset": 0,
        "slot": "52",
        "type": "t_array(t_uint256)49_storage"
      },
      {
        "astId": 1916,
        "contract": "contracts/NFTLRaffle.sol:NFTLRaffle",
        "label": "_paused",
        "offset": 0,
        "slot": "101",
        "type": "t_bool"
      },
      {
        "astId": 2021,
        "contract": "contracts/NFTLRaffle.sol:NFTLRaffle",
        "label": "__gap",
        "offset": 0,
        "slot": "102",
        "type": "t_array(t_uint256)49_storage"
      },
      {
        "astId": 4194,
        "contract": "contracts/NFTLRaffle.sol:NFTLRaffle",
        "label": "__gap",
        "offset": 0,
        "slot": "151",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 15353,
        "contract": "contracts/NFTLRaffle.sol:NFTLRaffle",
        "label": "vrfCoordinator",
        "offset": 0,
        "slot": "201",
        "type": "t_address"
      },
      {
        "astId": 15367,
        "contract": "contracts/NFTLRaffle.sol:NFTLRaffle",
        "label": "s_subscriptionId",
        "offset": 20,
        "slot": "201",
        "type": "t_uint64"
      },
      {
        "astId": 15371,
        "contract": "contracts/NFTLRaffle.sol:NFTLRaffle",
        "label": "prizeNFT",
        "offset": 0,
        "slot": "202",
        "type": "t_contract(IERC721Upgradeable)3716"
      },
      {
        "astId": 15375,
        "contract": "contracts/NFTLRaffle.sol:NFTLRaffle",
        "label": "prizeNFTokenIds",
        "offset": 0,
        "slot": "203",
        "type": "t_array(t_uint256)dyn_storage"
      },
      {
        "astId": 15379,
        "contract": "contracts/NFTLRaffle.sol:NFTLRaffle",
        "label": "nftl",
        "offset": 0,
        "slot": "204",
        "type": "t_contract(IERC20BurnableUpgradeable)15317"
      },
      {
        "astId": 15382,
        "contract": "contracts/NFTLRaffle.sol:NFTLRaffle",
        "label": "raffleStartAt",
        "offset": 0,
        "slot": "205",
        "type": "t_uint256"
      },
      {
        "astId": 15386,
        "contract": "contracts/NFTLRaffle.sol:NFTLRaffle",
        "label": "prizeNFTTokenIndex",
        "offset": 0,
        "slot": "206",
        "type": "t_mapping(t_uint256,t_uint256)"
      },
      {
        "astId": 15389,
        "contract": "contracts/NFTLRaffle.sol:NFTLRaffle",
        "label": "totalWinnerTicketCount",
        "offset": 0,
        "slot": "207",
        "type": "t_uint256"
      },
      {
        "astId": 15392,
        "contract": "contracts/NFTLRaffle.sol:NFTLRaffle",
        "label": "currentWinnerTicketCount",
        "offset": 0,
        "slot": "208",
        "type": "t_uint256"
      },
      {
        "astId": 15397,
        "contract": "contracts/NFTLRaffle.sol:NFTLRaffle",
        "label": "winners",
        "offset": 0,
        "slot": "209",
        "type": "t_array(t_struct(WinnerInfo)15345_storage)dyn_storage"
      },
      {
        "astId": 15400,
        "contract": "contracts/NFTLRaffle.sol:NFTLRaffle",
        "label": "totalTicketCount",
        "offset": 0,
        "slot": "210",
        "type": "t_uint256"
      },
      {
        "astId": 15412,
        "contract": "contracts/NFTLRaffle.sol:NFTLRaffle",
        "label": "_userList",
        "offset": 0,
        "slot": "211",
        "type": "t_struct(AddressSet)6304_storage"
      },
      {
        "astId": 15416,
        "contract": "contracts/NFTLRaffle.sol:NFTLRaffle",
        "label": "_ticketIdList",
        "offset": 0,
        "slot": "213",
        "type": "t_struct(UintSet)6461_storage"
      },
      {
        "astId": 15421,
        "contract": "contracts/NFTLRaffle.sol:NFTLRaffle",
        "label": "userDeposits",
        "offset": 0,
        "slot": "215",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 15427,
        "contract": "contracts/NFTLRaffle.sol:NFTLRaffle",
        "label": "_ticketIdsByUser",
        "offset": 0,
        "slot": "216",
        "type": "t_mapping(t_address,t_struct(UintSet)6461_storage)"
      },
      {
        "astId": 15432,
        "contract": "contracts/NFTLRaffle.sol:NFTLRaffle",
        "label": "userByTicketId",
        "offset": 0,
        "slot": "217",
        "type": "t_mapping(t_uint256,t_address)"
      },
      {
        "astId": 15436,
        "contract": "contracts/NFTLRaffle.sol:NFTLRaffle",
        "label": "ticketIdList",
        "offset": 0,
        "slot": "218",
        "type": "t_array(t_uint256)dyn_storage"
      },
      {
        "astId": 15441,
        "contract": "contracts/NFTLRaffle.sol:NFTLRaffle",
        "label": "ticketCountByUser",
        "offset": 0,
        "slot": "219",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 15444,
        "contract": "contracts/NFTLRaffle.sol:NFTLRaffle",
        "label": "isUserDepositAllowed",
        "offset": 0,
        "slot": "220",
        "type": "t_bool"
      },
      {
        "astId": 15447,
        "contract": "contracts/NFTLRaffle.sol:NFTLRaffle",
        "label": "isTicketAssignedToUsers",
        "offset": 1,
        "slot": "220",
        "type": "t_bool"
      },
      {
        "astId": 15453,
        "contract": "contracts/NFTLRaffle.sol:NFTLRaffle",
        "label": "ticketRangeByUser",
        "offset": 0,
        "slot": "221",
        "type": "t_mapping(t_address,t_struct(TicketRange)15350_storage)"
      },
      {
        "astId": 15458,
        "contract": "contracts/NFTLRaffle.sol:NFTLRaffle",
        "label": "isWinnerTicketId",
        "offset": 0,
        "slot": "222",
        "type": "t_mapping(t_uint256,t_bool)"
      },
      {
        "astId": 15462,
        "contract": "contracts/NFTLRaffle.sol:NFTLRaffle",
        "label": "randomWordList",
        "offset": 0,
        "slot": "223",
        "type": "t_array(t_uint256)dyn_storage"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_bytes32)dyn_storage": {
        "base": "t_bytes32",
        "encoding": "dynamic_array",
        "label": "bytes32[]",
        "numberOfBytes": "32"
      },
      "t_array(t_struct(WinnerInfo)15345_storage)dyn_storage": {
        "base": "t_struct(WinnerInfo)15345_storage",
        "encoding": "dynamic_array",
        "label": "struct NFTLRaffle.WinnerInfo[]",
        "numberOfBytes": "32"
      },
      "t_array(t_uint256)49_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[49]",
        "numberOfBytes": "1568"
      },
      "t_array(t_uint256)50_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[50]",
        "numberOfBytes": "1600"
      },
      "t_array(t_uint256)dyn_storage": {
        "base": "t_uint256",
        "encoding": "dynamic_array",
        "label": "uint256[]",
        "numberOfBytes": "32"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_contract(IERC20BurnableUpgradeable)15317": {
        "encoding": "inplace",
        "label": "contract IERC20BurnableUpgradeable",
        "numberOfBytes": "20"
      },
      "t_contract(IERC721Upgradeable)3716": {
        "encoding": "inplace",
        "label": "contract IERC721Upgradeable",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_struct(TicketRange)15350_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => struct NFTLRaffle.TicketRange)",
        "numberOfBytes": "32",
        "value": "t_struct(TicketRange)15350_storage"
      },
      "t_mapping(t_address,t_struct(UintSet)6461_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => struct EnumerableSetUpgradeable.UintSet)",
        "numberOfBytes": "32",
        "value": "t_struct(UintSet)6461_storage"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_bytes32,t_uint256)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_uint256,t_address)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => address)",
        "numberOfBytes": "32",
        "value": "t_address"
      },
      "t_mapping(t_uint256,t_bool)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_uint256,t_uint256)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_struct(AddressSet)6304_storage": {
        "encoding": "inplace",
        "label": "struct EnumerableSetUpgradeable.AddressSet",
        "members": [
          {
            "astId": 6303,
            "contract": "contracts/NFTLRaffle.sol:NFTLRaffle",
            "label": "_inner",
            "offset": 0,
            "slot": "0",
            "type": "t_struct(Set)5989_storage"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_struct(Set)5989_storage": {
        "encoding": "inplace",
        "label": "struct EnumerableSetUpgradeable.Set",
        "members": [
          {
            "astId": 5984,
            "contract": "contracts/NFTLRaffle.sol:NFTLRaffle",
            "label": "_values",
            "offset": 0,
            "slot": "0",
            "type": "t_array(t_bytes32)dyn_storage"
          },
          {
            "astId": 5988,
            "contract": "contracts/NFTLRaffle.sol:NFTLRaffle",
            "label": "_indexes",
            "offset": 0,
            "slot": "1",
            "type": "t_mapping(t_bytes32,t_uint256)"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_struct(TicketRange)15350_storage": {
        "encoding": "inplace",
        "label": "struct NFTLRaffle.TicketRange",
        "members": [
          {
            "astId": 15347,
            "contract": "contracts/NFTLRaffle.sol:NFTLRaffle",
            "label": "startTicketId",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 15349,
            "contract": "contracts/NFTLRaffle.sol:NFTLRaffle",
            "label": "endTicketId",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_struct(UintSet)6461_storage": {
        "encoding": "inplace",
        "label": "struct EnumerableSetUpgradeable.UintSet",
        "members": [
          {
            "astId": 6460,
            "contract": "contracts/NFTLRaffle.sol:NFTLRaffle",
            "label": "_inner",
            "offset": 0,
            "slot": "0",
            "type": "t_struct(Set)5989_storage"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_struct(WinnerInfo)15345_storage": {
        "encoding": "inplace",
        "label": "struct NFTLRaffle.WinnerInfo",
        "members": [
          {
            "astId": 15340,
            "contract": "contracts/NFTLRaffle.sol:NFTLRaffle",
            "label": "ticketId",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 15342,
            "contract": "contracts/NFTLRaffle.sol:NFTLRaffle",
            "label": "winner",
            "offset": 0,
            "slot": "1",
            "type": "t_address"
          },
          {
            "astId": 15344,
            "contract": "contracts/NFTLRaffle.sol:NFTLRaffle",
            "label": "prizeTokenId",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "96"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint64": {
        "encoding": "inplace",
        "label": "uint64",
        "numberOfBytes": "8"
      },
      "t_uint8": {
        "encoding": "inplace",
        "label": "uint8",
        "numberOfBytes": "1"
      }
    }
  }
}
