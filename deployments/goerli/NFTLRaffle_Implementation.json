{
  "address": "0xacb1C5FF50A3DEB4f7A600C655cd23a8EbBCf56B",
  "abi": [
    {
      "inputs": [],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint8",
          "name": "version",
          "type": "uint8"
        }
      ],
      "name": "Initialized",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "Paused",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256[]",
          "name": "randomWords",
          "type": "uint256[]"
        }
      ],
      "name": "RandomWordsReceived",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "requestId",
          "type": "uint256"
        }
      ],
      "name": "RandomWordsRequested",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "startTicketId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "endTicketId",
          "type": "uint256"
        }
      ],
      "name": "TicketDistributed",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "Unpaused",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "nftlAmount",
          "type": "uint256"
        }
      ],
      "name": "UserDeposited",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "by",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "winner",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "ticketId",
          "type": "uint256"
        }
      ],
      "name": "WinnerSelected",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "NFTL_AMOUNT_FOR_TICKET",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "cancelSubscription",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "chargeLINK",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "deposit",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "_holders",
          "type": "address[]"
        },
        {
          "internalType": "uint256[]",
          "name": "_keyCount",
          "type": "uint256[]"
        }
      ],
      "name": "distributeTicketsToCitadelKeyHolders",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_user",
          "type": "address"
        }
      ],
      "name": "getTicketCountByUser",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_user",
          "type": "address"
        }
      ],
      "name": "getTicketIdsByUser",
      "outputs": [
        {
          "internalType": "uint256[]",
          "name": "",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getUserCount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getUserList",
      "outputs": [
        {
          "internalType": "address[]",
          "name": "",
          "type": "address[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getWinners",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "ticketId",
              "type": "uint256"
            },
            {
              "internalType": "address",
              "name": "winner",
              "type": "address"
            }
          ],
          "internalType": "struct NFTLRaffle.WinnerInfo[]",
          "name": "",
          "type": "tuple[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_nftl",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_pendingPeriod",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_totalWinnerTicketCount",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "_vrfCoordinator",
          "type": "address"
        }
      ],
      "name": "initialize",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_consumer",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "_add",
          "type": "bool"
        }
      ],
      "name": "manageConsumers",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "nftl",
      "outputs": [
        {
          "internalType": "contract IERC20BurnableUpgradeable",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "pause",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "paused",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "raffleStartAt",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_requestId",
          "type": "uint256"
        },
        {
          "internalType": "uint256[]",
          "name": "_randomWords",
          "type": "uint256[]"
        }
      ],
      "name": "rawFulfillRandomWords",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "requestRandomWordsForWinnerSelection",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "requestId",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "s_subscriptionId",
      "outputs": [
        {
          "internalType": "uint64",
          "name": "",
          "type": "uint64"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalTicketCount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalWinnerTicketCount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "unpause",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_raffleStartAt",
          "type": "uint256"
        }
      ],
      "name": "updateRaffleStartAt",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_totalWinnerTicketCount",
          "type": "uint256"
        }
      ],
      "name": "updateTotalWinnerTicketCount",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "userByTicketId",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "userDeposits",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "winners",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "ticketId",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "winner",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0x365894e570e5da41facb8d75234ea2d4dfa39ec4a9334e5412936ef5c2c1ea30",
  "receipt": {
    "to": null,
    "from": "0x6C287e19065661Ca590A11CF0b419d1434991B67",
    "contractAddress": "0xacb1C5FF50A3DEB4f7A600C655cd23a8EbBCf56B",
    "transactionIndex": 46,
    "gasUsed": "1953575",
    "logsBloom": "0x
    "blockHash": "0x7526f74225b89fe3985cdf3e4e34adb4f041a7d8f44ed46ad8d1614fa2caa71c",
    "transactionHash": "0x365894e570e5da41facb8d75234ea2d4dfa39ec4a9334e5412936ef5c2c1ea30",
    "logs": [
      {
        "transactionIndex": 46,
        "blockNumber": 8604187,
        "transactionHash": "0x365894e570e5da41facb8d75234ea2d4dfa39ec4a9334e5412936ef5c2c1ea30",
        "address": "0xacb1C5FF50A3DEB4f7A600C655cd23a8EbBCf56B",
        "topics": ["0x7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb3847402498"],
        "data": "0x00000000000000000000000000000000000000000000000000000000000000ff",
        "logIndex": 143,
        "blockHash": "0x7526f74225b89fe3985cdf3e4e34adb4f041a7d8f44ed46ad8d1614fa2caa71c"
      }
    ],
    "blockNumber": 8604187,
    "cumulativeGasUsed": "15899752",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 3,
  "solcInputHash": "23abc1fd9d45d68ac1216ee654cb2618",
  "metadata": "{\"compiler\":{\"version\":\"0.8.11+commit.d7f03943\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"version\",\"type\":\"uint8\"}],\"name\":\"Initialized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Paused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"randomWords\",\"type\":\"uint256[]\"}],\"name\":\"RandomWordsReceived\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"requestId\",\"type\":\"uint256\"}],\"name\":\"RandomWordsRequested\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"startTicketId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"endTicketId\",\"type\":\"uint256\"}],\"name\":\"TicketDistributed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Unpaused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"nftlAmount\",\"type\":\"uint256\"}],\"name\":\"UserDeposited\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"by\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"winner\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"ticketId\",\"type\":\"uint256\"}],\"name\":\"WinnerSelected\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"NFTL_AMOUNT_FOR_TICKET\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"cancelSubscription\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"chargeLINK\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"deposit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_holders\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_keyCount\",\"type\":\"uint256[]\"}],\"name\":\"distributeTicketsToCitadelKeyHolders\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"getTicketCountByUser\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"getTicketIdsByUser\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getUserCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getUserList\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getWinners\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"ticketId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"winner\",\"type\":\"address\"}],\"internalType\":\"struct NFTLRaffle.WinnerInfo[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_nftl\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_pendingPeriod\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_totalWinnerTicketCount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_vrfCoordinator\",\"type\":\"address\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_consumer\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"_add\",\"type\":\"bool\"}],\"name\":\"manageConsumers\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"nftl\",\"outputs\":[{\"internalType\":\"contract IERC20BurnableUpgradeable\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"raffleStartAt\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_requestId\",\"type\":\"uint256\"},{\"internalType\":\"uint256[]\",\"name\":\"_randomWords\",\"type\":\"uint256[]\"}],\"name\":\"rawFulfillRandomWords\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"requestRandomWordsForWinnerSelection\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"requestId\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"s_subscriptionId\",\"outputs\":[{\"internalType\":\"uint64\",\"name\":\"\",\"type\":\"uint64\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalTicketCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalWinnerTicketCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"unpause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_raffleStartAt\",\"type\":\"uint256\"}],\"name\":\"updateRaffleStartAt\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_totalWinnerTicketCount\",\"type\":\"uint256\"}],\"name\":\"updateTotalWinnerTicketCount\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"userByTicketId\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"userDeposits\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"winners\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"ticketId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"winner\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"constructor\":{\"custom:oz-upgrades-unsafe-allow\":\"constructor\"},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"paused()\":{\"details\":\"Returns true if the contract is paused, and false otherwise.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"stateVariables\":{\"NFTL_AMOUNT_FOR_TICKET\":{\"details\":\"NFTL amount required for 1 ticket\"},\"_ticketIdList\":{\"details\":\"TokenId list\"},\"_ticketIdsByUser\":{\"details\":\"User -> Ticket Id list\"},\"_userList\":{\"details\":\"User list\"},\"nftl\":{\"details\":\"NFTL address\"},\"raffleStartAt\":{\"details\":\"Timestamp the raffle start\"},\"totalTicketCount\":{\"details\":\"Total ticket count\"},\"totalWinnerTicketCount\":{\"details\":\"Winner count\"},\"userByTicketId\":{\"details\":\"Ticket Id -> User\"},\"userDeposits\":{\"details\":\"User -> NFTL amount deposited\"},\"vrfCoordinator\":{\"details\":\"Chainlink VRF params\"},\"winners\":{\"details\":\"Winner list\"}},\"title\":\"NFTLRaffle\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"pause()\":{\"notice\":\"Pause the contract\"},\"unpause()\":{\"notice\":\"Unpause the contract\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/NFTLRaffle.sol\":\"NFTLRaffle\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@chainlink/contracts/src/v0.8/interfaces/LinkTokenInterface.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface LinkTokenInterface {\\n  function allowance(address owner, address spender) external view returns (uint256 remaining);\\n\\n  function approve(address spender, uint256 value) external returns (bool success);\\n\\n  function balanceOf(address owner) external view returns (uint256 balance);\\n\\n  function decimals() external view returns (uint8 decimalPlaces);\\n\\n  function decreaseApproval(address spender, uint256 addedValue) external returns (bool success);\\n\\n  function increaseApproval(address spender, uint256 subtractedValue) external;\\n\\n  function name() external view returns (string memory tokenName);\\n\\n  function symbol() external view returns (string memory tokenSymbol);\\n\\n  function totalSupply() external view returns (uint256 totalTokensIssued);\\n\\n  function transfer(address to, uint256 value) external returns (bool success);\\n\\n  function transferAndCall(\\n    address to,\\n    uint256 value,\\n    bytes calldata data\\n  ) external returns (bool success);\\n\\n  function transferFrom(\\n    address from,\\n    address to,\\n    uint256 value\\n  ) external returns (bool success);\\n}\\n\",\"keccak256\":\"0xc7d7cd730d36825485ef4107d93c3ff18b9f3a5a00ea3d5988ba9a0bd70b10c5\",\"license\":\"MIT\"},\"@chainlink/contracts/src/v0.8/interfaces/VRFCoordinatorV2Interface.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface VRFCoordinatorV2Interface {\\n  /**\\n   * @notice Get configuration relevant for making requests\\n   * @return minimumRequestConfirmations global min for request confirmations\\n   * @return maxGasLimit global max for request gas limit\\n   * @return s_provingKeyHashes list of registered key hashes\\n   */\\n  function getRequestConfig()\\n    external\\n    view\\n    returns (\\n      uint16,\\n      uint32,\\n      bytes32[] memory\\n    );\\n\\n  /**\\n   * @notice Request a set of random words.\\n   * @param keyHash - Corresponds to a particular oracle job which uses\\n   * that key for generating the VRF proof. Different keyHash's have different gas price\\n   * ceilings, so you can select a specific one to bound your maximum per request cost.\\n   * @param subId  - The ID of the VRF subscription. Must be funded\\n   * with the minimum subscription balance required for the selected keyHash.\\n   * @param minimumRequestConfirmations - How many blocks you'd like the\\n   * oracle to wait before responding to the request. See SECURITY CONSIDERATIONS\\n   * for why you may want to request more. The acceptable range is\\n   * [minimumRequestBlockConfirmations, 200].\\n   * @param callbackGasLimit - How much gas you'd like to receive in your\\n   * fulfillRandomWords callback. Note that gasleft() inside fulfillRandomWords\\n   * may be slightly less than this amount because of gas used calling the function\\n   * (argument decoding etc.), so you may need to request slightly more than you expect\\n   * to have inside fulfillRandomWords. The acceptable range is\\n   * [0, maxGasLimit]\\n   * @param numWords - The number of uint256 random values you'd like to receive\\n   * in your fulfillRandomWords callback. Note these numbers are expanded in a\\n   * secure way by the VRFCoordinator from a single random value supplied by the oracle.\\n   * @return requestId - A unique identifier of the request. Can be used to match\\n   * a request to a response in fulfillRandomWords.\\n   */\\n  function requestRandomWords(\\n    bytes32 keyHash,\\n    uint64 subId,\\n    uint16 minimumRequestConfirmations,\\n    uint32 callbackGasLimit,\\n    uint32 numWords\\n  ) external returns (uint256 requestId);\\n\\n  /**\\n   * @notice Create a VRF subscription.\\n   * @return subId - A unique subscription id.\\n   * @dev You can manage the consumer set dynamically with addConsumer/removeConsumer.\\n   * @dev Note to fund the subscription, use transferAndCall. For example\\n   * @dev  LINKTOKEN.transferAndCall(\\n   * @dev    address(COORDINATOR),\\n   * @dev    amount,\\n   * @dev    abi.encode(subId));\\n   */\\n  function createSubscription() external returns (uint64 subId);\\n\\n  /**\\n   * @notice Get a VRF subscription.\\n   * @param subId - ID of the subscription\\n   * @return balance - LINK balance of the subscription in juels.\\n   * @return reqCount - number of requests for this subscription, determines fee tier.\\n   * @return owner - owner of the subscription.\\n   * @return consumers - list of consumer address which are able to use this subscription.\\n   */\\n  function getSubscription(uint64 subId)\\n    external\\n    view\\n    returns (\\n      uint96 balance,\\n      uint64 reqCount,\\n      address owner,\\n      address[] memory consumers\\n    );\\n\\n  /**\\n   * @notice Request subscription owner transfer.\\n   * @param subId - ID of the subscription\\n   * @param newOwner - proposed new owner of the subscription\\n   */\\n  function requestSubscriptionOwnerTransfer(uint64 subId, address newOwner) external;\\n\\n  /**\\n   * @notice Request subscription owner transfer.\\n   * @param subId - ID of the subscription\\n   * @dev will revert if original owner of subId has\\n   * not requested that msg.sender become the new owner.\\n   */\\n  function acceptSubscriptionOwnerTransfer(uint64 subId) external;\\n\\n  /**\\n   * @notice Add a consumer to a VRF subscription.\\n   * @param subId - ID of the subscription\\n   * @param consumer - New consumer which can use the subscription\\n   */\\n  function addConsumer(uint64 subId, address consumer) external;\\n\\n  /**\\n   * @notice Remove a consumer from a VRF subscription.\\n   * @param subId - ID of the subscription\\n   * @param consumer - Consumer to remove from the subscription\\n   */\\n  function removeConsumer(uint64 subId, address consumer) external;\\n\\n  /**\\n   * @notice Cancel a subscription\\n   * @param subId - ID of the subscription\\n   * @param to - Where to send the remaining LINK to\\n   */\\n  function cancelSubscription(uint64 subId, address to) external;\\n\\n  /*\\n   * @notice Check to see if there exists a request commitment consumers\\n   * for all consumers and keyhashes for a given sub.\\n   * @param subId - ID of the subscription\\n   * @return true if there exists at least one unfulfilled request for the subscription, false\\n   * otherwise.\\n   */\\n  function pendingRequestExists(uint64 subId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x54cdc97717cbae1a51a5500c8ee4875ebf056c95b54d2155a9544a79cb4f4494\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract OwnableUpgradeable is Initializable, ContextUpgradeable {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    function __Ownable_init() internal onlyInitializing {\\n        __Ownable_init_unchained();\\n    }\\n\\n    function __Ownable_init_unchained() internal onlyInitializing {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0x247c62047745915c0af6b955470a72d1696ebad4352d7d3011aef1a2463cd888\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.1) (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.2;\\n\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\\n * reused. This mechanism prevents re-execution of each \\\"step\\\" but allows the creation of new initialization steps in\\n * case an upgrade adds a module that needs to be initialized.\\n *\\n * For example:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * contract MyToken is ERC20Upgradeable {\\n *     function initialize() initializer public {\\n *         __ERC20_init(\\\"MyToken\\\", \\\"MTK\\\");\\n *     }\\n * }\\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\\n *     function initializeV2() reinitializer(2) public {\\n *         __ERC20Permit_init(\\\"MyToken\\\");\\n *     }\\n * }\\n * ```\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() {\\n *     _disableInitializers();\\n * }\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     * @custom:oz-retyped-from bool\\n     */\\n    uint8 private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Triggered when the contract has been initialized or reinitialized.\\n     */\\n    event Initialized(uint8 version);\\n\\n    /**\\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\\n     * `onlyInitializing` functions can be used to initialize parent contracts.\\n     *\\n     * Similar to `reinitializer(1)`, except that functions marked with `initializer` can be nested in the context of a\\n     * constructor.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier initializer() {\\n        bool isTopLevelCall = !_initializing;\\n        require(\\n            (isTopLevelCall && _initialized < 1) || (!AddressUpgradeable.isContract(address(this)) && _initialized == 1),\\n            \\\"Initializable: contract is already initialized\\\"\\n        );\\n        _initialized = 1;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n        }\\n        _;\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n            emit Initialized(1);\\n        }\\n    }\\n\\n    /**\\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\\n     * used to initialize parent contracts.\\n     *\\n     * A reinitializer may be used after the original initialization step. This is essential to configure modules that\\n     * are added through upgrades and that require initialization.\\n     *\\n     * When `version` is 1, this modifier is similar to `initializer`, except that functions marked with `reinitializer`\\n     * cannot be nested. If one is invoked in the context of another, execution will revert.\\n     *\\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\\n     * a contract, executing them in the right order is up to the developer or operator.\\n     *\\n     * WARNING: setting the version to 255 will prevent any future reinitialization.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier reinitializer(uint8 version) {\\n        require(!_initializing && _initialized < version, \\\"Initializable: contract is already initialized\\\");\\n        _initialized = version;\\n        _initializing = true;\\n        _;\\n        _initializing = false;\\n        emit Initialized(version);\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        require(_initializing, \\\"Initializable: contract is not initializing\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\\n     * through proxies.\\n     *\\n     * Emits an {Initialized} event the first time it is successfully executed.\\n     */\\n    function _disableInitializers() internal virtual {\\n        require(!_initializing, \\\"Initializable: contract is initializing\\\");\\n        if (_initialized < type(uint8).max) {\\n            _initialized = type(uint8).max;\\n            emit Initialized(type(uint8).max);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the highest version that has been initialized. See {reinitializer}.\\n     */\\n    function _getInitializedVersion() internal view returns (uint8) {\\n        return _initialized;\\n    }\\n\\n    /**\\n     * @dev Returns `true` if the contract is currently initializing. See {onlyInitializing}.\\n     */\\n    function _isInitializing() internal view returns (bool) {\\n        return _initializing;\\n    }\\n}\\n\",\"keccak256\":\"0x037c334add4b033ad3493038c25be1682d78c00992e1acb0e2795caff3925271\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (security/Pausable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module which allows children to implement an emergency stop\\n * mechanism that can be triggered by an authorized account.\\n *\\n * This module is used through inheritance. It will make available the\\n * modifiers `whenNotPaused` and `whenPaused`, which can be applied to\\n * the functions of your contract. Note that they will not be pausable by\\n * simply including this module, only once the modifiers are put in place.\\n */\\nabstract contract PausableUpgradeable is Initializable, ContextUpgradeable {\\n    /**\\n     * @dev Emitted when the pause is triggered by `account`.\\n     */\\n    event Paused(address account);\\n\\n    /**\\n     * @dev Emitted when the pause is lifted by `account`.\\n     */\\n    event Unpaused(address account);\\n\\n    bool private _paused;\\n\\n    /**\\n     * @dev Initializes the contract in unpaused state.\\n     */\\n    function __Pausable_init() internal onlyInitializing {\\n        __Pausable_init_unchained();\\n    }\\n\\n    function __Pausable_init_unchained() internal onlyInitializing {\\n        _paused = false;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is not paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    modifier whenNotPaused() {\\n        _requireNotPaused();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    modifier whenPaused() {\\n        _requirePaused();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns true if the contract is paused, and false otherwise.\\n     */\\n    function paused() public view virtual returns (bool) {\\n        return _paused;\\n    }\\n\\n    /**\\n     * @dev Throws if the contract is paused.\\n     */\\n    function _requireNotPaused() internal view virtual {\\n        require(!paused(), \\\"Pausable: paused\\\");\\n    }\\n\\n    /**\\n     * @dev Throws if the contract is not paused.\\n     */\\n    function _requirePaused() internal view virtual {\\n        require(paused(), \\\"Pausable: not paused\\\");\\n    }\\n\\n    /**\\n     * @dev Triggers stopped state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    function _pause() internal virtual whenNotPaused {\\n        _paused = true;\\n        emit Paused(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns to normal state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    function _unpause() internal virtual whenPaused {\\n        _paused = false;\\n        emit Unpaused(_msgSender());\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0x40c636b4572ff5f1dc50cf22097e93c0723ee14eff87e99ac2b02636eeca1250\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20Upgradeable {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n}\\n\",\"keccak256\":\"0x4e733d3164f73f461eaf9d8087a7ad1ea180bdc8ba0d3d61b0e1ae16d8e63dff\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC20/extensions/draft-IERC20PermitUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/draft-IERC20Permit.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\\n *\\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\\n * need to send a transaction, and thus is not required to hold Ether at all.\\n */\\ninterface IERC20PermitUpgradeable {\\n    /**\\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\\n     * given ``owner``'s signed approval.\\n     *\\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\\n     * ordering also apply here.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `deadline` must be a timestamp in the future.\\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\\n     * over the EIP712-formatted function arguments.\\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\\n     *\\n     * For more information on the signature format, see the\\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\\n     * section].\\n     */\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n\\n    /**\\n     * @dev Returns the current nonce for `owner`. This value must be\\n     * included whenever a signature is generated for {permit}.\\n     *\\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\\n     * prevents a signature from being used multiple times.\\n     */\\n    function nonces(address owner) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n}\\n\",\"keccak256\":\"0xcc70d8e2281fb3ff69e8ab242500f10142cd0a7fa8dd9e45882be270d4d09024\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC20/utils/SafeERC20Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20Upgradeable.sol\\\";\\nimport \\\"../extensions/draft-IERC20PermitUpgradeable.sol\\\";\\nimport \\\"../../../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20Upgradeable {\\n    using AddressUpgradeable for address;\\n\\n    function safeTransfer(\\n        IERC20Upgradeable token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(\\n        IERC20Upgradeable token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(\\n        IERC20Upgradeable token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(\\n        IERC20Upgradeable token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(\\n        IERC20Upgradeable token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            uint256 newAllowance = oldAllowance - value;\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n        }\\n    }\\n\\n    function safePermit(\\n        IERC20PermitUpgradeable token,\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal {\\n        uint256 nonceBefore = token.nonces(owner);\\n        token.permit(owner, spender, value, deadline, v, r, s);\\n        uint256 nonceAfter = token.nonces(owner);\\n        require(nonceAfter == nonceBefore + 1, \\\"SafeERC20: permit did not succeed\\\");\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20Upgradeable token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address-functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) {\\n            // Return data is optional\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x220c4a5af915e656be2aaa85ca57505d102418e476b1e2ef6c62e0c6ac143871\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary AddressUpgradeable {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x2edcb41c121abc510932e8d83ff8b82cf9cdde35e7c297622f5c29ef0af25183\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract ContextUpgradeable is Initializable {\\n    function __Context_init() internal onlyInitializing {\\n    }\\n\\n    function __Context_init_unchained() internal onlyInitializing {\\n    }\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0x963ea7f0b48b032eef72fe3a7582edf78408d6f834115b9feadd673a4d5bd149\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/structs/EnumerableSetUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/structs/EnumerableSet.sol)\\n// This file was procedurally generated from scripts/generate/templates/EnumerableSet.js.\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Library for managing\\n * https://en.wikipedia.org/wiki/Set_(abstract_data_type)[sets] of primitive\\n * types.\\n *\\n * Sets have the following properties:\\n *\\n * - Elements are added, removed, and checked for existence in constant time\\n * (O(1)).\\n * - Elements are enumerated in O(n). No guarantees are made on the ordering.\\n *\\n * ```\\n * contract Example {\\n *     // Add the library methods\\n *     using EnumerableSet for EnumerableSet.AddressSet;\\n *\\n *     // Declare a set state variable\\n *     EnumerableSet.AddressSet private mySet;\\n * }\\n * ```\\n *\\n * As of v3.3.0, sets of type `bytes32` (`Bytes32Set`), `address` (`AddressSet`)\\n * and `uint256` (`UintSet`) are supported.\\n *\\n * [WARNING]\\n * ====\\n * Trying to delete such a structure from storage will likely result in data corruption, rendering the structure\\n * unusable.\\n * See https://github.com/ethereum/solidity/pull/11843[ethereum/solidity#11843] for more info.\\n *\\n * In order to clean an EnumerableSet, you can either remove all elements one by one or create a fresh instance using an\\n * array of EnumerableSet.\\n * ====\\n */\\nlibrary EnumerableSetUpgradeable {\\n    // To implement this library for multiple types with as little code\\n    // repetition as possible, we write it in terms of a generic Set type with\\n    // bytes32 values.\\n    // The Set implementation uses private functions, and user-facing\\n    // implementations (such as AddressSet) are just wrappers around the\\n    // underlying Set.\\n    // This means that we can only create new EnumerableSets for types that fit\\n    // in bytes32.\\n\\n    struct Set {\\n        // Storage of set values\\n        bytes32[] _values;\\n        // Position of the value in the `values` array, plus 1 because index 0\\n        // means a value is not in the set.\\n        mapping(bytes32 => uint256) _indexes;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function _add(Set storage set, bytes32 value) private returns (bool) {\\n        if (!_contains(set, value)) {\\n            set._values.push(value);\\n            // The value is stored at length-1, but we add 1 to all indexes\\n            // and use 0 as a sentinel value\\n            set._indexes[value] = set._values.length;\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function _remove(Set storage set, bytes32 value) private returns (bool) {\\n        // We read and store the value's index to prevent multiple reads from the same storage slot\\n        uint256 valueIndex = set._indexes[value];\\n\\n        if (valueIndex != 0) {\\n            // Equivalent to contains(set, value)\\n            // To delete an element from the _values array in O(1), we swap the element to delete with the last one in\\n            // the array, and then remove the last element (sometimes called as 'swap and pop').\\n            // This modifies the order of the array, as noted in {at}.\\n\\n            uint256 toDeleteIndex = valueIndex - 1;\\n            uint256 lastIndex = set._values.length - 1;\\n\\n            if (lastIndex != toDeleteIndex) {\\n                bytes32 lastValue = set._values[lastIndex];\\n\\n                // Move the last value to the index where the value to delete is\\n                set._values[toDeleteIndex] = lastValue;\\n                // Update the index for the moved value\\n                set._indexes[lastValue] = valueIndex; // Replace lastValue's index to valueIndex\\n            }\\n\\n            // Delete the slot where the moved value was stored\\n            set._values.pop();\\n\\n            // Delete the index for the deleted slot\\n            delete set._indexes[value];\\n\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function _contains(Set storage set, bytes32 value) private view returns (bool) {\\n        return set._indexes[value] != 0;\\n    }\\n\\n    /**\\n     * @dev Returns the number of values on the set. O(1).\\n     */\\n    function _length(Set storage set) private view returns (uint256) {\\n        return set._values.length;\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function _at(Set storage set, uint256 index) private view returns (bytes32) {\\n        return set._values[index];\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function _values(Set storage set) private view returns (bytes32[] memory) {\\n        return set._values;\\n    }\\n\\n    // Bytes32Set\\n\\n    struct Bytes32Set {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _add(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _remove(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(Bytes32Set storage set, bytes32 value) internal view returns (bool) {\\n        return _contains(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(Bytes32Set storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(Bytes32Set storage set, uint256 index) internal view returns (bytes32) {\\n        return _at(set._inner, index);\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(Bytes32Set storage set) internal view returns (bytes32[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        bytes32[] memory result;\\n\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n\\n    // AddressSet\\n\\n    struct AddressSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(AddressSet storage set, address value) internal returns (bool) {\\n        return _add(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(AddressSet storage set, address value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(AddressSet storage set, address value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(AddressSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(AddressSet storage set, uint256 index) internal view returns (address) {\\n        return address(uint160(uint256(_at(set._inner, index))));\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(AddressSet storage set) internal view returns (address[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        address[] memory result;\\n\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n\\n    // UintSet\\n\\n    struct UintSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _add(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(UintSet storage set, uint256 value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(UintSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(UintSet storage set, uint256 index) internal view returns (uint256) {\\n        return uint256(_at(set._inner, index));\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(UintSet storage set) internal view returns (uint256[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        uint256[] memory result;\\n\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n}\\n\",\"keccak256\":\"0x4807db844a856813048b5af81a764fdd25a0ae8876a3132593e8d21ddc6b607c\",\"license\":\"MIT\"},\"contracts/NFTLRaffle.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.11;\\n\\nimport \\\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/utils/structs/EnumerableSetUpgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/token/ERC20/utils/SafeERC20Upgradeable.sol\\\";\\nimport \\\"@chainlink/contracts/src/v0.8/interfaces/LinkTokenInterface.sol\\\";\\nimport \\\"@chainlink/contracts/src/v0.8/interfaces/VRFCoordinatorV2Interface.sol\\\";\\n\\ninterface IERC20BurnableUpgradeable is IERC20Upgradeable {\\n    function burnFrom(address account, uint256 amount) external;\\n}\\n\\n/**\\n * @title NFTLRaffle\\n */\\ncontract NFTLRaffle is Initializable, OwnableUpgradeable, PausableUpgradeable {\\n    using EnumerableSetUpgradeable for EnumerableSetUpgradeable.AddressSet;\\n    using EnumerableSetUpgradeable for EnumerableSetUpgradeable.UintSet;\\n    using SafeERC20Upgradeable for IERC20Upgradeable;\\n\\n    struct WinnerInfo {\\n        uint256 ticketId;\\n        address winner;\\n    }\\n\\n    /// @dev Chainlink VRF params\\n    address private vrfCoordinator; // goerli: 0x2Ca8E0C643bDe4C2E08ab1fA0da3401AdAD7734D, etherscan: 0x271682DEB8C4E0901D1a1550aD2e64D568E69909\\n    address private constant LINK = 0x326C977E6efc84E512bB9C30f76E30c160eD06FB; // 0x514910771AF9Ca656af840dff83E8264EcF986CA\\n    bytes32 private constant s_keyHash = 0x79d3d8832d904592c0bf9818b621522c988bb8b0c05cdc3b15aea1b6e8db0c15; // 0x8af398995b04c28e9951adb9721ef74c74f93e6a478f39e7e0777be13527e7ef\\n    uint16 private constant s_requestConfirmations = 3;\\n    uint32 private constant s_callbackGasLimit = 2500000;\\n    uint64 public s_subscriptionId;\\n\\n    // @dev VRF request Id\\n    uint256 private vrfRequestId;\\n\\n    /// @dev NFTL address\\n    IERC20BurnableUpgradeable public nftl;\\n\\n    /// @dev Timestamp the raffle start\\n    uint256 public raffleStartAt;\\n\\n    /// @dev Winner count\\n    uint256 public totalWinnerTicketCount;\\n\\n    /// @dev Winner list\\n    WinnerInfo[] public winners;\\n\\n    /// @dev Total ticket count\\n    uint256 public totalTicketCount;\\n\\n    /// @dev NFTL amount required for 1 ticket\\n    uint256 public constant NFTL_AMOUNT_FOR_TICKET = 1000 * 10 ** 18;\\n\\n    /// @dev User list\\n    EnumerableSetUpgradeable.AddressSet internal _userList;\\n\\n    /// @dev TokenId list\\n    EnumerableSetUpgradeable.UintSet internal _ticketIdList;\\n\\n    /// @dev User -> NFTL amount deposited\\n    mapping(address => uint256) public userDeposits;\\n\\n    /// @dev User -> Ticket Id list\\n    mapping(address => EnumerableSetUpgradeable.UintSet) internal _ticketIdsByUser;\\n\\n    /// @dev Ticket Id -> User\\n    mapping(uint256 => address) public userByTicketId;\\n\\n    event TicketDistributed(address indexed to, uint256 startTicketId, uint256 endTicketId);\\n    event UserDeposited(address indexed user, uint256 nftlAmount);\\n    event RandomWordsRequested(uint256 requestId);\\n    event RandomWordsReceived(uint256[] randomWords);\\n    event WinnerSelected(address indexed by, address indexed winner, uint256 ticketId);\\n\\n    /// @custom:oz-upgrades-unsafe-allow constructor\\n    constructor() {\\n        _disableInitializers();\\n    }\\n\\n    function initialize(\\n        address _nftl,\\n        uint256 _pendingPeriod,\\n        uint256 _totalWinnerTicketCount,\\n        address _vrfCoordinator\\n    ) public initializer {\\n        __Ownable_init();\\n        __Pausable_init();\\n\\n        require(_nftl != address(0), \\\"Zero address\\\");\\n        require(_pendingPeriod > 0, \\\"1 day +\\\");\\n        require(_totalWinnerTicketCount > 0, \\\"Zero winner ticket count\\\");\\n        require(_vrfCoordinator != address(0), \\\"Zero address\\\");\\n\\n        nftl = IERC20BurnableUpgradeable(_nftl);\\n        raffleStartAt = block.timestamp + _pendingPeriod;\\n        totalWinnerTicketCount = _totalWinnerTicketCount;\\n        vrfCoordinator = _vrfCoordinator;\\n\\n        _createNewSubscription();\\n    }\\n\\n    // Create a new subscription when the contract is initially deployed.\\n    function _createNewSubscription() private {\\n        s_subscriptionId = VRFCoordinatorV2Interface(vrfCoordinator).createSubscription();\\n        VRFCoordinatorV2Interface(vrfCoordinator).addConsumer(s_subscriptionId, address(this));\\n    }\\n\\n    function cancelSubscription() external onlyOwner {\\n        VRFCoordinatorV2Interface(vrfCoordinator).cancelSubscription(s_subscriptionId, owner());\\n        s_subscriptionId = 0;\\n    }\\n\\n    function updateRaffleStartAt(uint256 _raffleStartAt) external onlyOwner {\\n        require(block.timestamp < _raffleStartAt, \\\"Invalid timestamp\\\");\\n        raffleStartAt = _raffleStartAt;\\n    }\\n\\n    function updateTotalWinnerTicketCount(uint256 _totalWinnerTicketCount) external onlyOwner {\\n        require(_totalWinnerTicketCount > 0, \\\"Zero winner ticket count\\\");\\n        totalWinnerTicketCount = _totalWinnerTicketCount;\\n    }\\n\\n    function distributeTicketsToCitadelKeyHolders(\\n        address[] calldata _holders,\\n        uint256[] calldata _keyCount\\n    ) external onlyOwner {\\n        uint256 holderCount = _holders.length;\\n        require(holderCount == _keyCount.length, \\\"Invalid params\\\");\\n        require(block.timestamp < raffleStartAt, \\\"Expired\\\");\\n\\n        // distribute 100 tickets to each Citadel Key holders\\n        for (uint256 i = 0; i < holderCount; ) {\\n            address holder = _holders[i];\\n            uint256 userTicketCountToAssign = 100 * _keyCount[i];\\n\\n            // mark as if the holder deposited tokens for the userTicketCountToAssign calculation in deposit() function.\\n            userDeposits[holder] += userTicketCountToAssign * NFTL_AMOUNT_FOR_TICKET;\\n\\n            // add the user if not exist\\n            _userList.add(holder);\\n\\n            // assign tickets (user <-> ticketId)\\n            uint256 baseTicketId = totalTicketCount;\\n            _assignTicketsToUser(holder, baseTicketId, userTicketCountToAssign);\\n\\n            emit TicketDistributed(holder, baseTicketId, baseTicketId + userTicketCountToAssign - 1);\\n\\n            // increase the total ticket count\\n            totalTicketCount += userTicketCountToAssign;\\n\\n            unchecked {\\n                ++i;\\n            }\\n        }\\n    }\\n\\n    function deposit(uint256 _amount) external {\\n        require(block.timestamp < raffleStartAt, \\\"Expired\\\");\\n\\n        // burn NFTL tokens\\n        nftl.burnFrom(msg.sender, _amount);\\n\\n        // increase the user deposit\\n        userDeposits[msg.sender] += _amount;\\n\\n        // add the user if not exist\\n        _userList.add(msg.sender);\\n\\n        // assign tickets (user <-> ticketId)\\n        uint256 userTicketCount = getTicketCountByUser(msg.sender);\\n        uint256 userTicketCountToAssign = userDeposits[msg.sender] / NFTL_AMOUNT_FOR_TICKET - userTicketCount;\\n        uint256 baseTicketId = totalTicketCount;\\n        _assignTicketsToUser(msg.sender, baseTicketId, userTicketCountToAssign);\\n\\n        // increase the total ticket count\\n        totalTicketCount += userTicketCountToAssign;\\n\\n        emit UserDeposited(msg.sender, _amount);\\n    }\\n\\n    function _assignTicketsToUser(address _user, uint256 _startTicketId, uint256 _count) private {\\n        for (uint256 i = 0; i < _count; ) {\\n            uint256 ticketIdToAssign = _startTicketId + i;\\n\\n            // add the ticket Id\\n            _ticketIdList.add(ticketIdToAssign);\\n\\n            // user -> ticket Ids\\n            _ticketIdsByUser[_user].add(ticketIdToAssign);\\n\\n            // ticket ID -> user\\n            userByTicketId[ticketIdToAssign] = _user;\\n\\n            unchecked {\\n                ++i;\\n            }\\n        }\\n    }\\n\\n    function manageConsumers(address _consumer, bool _add) external onlyOwner {\\n        _add\\n            ? VRFCoordinatorV2Interface(vrfCoordinator).addConsumer(s_subscriptionId, _consumer)\\n            : VRFCoordinatorV2Interface(vrfCoordinator).removeConsumer(s_subscriptionId, _consumer);\\n    }\\n\\n    function chargeLINK(uint256 _amount) external {\\n        IERC20Upgradeable(LINK).safeTransferFrom(msg.sender, address(this), _amount);\\n        LinkTokenInterface(LINK).transferAndCall(vrfCoordinator, _amount, abi.encode(s_subscriptionId));\\n    }\\n\\n    function requestRandomWordsForWinnerSelection() external onlyOwner returns (uint256 requestId) {\\n        require(raffleStartAt <= block.timestamp, \\\"Pending period\\\");\\n        require(totalWinnerTicketCount <= _ticketIdList.length(), \\\"Not enough depositors\\\");\\n        require(vrfRequestId == 0, \\\"Already requested\\\");\\n\\n        requestId = _requestRandomWords(uint32(totalWinnerTicketCount));\\n        vrfRequestId = requestId;\\n\\n        emit RandomWordsRequested(requestId);\\n    }\\n\\n    function _requestRandomWords(uint32 _numWords) internal returns (uint256) {\\n        return\\n            VRFCoordinatorV2Interface(vrfCoordinator).requestRandomWords(\\n                s_keyHash,\\n                s_subscriptionId,\\n                s_requestConfirmations,\\n                s_callbackGasLimit,\\n                _numWords\\n            );\\n    }\\n\\n    // rawFulfillRandomness is called by VRFCoordinator when it receives a valid VRF\\n    // proof. rawFulfillRandomness then calls fulfillRandomness, after validating\\n    // the origin of the call\\n    function rawFulfillRandomWords(uint256 _requestId, uint256[] memory _randomWords) external {\\n        require(msg.sender == vrfCoordinator, \\\"Only VRF coordinator\\\");\\n        _fulfillRandomWords(_requestId, _randomWords);\\n    }\\n\\n    /**\\n     * @notice fulfillRandomness handles the VRF response. Your contract must\\n     * @notice implement it. See \\\"SECURITY CONSIDERATIONS\\\" above for important\\n     * @notice principles to keep in mind when implementing your fulfillRandomness\\n     * @notice method.\\n     *\\n     * @dev VRFConsumerBaseV2 expects its subcontracts to have a method with this\\n     * @dev signature, and will call it once it has verified the proof\\n     * @dev associated with the randomness. (It is triggered via a call to\\n     * @dev rawFulfillRandomness, below.)\\n     *\\n     * @param _requestId The Id initially returned by requestRandomWords\\n     * @param _randomWords the VRF output expanded to the requested number of words\\n     */\\n    function _fulfillRandomWords(uint256 _requestId, uint256[] memory _randomWords) internal {\\n        _selectWinners(_requestId, _randomWords);\\n    }\\n\\n    function _selectWinners(uint256 _requestId, uint256[] memory _randomWords) internal {\\n        require(_requestId == vrfRequestId, \\\"Invalid requestId\\\");\\n        require(_randomWords.length == totalWinnerTicketCount, \\\"Invalid random word count\\\");\\n\\n        for (uint256 i = 0; i < totalWinnerTicketCount; ) {\\n            // select the winner\\n            uint256 winnerTicketIndex = _randomWords[i] % _ticketIdList.length();\\n            uint256 winnerTicketId = _ticketIdList.at(winnerTicketIndex);\\n            address winner = userByTicketId[winnerTicketId];\\n\\n            // store the winner\\n            winners.push(WinnerInfo({ ticketId: winnerTicketId, winner: winner }));\\n\\n            // remove the selected ticket Id from the list\\n            _ticketIdList.remove(winnerTicketId);\\n\\n            emit WinnerSelected(msg.sender, winner, winnerTicketId);\\n\\n            unchecked {\\n                ++i;\\n            }\\n        }\\n\\n        emit RandomWordsReceived(_randomWords);\\n    }\\n\\n    function getWinners() external view returns (WinnerInfo[] memory) {\\n        return winners;\\n    }\\n\\n    function getUserCount() external view returns (uint256) {\\n        return _userList.length();\\n    }\\n\\n    function getTicketIdsByUser(address _user) external view returns (uint256[] memory) {\\n        return _ticketIdsByUser[_user].values();\\n    }\\n\\n    function getTicketCountByUser(address _user) public view returns (uint256) {\\n        return _ticketIdsByUser[_user].length();\\n    }\\n\\n    function getUserList() external view returns (address[] memory) {\\n        return _userList.values();\\n    }\\n\\n    /**\\n     * @notice Pause the contract\\n     */\\n    function pause() external onlyOwner {\\n        _pause();\\n    }\\n\\n    /**\\n     * @notice Unpause the contract\\n     */\\n    function unpause() external onlyOwner {\\n        _unpause();\\n    }\\n}\\n\",\"keccak256\":\"0x5639873766baa664759d46005300b0f2e5d8753c4bfd1a34a95c06f180e1a5d4\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b5061001961001e565b6100de565b600054610100900460ff161561008a5760405162461bcd60e51b815260206004820152602760248201527f496e697469616c697a61626c653a20636f6e747261637420697320696e697469604482015266616c697a696e6760c81b606482015260840160405180910390fd5b60005460ff90811610156100dc576000805460ff191660ff9081179091556040519081527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb38474024989060200160405180910390a15b565b6121e580620000ee6000396000f3fe608060405234801561001057600080fd5b50600436106101da5760003560e01c806384a1890e11610104578063a488af25116100a2578063bc7c7bc211610071578063bc7c7bc2146103f0578063df15c37e14610403578063f200006c14610418578063f2fde38b1461044157600080fd5b8063a488af25146103ad578063b5cb15f7146103c0578063b6b55f25146103c8578063b8522043146103db57600080fd5b80638c2906d5116100de5780638c2906d5146103465780638da5cb5b146103595780639e3d87cd1461036a578063a2fb11751461037d57600080fd5b806384a1890e146102ee578063869c046c146103015780638ac000211461031457600080fd5b80633f4ba83a1161017c57806360d131681161014b57806360d13168146102b6578063715018a6146102d65780637b762fac146102de5780638456cb59146102e657600080fd5b80633f4ba83a1461025d5780634e81da0a146102655780635671fc66146102905780635c975abb146102a057600080fd5b806319d750ce116101b857806319d750ce146102305780631fe543e31461023957806324e9edb01461024c578063323c1bb31461025457600080fd5b806302e4bb9f146101df5780630ba36dcd146101f457806314558fab14610227575b600080fd5b6101f26101ed366004611c11565b610454565b005b610214610202366004611c46565b60a26020526000908152604090205481565b6040519081526020015b60405180910390f35b610214609d5481565b610214609a5481565b6101f2610247366004611c77565b61052f565b6101f261058f565b610214609b5481565b6101f2610633565b609954610278906001600160a01b031681565b6040516001600160a01b03909116815260200161021e565b610214683635c9adc5dea0000081565b60655460ff16604051901515815260200161021e565b6102c96102c4366004611c46565b610645565b60405161021e9190611d40565b6101f261066f565b610214610681565b6101f26107ae565b6102146102fc366004611c46565b6107be565b6101f261030f366004611c11565b6107df565b60975461032e90600160a01b90046001600160401b031681565b6040516001600160401b03909116815260200161021e565b6101f2610354366004611dcf565b610837565b6033546001600160a01b0316610278565b6101f2610378366004611e3a565b6109fd565b61039061038b366004611c11565b610c79565b604080519283526001600160a01b0390911660208301520161021e565b6101f26103bb366004611c11565b610cb0565b610214610d00565b6101f26103d6366004611c11565b610d11565b6103e3610e84565b60405161021e9190611e80565b6101f26103fe366004611ecf565b610e90565b61040b610f4b565b60405161021e9190611f06565b610278610426366004611c11565b60a4602052600090815260409020546001600160a01b031681565b6101f261044f366004611c46565b610fc0565b61047473326c977e6efc84e512bb9c30f76e30c160ed06fb333084611039565b60975460408051600160a01b83046001600160401b0316602082015273326c977e6efc84e512bb9c30f76e30c160ed06fb92634000aea0926001600160a01b03909116918591016040516020818303038152906040526040518463ffffffff1660e01b81526004016104e893929190611fb6565b6020604051808303816000875af1158015610507573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061052b9190611fe6565b5050565b6097546001600160a01b031633146105855760405162461bcd60e51b815260206004820152601460248201527327b7363c902b29231031b7b7b93234b730ba37b960611b60448201526064015b60405180910390fd5b61052b8282611099565b6105976110a3565b6097546001600160a01b0381169063d7ae1d30906001600160401b03600160a01b909104166105ce6033546001600160a01b031690565b6040518363ffffffff1660e01b81526004016105eb929190612003565b600060405180830381600087803b15801561060557600080fd5b505af1158015610619573d6000803e3d6000fd5b50506097805467ffffffffffffffff60a01b191690555050565b61063b6110a3565b6106436110fd565b565b6001600160a01b038116600090815260a3602052604090206060906106699061114f565b92915050565b6106776110a3565b6106436000611163565b600061068b6110a3565b42609a5411156106ce5760405162461bcd60e51b815260206004820152600e60248201526d14195b991a5b99c81c195c9a5bd960921b604482015260640161057c565b6106d860a06111b5565b609b5411156107215760405162461bcd60e51b81526020600482015260156024820152744e6f7420656e6f756768206465706f7369746f727360581b604482015260640161057c565b609854156107655760405162461bcd60e51b8152602060048201526011602482015270105b1c9958591e481c995c5d595cdd1959607a1b604482015260640161057c565b610770609b546111bf565b60988190556040518181529091507f7fcb39adb5b831fa03838de8ac6af690f48e3339ee8300eff17b1cd8035054df9060200160405180910390a190565b6107b66110a3565b61064361127f565b6001600160a01b038116600090815260a360205260408120610669906111b5565b6107e76110a3565b600081116108325760405162461bcd60e51b815260206004820152601860248201527716995c9bc81dda5b9b995c881d1a58dad95d0818dbdd5b9d60421b604482015260640161057c565b609b55565b61083f6110a3565b828181146108805760405162461bcd60e51b815260206004820152600e60248201526d496e76616c696420706172616d7360901b604482015260640161057c565b609a5442106108bb5760405162461bcd60e51b8152602060048201526007602482015266115e1c1a5c995960ca1b604482015260640161057c565b60005b818110156109f55760008686838181106108da576108da612025565b90506020020160208101906108ef9190611c46565b9050600085858481811061090557610905612025565b9050602002013560646109189190612051565b905061092d683635c9adc5dea0000082612051565b6001600160a01b038316600090815260a2602052604081208054909190610955908490612070565b909155506109669050609e836112bc565b50609d546109758382846112d1565b6001600160a01b0383167f7f640e5b7323aeb1bf30be14a85cea66e69d3cfd9493ee1cdd5058830c9e73dd8260016109ad8683612070565b6109b79190612088565b6040805192835260208301919091520160405180910390a281609d60008282546109e19190612070565b9091555050600190930192506108be915050565b505050505050565b600054610100900460ff1615808015610a1d5750600054600160ff909116105b80610a375750303b158015610a37575060005460ff166001145b610a9a5760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201526d191e481a5b9a5d1a585b1a5e995960921b606482015260840161057c565b6000805460ff191660011790558015610abd576000805461ff0019166101001790555b610ac5611348565b610acd611377565b6001600160a01b038516610b125760405162461bcd60e51b815260206004820152600c60248201526b5a65726f206164647265737360a01b604482015260640161057c565b60008411610b4c5760405162461bcd60e51b81526020600482015260076024820152663120646179202b60c81b604482015260640161057c565b60008311610b975760405162461bcd60e51b815260206004820152601860248201527716995c9bc81dda5b9b995c881d1a58dad95d0818dbdd5b9d60421b604482015260640161057c565b6001600160a01b038216610bdc5760405162461bcd60e51b815260206004820152600c60248201526b5a65726f206164647265737360a01b604482015260640161057c565b609980546001600160a01b0319166001600160a01b038716179055610c018442612070565b609a55609b839055609780546001600160a01b0319166001600160a01b038416179055610c2c6113a6565b8015610c72576000805461ff0019169055604051600181527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb38474024989060200160405180910390a15b5050505050565b609c8181548110610c8957600080fd5b6000918252602090912060029091020180546001909101549091506001600160a01b031682565b610cb86110a3565b804210610cfb5760405162461bcd60e51b81526020600482015260116024820152700496e76616c69642074696d657374616d7607c1b604482015260640161057c565b609a55565b6000610d0c609e6111b5565b905090565b609a544210610d4c5760405162461bcd60e51b8152602060048201526007602482015266115e1c1a5c995960ca1b604482015260640161057c565b60995460405163079cc67960e41b8152336004820152602481018390526001600160a01b03909116906379cc679090604401600060405180830381600087803b158015610d9857600080fd5b505af1158015610dac573d6000803e3d6000fd5b505033600090815260a2602052604081208054859450909250610dd0908490612070565b90915550610de19050609e336112bc565b506000610ded336107be565b33600090815260a26020526040812054919250908290610e1790683635c9adc5dea00000906120b5565b610e219190612088565b609d54909150610e323382846112d1565b81609d6000828254610e449190612070565b909155505060405184815233907f951fdc61d6a98f96098a17ea6ac287a6fd38aea6bef73083c93b274cb830107d9060200160405180910390a250505050565b6060610d0c609e61114f565b610e986110a3565b80610f0b57609754604051639f87fad760e01b81526001600160a01b03821691639f87fad791610edd91600160a01b90046001600160401b0316908690600401612003565b600060405180830381600087803b158015610ef757600080fd5b505af11580156109f5573d6000803e3d6000fd5b609754604051631cd0704360e21b81526001600160a01b03821691637341c10c91610edd91600160a01b90046001600160401b0316908690600401612003565b6060609c805480602002602001604051908101604052809291908181526020016000905b82821015610fb75760008481526020908190206040805180820190915260028502909101805482526001908101546001600160a01b0316828401529083529092019101610f6f565b50505050905090565b610fc86110a3565b6001600160a01b03811661102d5760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b606482015260840161057c565b61103681611163565b50565b604080516001600160a01b0385811660248301528416604482015260648082018490528251808303909101815260849091019091526020810180516001600160e01b03166323b872dd60e01b1790526110939085906114b0565b50505050565b61052b8282611587565b6033546001600160a01b031633146106435760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604482015260640161057c565b6111056117a6565b6065805460ff191690557f5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa335b6040516001600160a01b03909116815260200160405180910390a1565b6060600061115c836117ef565b9392505050565b603380546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b6000610669825490565b6097546040516305d3b1d360e41b81527f79d3d8832d904592c0bf9818b621522c988bb8b0c05cdc3b15aea1b6e8db0c156004820152600160a01b82046001600160401b0316602482015260036044820152622625a0606482015263ffffffff831660848201526000916001600160a01b031690635d3b1d309060a4016020604051808303816000875af115801561125b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061066991906120c9565b61128761184b565b6065805460ff191660011790557f62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a2586111323390565b600061115c836001600160a01b038416611891565b60005b818110156110935760006112e88285612070565b90506112f560a0826118e0565b506001600160a01b038516600090815260a36020526040902061131890826118e0565b50600090815260a46020526040902080546001600160a01b0319166001600160a01b0386161790556001016112d4565b600054610100900460ff1661136f5760405162461bcd60e51b815260040161057c906120e2565b6106436118ec565b600054610100900460ff1661139e5760405162461bcd60e51b815260040161057c906120e2565b61064361191c565b609760009054906101000a90046001600160a01b03166001600160a01b031663a21a23e46040518163ffffffff1660e01b81526004016020604051808303816000875af11580156113fb573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061141f919061212d565b609780546001600160401b03928316600160a01b90810267ffffffffffffffff60a01b198316811793849055604051631cd0704360e21b81526001600160a01b03918216919093161793637341c10c936114829392900416903090600401612003565b600060405180830381600087803b15801561149c57600080fd5b505af1158015611093573d6000803e3d6000fd5b6000611505826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b031661194f9092919063ffffffff16565b80519091501561158257808060200190518101906115239190611fe6565b6115825760405162461bcd60e51b815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e6044820152691bdd081cdd58d8d9595960b21b606482015260840161057c565b505050565b60985482146115cc5760405162461bcd60e51b8152602060048201526011602482015270125b9d985b1a59081c995c5d595cdd1259607a1b604482015260640161057c565b609b5481511461161e5760405162461bcd60e51b815260206004820152601960248201527f496e76616c69642072616e646f6d20776f726420636f756e7400000000000000604482015260640161057c565b60005b609b5481101561176a57600061163760a06111b5565b83838151811061164957611649612025565b602002602001015161165b9190612156565b9050600061166a60a083611966565b600081815260a4602090815260408083205481518083019092528482526001600160a01b03908116928201838152609c8054600181018255955291517faf85b9071dfafeac1409d3f1d19bafc9bc7c37974cde8df0ee6168f0086e539c60029095029485015590517faf85b9071dfafeac1409d3f1d19bafc9bc7c37974cde8df0ee6168f0086e539d90930180546001600160a01b031916939091169290921790915590915061171b60a083611972565b506040518281526001600160a01b0382169033907fd28fd066cbe6a30a425b0a60222cebaba3ee406c3c8f21a2f56ec6b68a6db7ab9060200160405180910390a3836001019350505050611621565b507fc88f650164e2200b137333ff26e3bdfa82a318b079a6ddeabf305c98995491568160405161179a9190611d40565b60405180910390a15050565b60655460ff166106435760405162461bcd60e51b815260206004820152601460248201527314185d5cd8589b194e881b9bdd081c185d5cd95960621b604482015260640161057c565b60608160000180548060200260200160405190810160405280929190818152602001828054801561183f57602002820191906000526020600020905b81548152602001906001019080831161182b575b50505050509050919050565b60655460ff16156106435760405162461bcd60e51b815260206004820152601060248201526f14185d5cd8589b194e881c185d5cd95960821b604482015260640161057c565b60008181526001830160205260408120546118d857508154600181810184556000848152602080822090930184905584548482528286019093526040902091909155610669565b506000610669565b600061115c8383611891565b600054610100900460ff166119135760405162461bcd60e51b815260040161057c906120e2565b61064333611163565b600054610100900460ff166119435760405162461bcd60e51b815260040161057c906120e2565b6065805460ff19169055565b606061195e848460008561197e565b949350505050565b600061115c8383611a59565b600061115c8383611a83565b6060824710156119df5760405162461bcd60e51b815260206004820152602660248201527f416464726573733a20696e73756666696369656e742062616c616e636520666f6044820152651c8818d85b1b60d21b606482015260840161057c565b600080866001600160a01b031685876040516119fb919061216a565b60006040518083038185875af1925050503d8060008114611a38576040519150601f19603f3d011682016040523d82523d6000602084013e611a3d565b606091505b5091509150611a4e87838387611b76565b979650505050505050565b6000826000018281548110611a7057611a70612025565b9060005260206000200154905092915050565b60008181526001830160205260408120548015611b6c576000611aa7600183612088565b8554909150600090611abb90600190612088565b9050818114611b20576000866000018281548110611adb57611adb612025565b9060005260206000200154905080876000018481548110611afe57611afe612025565b6000918252602080832090910192909255918252600188019052604090208390555b8554869080611b3157611b31612186565b600190038181906000526020600020016000905590558560010160008681526020019081526020016000206000905560019350505050610669565b6000915050610669565b60608315611be2578251611bdb576001600160a01b0385163b611bdb5760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e7472616374000000604482015260640161057c565b508161195e565b61195e8383815115611bf75781518083602001fd5b8060405162461bcd60e51b815260040161057c919061219c565b600060208284031215611c2357600080fd5b5035919050565b80356001600160a01b0381168114611c4157600080fd5b919050565b600060208284031215611c5857600080fd5b61115c82611c2a565b634e487b7160e01b600052604160045260246000fd5b60008060408385031215611c8a57600080fd5b823591506020808401356001600160401b0380821115611ca957600080fd5b818601915086601f830112611cbd57600080fd5b813581811115611ccf57611ccf611c61565b8060051b604051601f19603f83011681018181108582111715611cf457611cf4611c61565b604052918252848201925083810185019189831115611d1257600080fd5b938501935b82851015611d3057843584529385019392850192611d17565b8096505050505050509250929050565b6020808252825182820181905260009190848201906040850190845b81811015611d7857835183529284019291840191600101611d5c565b50909695505050505050565b60008083601f840112611d9657600080fd5b5081356001600160401b03811115611dad57600080fd5b6020830191508360208260051b8501011115611dc857600080fd5b9250929050565b60008060008060408587031215611de557600080fd5b84356001600160401b0380821115611dfc57600080fd5b611e0888838901611d84565b90965094506020870135915080821115611e2157600080fd5b50611e2e87828801611d84565b95989497509550505050565b60008060008060808587031215611e5057600080fd5b611e5985611c2a565b93506020850135925060408501359150611e7560608601611c2a565b905092959194509250565b6020808252825182820181905260009190848201906040850190845b81811015611d785783516001600160a01b031683529284019291840191600101611e9c565b801515811461103657600080fd5b60008060408385031215611ee257600080fd5b611eeb83611c2a565b91506020830135611efb81611ec1565b809150509250929050565b602080825282518282018190526000919060409081850190868401855b82811015611f51578151805185528601516001600160a01b0316868501529284019290850190600101611f23565b5091979650505050505050565b60005b83811015611f79578181015183820152602001611f61565b838111156110935750506000910152565b60008151808452611fa2816020860160208601611f5e565b601f01601f19169290920160200192915050565b60018060a01b0384168152826020820152606060408201526000611fdd6060830184611f8a565b95945050505050565b600060208284031215611ff857600080fd5b815161115c81611ec1565b6001600160401b039290921682526001600160a01b0316602082015260400190565b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052601160045260246000fd5b600081600019048311821515161561206b5761206b61203b565b500290565b600082198211156120835761208361203b565b500190565b60008282101561209a5761209a61203b565b500390565b634e487b7160e01b600052601260045260246000fd5b6000826120c4576120c461209f565b500490565b6000602082840312156120db57600080fd5b5051919050565b6020808252602b908201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960408201526a6e697469616c697a696e6760a81b606082015260800190565b60006020828403121561213f57600080fd5b81516001600160401b038116811461115c57600080fd5b6000826121655761216561209f565b500690565b6000825161217c818460208701611f5e565b9190910192915050565b634e487b7160e01b600052603160045260246000fd5b60208152600061115c6020830184611f8a56fea26469706673582212204466f3d20b4e2bca91c0af50f91d9f42f96b1c1904acaa4dd5060d355a4af5ab64736f6c634300080b0033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106101da5760003560e01c806384a1890e11610104578063a488af25116100a2578063bc7c7bc211610071578063bc7c7bc2146103f0578063df15c37e14610403578063f200006c14610418578063f2fde38b1461044157600080fd5b8063a488af25146103ad578063b5cb15f7146103c0578063b6b55f25146103c8578063b8522043146103db57600080fd5b80638c2906d5116100de5780638c2906d5146103465780638da5cb5b146103595780639e3d87cd1461036a578063a2fb11751461037d57600080fd5b806384a1890e146102ee578063869c046c146103015780638ac000211461031457600080fd5b80633f4ba83a1161017c57806360d131681161014b57806360d13168146102b6578063715018a6146102d65780637b762fac146102de5780638456cb59146102e657600080fd5b80633f4ba83a1461025d5780634e81da0a146102655780635671fc66146102905780635c975abb146102a057600080fd5b806319d750ce116101b857806319d750ce146102305780631fe543e31461023957806324e9edb01461024c578063323c1bb31461025457600080fd5b806302e4bb9f146101df5780630ba36dcd146101f457806314558fab14610227575b600080fd5b6101f26101ed366004611c11565b610454565b005b610214610202366004611c46565b60a26020526000908152604090205481565b6040519081526020015b60405180910390f35b610214609d5481565b610214609a5481565b6101f2610247366004611c77565b61052f565b6101f261058f565b610214609b5481565b6101f2610633565b609954610278906001600160a01b031681565b6040516001600160a01b03909116815260200161021e565b610214683635c9adc5dea0000081565b60655460ff16604051901515815260200161021e565b6102c96102c4366004611c46565b610645565b60405161021e9190611d40565b6101f261066f565b610214610681565b6101f26107ae565b6102146102fc366004611c46565b6107be565b6101f261030f366004611c11565b6107df565b60975461032e90600160a01b90046001600160401b031681565b6040516001600160401b03909116815260200161021e565b6101f2610354366004611dcf565b610837565b6033546001600160a01b0316610278565b6101f2610378366004611e3a565b6109fd565b61039061038b366004611c11565b610c79565b604080519283526001600160a01b0390911660208301520161021e565b6101f26103bb366004611c11565b610cb0565b610214610d00565b6101f26103d6366004611c11565b610d11565b6103e3610e84565b60405161021e9190611e80565b6101f26103fe366004611ecf565b610e90565b61040b610f4b565b60405161021e9190611f06565b610278610426366004611c11565b60a4602052600090815260409020546001600160a01b031681565b6101f261044f366004611c46565b610fc0565b61047473326c977e6efc84e512bb9c30f76e30c160ed06fb333084611039565b60975460408051600160a01b83046001600160401b0316602082015273326c977e6efc84e512bb9c30f76e30c160ed06fb92634000aea0926001600160a01b03909116918591016040516020818303038152906040526040518463ffffffff1660e01b81526004016104e893929190611fb6565b6020604051808303816000875af1158015610507573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061052b9190611fe6565b5050565b6097546001600160a01b031633146105855760405162461bcd60e51b815260206004820152601460248201527327b7363c902b29231031b7b7b93234b730ba37b960611b60448201526064015b60405180910390fd5b61052b8282611099565b6105976110a3565b6097546001600160a01b0381169063d7ae1d30906001600160401b03600160a01b909104166105ce6033546001600160a01b031690565b6040518363ffffffff1660e01b81526004016105eb929190612003565b600060405180830381600087803b15801561060557600080fd5b505af1158015610619573d6000803e3d6000fd5b50506097805467ffffffffffffffff60a01b191690555050565b61063b6110a3565b6106436110fd565b565b6001600160a01b038116600090815260a3602052604090206060906106699061114f565b92915050565b6106776110a3565b6106436000611163565b600061068b6110a3565b42609a5411156106ce5760405162461bcd60e51b815260206004820152600e60248201526d14195b991a5b99c81c195c9a5bd960921b604482015260640161057c565b6106d860a06111b5565b609b5411156107215760405162461bcd60e51b81526020600482015260156024820152744e6f7420656e6f756768206465706f7369746f727360581b604482015260640161057c565b609854156107655760405162461bcd60e51b8152602060048201526011602482015270105b1c9958591e481c995c5d595cdd1959607a1b604482015260640161057c565b610770609b546111bf565b60988190556040518181529091507f7fcb39adb5b831fa03838de8ac6af690f48e3339ee8300eff17b1cd8035054df9060200160405180910390a190565b6107b66110a3565b61064361127f565b6001600160a01b038116600090815260a360205260408120610669906111b5565b6107e76110a3565b600081116108325760405162461bcd60e51b815260206004820152601860248201527716995c9bc81dda5b9b995c881d1a58dad95d0818dbdd5b9d60421b604482015260640161057c565b609b55565b61083f6110a3565b828181146108805760405162461bcd60e51b815260206004820152600e60248201526d496e76616c696420706172616d7360901b604482015260640161057c565b609a5442106108bb5760405162461bcd60e51b8152602060048201526007602482015266115e1c1a5c995960ca1b604482015260640161057c565b60005b818110156109f55760008686838181106108da576108da612025565b90506020020160208101906108ef9190611c46565b9050600085858481811061090557610905612025565b9050602002013560646109189190612051565b905061092d683635c9adc5dea0000082612051565b6001600160a01b038316600090815260a2602052604081208054909190610955908490612070565b909155506109669050609e836112bc565b50609d546109758382846112d1565b6001600160a01b0383167f7f640e5b7323aeb1bf30be14a85cea66e69d3cfd9493ee1cdd5058830c9e73dd8260016109ad8683612070565b6109b79190612088565b6040805192835260208301919091520160405180910390a281609d60008282546109e19190612070565b9091555050600190930192506108be915050565b505050505050565b600054610100900460ff1615808015610a1d5750600054600160ff909116105b80610a375750303b158015610a37575060005460ff166001145b610a9a5760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201526d191e481a5b9a5d1a585b1a5e995960921b606482015260840161057c565b6000805460ff191660011790558015610abd576000805461ff0019166101001790555b610ac5611348565b610acd611377565b6001600160a01b038516610b125760405162461bcd60e51b815260206004820152600c60248201526b5a65726f206164647265737360a01b604482015260640161057c565b60008411610b4c5760405162461bcd60e51b81526020600482015260076024820152663120646179202b60c81b604482015260640161057c565b60008311610b975760405162461bcd60e51b815260206004820152601860248201527716995c9bc81dda5b9b995c881d1a58dad95d0818dbdd5b9d60421b604482015260640161057c565b6001600160a01b038216610bdc5760405162461bcd60e51b815260206004820152600c60248201526b5a65726f206164647265737360a01b604482015260640161057c565b609980546001600160a01b0319166001600160a01b038716179055610c018442612070565b609a55609b839055609780546001600160a01b0319166001600160a01b038416179055610c2c6113a6565b8015610c72576000805461ff0019169055604051600181527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb38474024989060200160405180910390a15b5050505050565b609c8181548110610c8957600080fd5b6000918252602090912060029091020180546001909101549091506001600160a01b031682565b610cb86110a3565b804210610cfb5760405162461bcd60e51b81526020600482015260116024820152700496e76616c69642074696d657374616d7607c1b604482015260640161057c565b609a55565b6000610d0c609e6111b5565b905090565b609a544210610d4c5760405162461bcd60e51b8152602060048201526007602482015266115e1c1a5c995960ca1b604482015260640161057c565b60995460405163079cc67960e41b8152336004820152602481018390526001600160a01b03909116906379cc679090604401600060405180830381600087803b158015610d9857600080fd5b505af1158015610dac573d6000803e3d6000fd5b505033600090815260a2602052604081208054859450909250610dd0908490612070565b90915550610de19050609e336112bc565b506000610ded336107be565b33600090815260a26020526040812054919250908290610e1790683635c9adc5dea00000906120b5565b610e219190612088565b609d54909150610e323382846112d1565b81609d6000828254610e449190612070565b909155505060405184815233907f951fdc61d6a98f96098a17ea6ac287a6fd38aea6bef73083c93b274cb830107d9060200160405180910390a250505050565b6060610d0c609e61114f565b610e986110a3565b80610f0b57609754604051639f87fad760e01b81526001600160a01b03821691639f87fad791610edd91600160a01b90046001600160401b0316908690600401612003565b600060405180830381600087803b158015610ef757600080fd5b505af11580156109f5573d6000803e3d6000fd5b609754604051631cd0704360e21b81526001600160a01b03821691637341c10c91610edd91600160a01b90046001600160401b0316908690600401612003565b6060609c805480602002602001604051908101604052809291908181526020016000905b82821015610fb75760008481526020908190206040805180820190915260028502909101805482526001908101546001600160a01b0316828401529083529092019101610f6f565b50505050905090565b610fc86110a3565b6001600160a01b03811661102d5760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b606482015260840161057c565b61103681611163565b50565b604080516001600160a01b0385811660248301528416604482015260648082018490528251808303909101815260849091019091526020810180516001600160e01b03166323b872dd60e01b1790526110939085906114b0565b50505050565b61052b8282611587565b6033546001600160a01b031633146106435760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604482015260640161057c565b6111056117a6565b6065805460ff191690557f5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa335b6040516001600160a01b03909116815260200160405180910390a1565b6060600061115c836117ef565b9392505050565b603380546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b6000610669825490565b6097546040516305d3b1d360e41b81527f79d3d8832d904592c0bf9818b621522c988bb8b0c05cdc3b15aea1b6e8db0c156004820152600160a01b82046001600160401b0316602482015260036044820152622625a0606482015263ffffffff831660848201526000916001600160a01b031690635d3b1d309060a4016020604051808303816000875af115801561125b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061066991906120c9565b61128761184b565b6065805460ff191660011790557f62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a2586111323390565b600061115c836001600160a01b038416611891565b60005b818110156110935760006112e88285612070565b90506112f560a0826118e0565b506001600160a01b038516600090815260a36020526040902061131890826118e0565b50600090815260a46020526040902080546001600160a01b0319166001600160a01b0386161790556001016112d4565b600054610100900460ff1661136f5760405162461bcd60e51b815260040161057c906120e2565b6106436118ec565b600054610100900460ff1661139e5760405162461bcd60e51b815260040161057c906120e2565b61064361191c565b609760009054906101000a90046001600160a01b03166001600160a01b031663a21a23e46040518163ffffffff1660e01b81526004016020604051808303816000875af11580156113fb573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061141f919061212d565b609780546001600160401b03928316600160a01b90810267ffffffffffffffff60a01b198316811793849055604051631cd0704360e21b81526001600160a01b03918216919093161793637341c10c936114829392900416903090600401612003565b600060405180830381600087803b15801561149c57600080fd5b505af1158015611093573d6000803e3d6000fd5b6000611505826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b031661194f9092919063ffffffff16565b80519091501561158257808060200190518101906115239190611fe6565b6115825760405162461bcd60e51b815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e6044820152691bdd081cdd58d8d9595960b21b606482015260840161057c565b505050565b60985482146115cc5760405162461bcd60e51b8152602060048201526011602482015270125b9d985b1a59081c995c5d595cdd1259607a1b604482015260640161057c565b609b5481511461161e5760405162461bcd60e51b815260206004820152601960248201527f496e76616c69642072616e646f6d20776f726420636f756e7400000000000000604482015260640161057c565b60005b609b5481101561176a57600061163760a06111b5565b83838151811061164957611649612025565b602002602001015161165b9190612156565b9050600061166a60a083611966565b600081815260a4602090815260408083205481518083019092528482526001600160a01b03908116928201838152609c8054600181018255955291517faf85b9071dfafeac1409d3f1d19bafc9bc7c37974cde8df0ee6168f0086e539c60029095029485015590517faf85b9071dfafeac1409d3f1d19bafc9bc7c37974cde8df0ee6168f0086e539d90930180546001600160a01b031916939091169290921790915590915061171b60a083611972565b506040518281526001600160a01b0382169033907fd28fd066cbe6a30a425b0a60222cebaba3ee406c3c8f21a2f56ec6b68a6db7ab9060200160405180910390a3836001019350505050611621565b507fc88f650164e2200b137333ff26e3bdfa82a318b079a6ddeabf305c98995491568160405161179a9190611d40565b60405180910390a15050565b60655460ff166106435760405162461bcd60e51b815260206004820152601460248201527314185d5cd8589b194e881b9bdd081c185d5cd95960621b604482015260640161057c565b60608160000180548060200260200160405190810160405280929190818152602001828054801561183f57602002820191906000526020600020905b81548152602001906001019080831161182b575b50505050509050919050565b60655460ff16156106435760405162461bcd60e51b815260206004820152601060248201526f14185d5cd8589b194e881c185d5cd95960821b604482015260640161057c565b60008181526001830160205260408120546118d857508154600181810184556000848152602080822090930184905584548482528286019093526040902091909155610669565b506000610669565b600061115c8383611891565b600054610100900460ff166119135760405162461bcd60e51b815260040161057c906120e2565b61064333611163565b600054610100900460ff166119435760405162461bcd60e51b815260040161057c906120e2565b6065805460ff19169055565b606061195e848460008561197e565b949350505050565b600061115c8383611a59565b600061115c8383611a83565b6060824710156119df5760405162461bcd60e51b815260206004820152602660248201527f416464726573733a20696e73756666696369656e742062616c616e636520666f6044820152651c8818d85b1b60d21b606482015260840161057c565b600080866001600160a01b031685876040516119fb919061216a565b60006040518083038185875af1925050503d8060008114611a38576040519150601f19603f3d011682016040523d82523d6000602084013e611a3d565b606091505b5091509150611a4e87838387611b76565b979650505050505050565b6000826000018281548110611a7057611a70612025565b9060005260206000200154905092915050565b60008181526001830160205260408120548015611b6c576000611aa7600183612088565b8554909150600090611abb90600190612088565b9050818114611b20576000866000018281548110611adb57611adb612025565b9060005260206000200154905080876000018481548110611afe57611afe612025565b6000918252602080832090910192909255918252600188019052604090208390555b8554869080611b3157611b31612186565b600190038181906000526020600020016000905590558560010160008681526020019081526020016000206000905560019350505050610669565b6000915050610669565b60608315611be2578251611bdb576001600160a01b0385163b611bdb5760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e7472616374000000604482015260640161057c565b508161195e565b61195e8383815115611bf75781518083602001fd5b8060405162461bcd60e51b815260040161057c919061219c565b600060208284031215611c2357600080fd5b5035919050565b80356001600160a01b0381168114611c4157600080fd5b919050565b600060208284031215611c5857600080fd5b61115c82611c2a565b634e487b7160e01b600052604160045260246000fd5b60008060408385031215611c8a57600080fd5b823591506020808401356001600160401b0380821115611ca957600080fd5b818601915086601f830112611cbd57600080fd5b813581811115611ccf57611ccf611c61565b8060051b604051601f19603f83011681018181108582111715611cf457611cf4611c61565b604052918252848201925083810185019189831115611d1257600080fd5b938501935b82851015611d3057843584529385019392850192611d17565b8096505050505050509250929050565b6020808252825182820181905260009190848201906040850190845b81811015611d7857835183529284019291840191600101611d5c565b50909695505050505050565b60008083601f840112611d9657600080fd5b5081356001600160401b03811115611dad57600080fd5b6020830191508360208260051b8501011115611dc857600080fd5b9250929050565b60008060008060408587031215611de557600080fd5b84356001600160401b0380821115611dfc57600080fd5b611e0888838901611d84565b90965094506020870135915080821115611e2157600080fd5b50611e2e87828801611d84565b95989497509550505050565b60008060008060808587031215611e5057600080fd5b611e5985611c2a565b93506020850135925060408501359150611e7560608601611c2a565b905092959194509250565b6020808252825182820181905260009190848201906040850190845b81811015611d785783516001600160a01b031683529284019291840191600101611e9c565b801515811461103657600080fd5b60008060408385031215611ee257600080fd5b611eeb83611c2a565b91506020830135611efb81611ec1565b809150509250929050565b602080825282518282018190526000919060409081850190868401855b82811015611f51578151805185528601516001600160a01b0316868501529284019290850190600101611f23565b5091979650505050505050565b60005b83811015611f79578181015183820152602001611f61565b838111156110935750506000910152565b60008151808452611fa2816020860160208601611f5e565b601f01601f19169290920160200192915050565b60018060a01b0384168152826020820152606060408201526000611fdd6060830184611f8a565b95945050505050565b600060208284031215611ff857600080fd5b815161115c81611ec1565b6001600160401b039290921682526001600160a01b0316602082015260400190565b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052601160045260246000fd5b600081600019048311821515161561206b5761206b61203b565b500290565b600082198211156120835761208361203b565b500190565b60008282101561209a5761209a61203b565b500390565b634e487b7160e01b600052601260045260246000fd5b6000826120c4576120c461209f565b500490565b6000602082840312156120db57600080fd5b5051919050565b6020808252602b908201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960408201526a6e697469616c697a696e6760a81b606082015260800190565b60006020828403121561213f57600080fd5b81516001600160401b038116811461115c57600080fd5b6000826121655761216561209f565b500690565b6000825161217c818460208701611f5e565b9190910192915050565b634e487b7160e01b600052603160045260246000fd5b60208152600061115c6020830184611f8a56fea26469706673582212204466f3d20b4e2bca91c0af50f91d9f42f96b1c1904acaa4dd5060d355a4af5ab64736f6c634300080b0033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "constructor": {
        "custom:oz-upgrades-unsafe-allow": "constructor"
      },
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "paused()": {
        "details": "Returns true if the contract is paused, and false otherwise."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    },
    "stateVariables": {
      "NFTL_AMOUNT_FOR_TICKET": {
        "details": "NFTL amount required for 1 ticket"
      },
      "_ticketIdList": {
        "details": "TokenId list"
      },
      "_ticketIdsByUser": {
        "details": "User -> Ticket Id list"
      },
      "_userList": {
        "details": "User list"
      },
      "nftl": {
        "details": "NFTL address"
      },
      "raffleStartAt": {
        "details": "Timestamp the raffle start"
      },
      "totalTicketCount": {
        "details": "Total ticket count"
      },
      "totalWinnerTicketCount": {
        "details": "Winner count"
      },
      "userByTicketId": {
        "details": "Ticket Id -> User"
      },
      "userDeposits": {
        "details": "User -> NFTL amount deposited"
      },
      "vrfCoordinator": {
        "details": "Chainlink VRF params"
      },
      "winners": {
        "details": "Winner list"
      }
    },
    "title": "NFTLRaffle",
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "pause()": {
        "notice": "Pause the contract"
      },
      "unpause()": {
        "notice": "Unpause the contract"
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 1733,
        "contract": "contracts/NFTLRaffle.sol:NFTLRaffle",
        "label": "_initialized",
        "offset": 0,
        "slot": "0",
        "type": "t_uint8"
      },
      {
        "astId": 1736,
        "contract": "contracts/NFTLRaffle.sol:NFTLRaffle",
        "label": "_initializing",
        "offset": 1,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 4520,
        "contract": "contracts/NFTLRaffle.sol:NFTLRaffle",
        "label": "__gap",
        "offset": 0,
        "slot": "1",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 1605,
        "contract": "contracts/NFTLRaffle.sol:NFTLRaffle",
        "label": "_owner",
        "offset": 0,
        "slot": "51",
        "type": "t_address"
      },
      {
        "astId": 1725,
        "contract": "contracts/NFTLRaffle.sol:NFTLRaffle",
        "label": "__gap",
        "offset": 0,
        "slot": "52",
        "type": "t_array(t_uint256)49_storage"
      },
      {
        "astId": 1916,
        "contract": "contracts/NFTLRaffle.sol:NFTLRaffle",
        "label": "_paused",
        "offset": 0,
        "slot": "101",
        "type": "t_bool"
      },
      {
        "astId": 2021,
        "contract": "contracts/NFTLRaffle.sol:NFTLRaffle",
        "label": "__gap",
        "offset": 0,
        "slot": "102",
        "type": "t_array(t_uint256)49_storage"
      },
      {
        "astId": 15342,
        "contract": "contracts/NFTLRaffle.sol:NFTLRaffle",
        "label": "vrfCoordinator",
        "offset": 0,
        "slot": "151",
        "type": "t_address"
      },
      {
        "astId": 15356,
        "contract": "contracts/NFTLRaffle.sol:NFTLRaffle",
        "label": "s_subscriptionId",
        "offset": 20,
        "slot": "151",
        "type": "t_uint64"
      },
      {
        "astId": 15358,
        "contract": "contracts/NFTLRaffle.sol:NFTLRaffle",
        "label": "vrfRequestId",
        "offset": 0,
        "slot": "152",
        "type": "t_uint256"
      },
      {
        "astId": 15362,
        "contract": "contracts/NFTLRaffle.sol:NFTLRaffle",
        "label": "nftl",
        "offset": 0,
        "slot": "153",
        "type": "t_contract(IERC20BurnableUpgradeable)15315"
      },
      {
        "astId": 15365,
        "contract": "contracts/NFTLRaffle.sol:NFTLRaffle",
        "label": "raffleStartAt",
        "offset": 0,
        "slot": "154",
        "type": "t_uint256"
      },
      {
        "astId": 15368,
        "contract": "contracts/NFTLRaffle.sol:NFTLRaffle",
        "label": "totalWinnerTicketCount",
        "offset": 0,
        "slot": "155",
        "type": "t_uint256"
      },
      {
        "astId": 15373,
        "contract": "contracts/NFTLRaffle.sol:NFTLRaffle",
        "label": "winners",
        "offset": 0,
        "slot": "156",
        "type": "t_array(t_struct(WinnerInfo)15339_storage)dyn_storage"
      },
      {
        "astId": 15376,
        "contract": "contracts/NFTLRaffle.sol:NFTLRaffle",
        "label": "totalTicketCount",
        "offset": 0,
        "slot": "157",
        "type": "t_uint256"
      },
      {
        "astId": 15388,
        "contract": "contracts/NFTLRaffle.sol:NFTLRaffle",
        "label": "_userList",
        "offset": 0,
        "slot": "158",
        "type": "t_struct(AddressSet)6304_storage"
      },
      {
        "astId": 15392,
        "contract": "contracts/NFTLRaffle.sol:NFTLRaffle",
        "label": "_ticketIdList",
        "offset": 0,
        "slot": "160",
        "type": "t_struct(UintSet)6461_storage"
      },
      {
        "astId": 15397,
        "contract": "contracts/NFTLRaffle.sol:NFTLRaffle",
        "label": "userDeposits",
        "offset": 0,
        "slot": "162",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 15403,
        "contract": "contracts/NFTLRaffle.sol:NFTLRaffle",
        "label": "_ticketIdsByUser",
        "offset": 0,
        "slot": "163",
        "type": "t_mapping(t_address,t_struct(UintSet)6461_storage)"
      },
      {
        "astId": 15408,
        "contract": "contracts/NFTLRaffle.sol:NFTLRaffle",
        "label": "userByTicketId",
        "offset": 0,
        "slot": "164",
        "type": "t_mapping(t_uint256,t_address)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_bytes32)dyn_storage": {
        "base": "t_bytes32",
        "encoding": "dynamic_array",
        "label": "bytes32[]",
        "numberOfBytes": "32"
      },
      "t_array(t_struct(WinnerInfo)15339_storage)dyn_storage": {
        "base": "t_struct(WinnerInfo)15339_storage",
        "encoding": "dynamic_array",
        "label": "struct NFTLRaffle.WinnerInfo[]",
        "numberOfBytes": "32"
      },
      "t_array(t_uint256)49_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[49]",
        "numberOfBytes": "1568"
      },
      "t_array(t_uint256)50_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[50]",
        "numberOfBytes": "1600"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_contract(IERC20BurnableUpgradeable)15315": {
        "encoding": "inplace",
        "label": "contract IERC20BurnableUpgradeable",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_struct(UintSet)6461_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => struct EnumerableSetUpgradeable.UintSet)",
        "numberOfBytes": "32",
        "value": "t_struct(UintSet)6461_storage"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_bytes32,t_uint256)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_uint256,t_address)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => address)",
        "numberOfBytes": "32",
        "value": "t_address"
      },
      "t_struct(AddressSet)6304_storage": {
        "encoding": "inplace",
        "label": "struct EnumerableSetUpgradeable.AddressSet",
        "members": [
          {
            "astId": 6303,
            "contract": "contracts/NFTLRaffle.sol:NFTLRaffle",
            "label": "_inner",
            "offset": 0,
            "slot": "0",
            "type": "t_struct(Set)5989_storage"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_struct(Set)5989_storage": {
        "encoding": "inplace",
        "label": "struct EnumerableSetUpgradeable.Set",
        "members": [
          {
            "astId": 5984,
            "contract": "contracts/NFTLRaffle.sol:NFTLRaffle",
            "label": "_values",
            "offset": 0,
            "slot": "0",
            "type": "t_array(t_bytes32)dyn_storage"
          },
          {
            "astId": 5988,
            "contract": "contracts/NFTLRaffle.sol:NFTLRaffle",
            "label": "_indexes",
            "offset": 0,
            "slot": "1",
            "type": "t_mapping(t_bytes32,t_uint256)"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_struct(UintSet)6461_storage": {
        "encoding": "inplace",
        "label": "struct EnumerableSetUpgradeable.UintSet",
        "members": [
          {
            "astId": 6460,
            "contract": "contracts/NFTLRaffle.sol:NFTLRaffle",
            "label": "_inner",
            "offset": 0,
            "slot": "0",
            "type": "t_struct(Set)5989_storage"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_struct(WinnerInfo)15339_storage": {
        "encoding": "inplace",
        "label": "struct NFTLRaffle.WinnerInfo",
        "members": [
          {
            "astId": 15336,
            "contract": "contracts/NFTLRaffle.sol:NFTLRaffle",
            "label": "ticketId",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 15338,
            "contract": "contracts/NFTLRaffle.sol:NFTLRaffle",
            "label": "winner",
            "offset": 0,
            "slot": "1",
            "type": "t_address"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint64": {
        "encoding": "inplace",
        "label": "uint64",
        "numberOfBytes": "8"
      },
      "t_uint8": {
        "encoding": "inplace",
        "label": "uint8",
        "numberOfBytes": "1"
      }
    }
  }
}
