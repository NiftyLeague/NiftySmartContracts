{
  "metadata": "{\"compiler\":{\"version\":\"0.8.4\"},\"sources\":{\"contracts/AllowedColorsStorage.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\n\\n/**\\n * @title AllowedColorsStorage\\n * @dev Color indexes need to be restricted per tribe prior to NFT deploy\\n */\\ncontract AllowedColorsStorage is Ownable {\\n    /// @dev Mapping if color is allowed for selected tribe\\n    mapping(uint256 => mapping(uint256 => bool)) private _tribeColorAllowed;\\n\\n    constructor() {}\\n\\n    /**\\n     * @notice Set allowed on a given a list of colors\\n     * @param tribe Tribe ID 1-10\\n     * @param colors List of colors to set for tribe\\n     * @param allowed Bool if the color list should be made allowed or not\\n     */\\n    function setAllowedColorsOnTribe(\\n        uint256 tribe,\\n        uint256[] memory colors,\\n        bool allowed\\n    ) external onlyOwner {\\n        require(tribe > 0 && tribe < 10, \\\"Invalid tribe provided\\\");\\n        for (uint256 i = 0; i < colors.length; i++) {\\n            _toggleColorAllowed(tribe, colors[i], allowed);\\n        }\\n    }\\n\\n    /**\\n     * @notice Toggle color allowed on and off for a tribe\\n     * @param tribe Tribe ID\\n     * @param color Trait ID\\n     * @param allowed Bool if the color should be made allowed or not\\n     * @dev Defaults to false if never set\\n     */\\n    function _toggleColorAllowed(\\n        uint256 tribe,\\n        uint256 color,\\n        bool allowed\\n    ) private {\\n        _tribeColorAllowed[tribe][color] = allowed;\\n    }\\n\\n    /**\\n     * @notice Check if color is allowed for a tribe\\n     * @param tribe Tribe ID\\n     * @param color Trait ID\\n     * @return True if color is allowed for tribe\\n     */\\n    function isAllowedColor(uint256 tribe, uint256 color) public view returns (bool) {\\n        return _tribeColorAllowed[tribe][color];\\n    }\\n}\\n\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\"},\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\"}}}",
  "address": "0x4cf79525c3447AA62B2dafFA876878BEA02e85EA",
  "bytecode": "0x608060405234801561001057600080fd5b5061001a3361001f565b61006f565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b6104f28061007e6000396000f3fe608060405234801561001057600080fd5b50600436106100575760003560e01c8063715018a61461005c5780637d6f971f146100665780638da5cb5b14610079578063968ef8f514610099578063f2fde38b146100d7575b600080fd5b6100646100ea565b005b61006461007436600461034d565b610129565b6000546040516001600160a01b0390911681526020015b60405180910390f35b6100c76100a7366004610429565b600091825260016020908152604080842092845291905290205460ff1690565b6040519015158152602001610090565b6100646100e536600461031f565b61021f565b6000546001600160a01b0316331461011d5760405162461bcd60e51b81526004016101149061044a565b60405180910390fd5b61012760006102ba565b565b6000546001600160a01b031633146101535760405162461bcd60e51b81526004016101149061044a565b6000831180156101635750600a83105b6101a85760405162461bcd60e51b8152602060048201526016602482015275125b9d985b1a59081d1c9a5899481c1c9bdd9a59195960521b6044820152606401610114565b60005b825181101561021957610207848483815181106101d857634e487b7160e01b600052603260045260246000fd5b602090810291909101810151600092835260018252604080842091845291529020805460ff1916841515179055565b806102118161047f565b9150506101ab565b50505050565b6000546001600160a01b031633146102495760405162461bcd60e51b81526004016101149061044a565b6001600160a01b0381166102ae5760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b6064820152608401610114565b6102b7816102ba565b50565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b8035801515811461031a57600080fd5b919050565b600060208284031215610330578081fd5b81356001600160a01b0381168114610346578182fd5b9392505050565b600080600060608486031215610361578182fd5b8335925060208085013567ffffffffffffffff80821115610380578485fd5b818701915087601f830112610393578485fd5b8135818111156103a5576103a56104a6565b8060051b604051601f19603f830116810181811085821117156103ca576103ca6104a6565b604052828152858101935084860182860187018c10156103e8578889fd5b8895505b8386101561040a5780358552600195909501949386019386016103ec565b508097505050505050506104206040850161030a565b90509250925092565b6000806040838503121561043b578182fd5b50508035926020909101359150565b6020808252818101527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604082015260600190565b600060001982141561049f57634e487b7160e01b81526011600452602481fd5b5060010190565b634e487b7160e01b600052604160045260246000fdfea264697066735822122009878c667ab672fcc9e84e2b5c5a7ec072161f4d1ce0f33a4bdc39cd276e554d64736f6c63430008040033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106100575760003560e01c8063715018a61461005c5780637d6f971f146100665780638da5cb5b14610079578063968ef8f514610099578063f2fde38b146100d7575b600080fd5b6100646100ea565b005b61006461007436600461034d565b610129565b6000546040516001600160a01b0390911681526020015b60405180910390f35b6100c76100a7366004610429565b600091825260016020908152604080842092845291905290205460ff1690565b6040519015158152602001610090565b6100646100e536600461031f565b61021f565b6000546001600160a01b0316331461011d5760405162461bcd60e51b81526004016101149061044a565b60405180910390fd5b61012760006102ba565b565b6000546001600160a01b031633146101535760405162461bcd60e51b81526004016101149061044a565b6000831180156101635750600a83105b6101a85760405162461bcd60e51b8152602060048201526016602482015275125b9d985b1a59081d1c9a5899481c1c9bdd9a59195960521b6044820152606401610114565b60005b825181101561021957610207848483815181106101d857634e487b7160e01b600052603260045260246000fd5b602090810291909101810151600092835260018252604080842091845291529020805460ff1916841515179055565b806102118161047f565b9150506101ab565b50505050565b6000546001600160a01b031633146102495760405162461bcd60e51b81526004016101149061044a565b6001600160a01b0381166102ae5760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b6064820152608401610114565b6102b7816102ba565b50565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b8035801515811461031a57600080fd5b919050565b600060208284031215610330578081fd5b81356001600160a01b0381168114610346578182fd5b9392505050565b600080600060608486031215610361578182fd5b8335925060208085013567ffffffffffffffff80821115610380578485fd5b818701915087601f830112610393578485fd5b8135818111156103a5576103a56104a6565b8060051b604051601f19603f830116810181811085821117156103ca576103ca6104a6565b604052828152858101935084860182860187018c10156103e8578889fd5b8895505b8386101561040a5780358552600195909501949386019386016103ec565b508097505050505050506104206040850161030a565b90509250925092565b6000806040838503121561043b578182fd5b50508035926020909101359150565b6020808252818101527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604082015260600190565b600060001982141561049f57634e487b7160e01b81526011600452602481fd5b5060010190565b634e487b7160e01b600052604160045260246000fdfea264697066735822122009878c667ab672fcc9e84e2b5c5a7ec072161f4d1ce0f33a4bdc39cd276e554d64736f6c63430008040033",
  "abi": [
    { "inputs": [], "stateMutability": "nonpayable", "type": "constructor" },
    {
      "anonymous": false,
      "inputs": [
        { "indexed": true, "internalType": "address", "name": "previousOwner", "type": "address" },
        { "indexed": true, "internalType": "address", "name": "newOwner", "type": "address" }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "inputs": [
        { "internalType": "uint256", "name": "tribe", "type": "uint256" },
        { "internalType": "uint256", "name": "color", "type": "uint256" }
      ],
      "name": "isAllowedColor",
      "outputs": [{ "internalType": "bool", "name": "", "type": "bool" }],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [{ "internalType": "address", "name": "", "type": "address" }],
      "stateMutability": "view",
      "type": "function"
    },
    { "inputs": [], "name": "renounceOwnership", "outputs": [], "stateMutability": "nonpayable", "type": "function" },
    {
      "inputs": [
        { "internalType": "uint256", "name": "tribe", "type": "uint256" },
        { "internalType": "uint256[]", "name": "colors", "type": "uint256[]" },
        { "internalType": "bool", "name": "allowed", "type": "bool" }
      ],
      "name": "setAllowedColorsOnTribe",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [{ "internalType": "address", "name": "newOwner", "type": "address" }],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ]
}
